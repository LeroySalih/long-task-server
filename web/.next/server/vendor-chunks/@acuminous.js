/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@acuminous";
exports.ids = ["vendor-chunks/@acuminous"];
exports.modules = {

/***/ "(rsc)/./node_modules/@acuminous/bitsyntax/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@acuminous/bitsyntax/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports.parse = __webpack_require__(/*! ./lib/parse */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/parse.js\").parse;\nmodule.exports.match = __webpack_require__(/*! ./lib/interp */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/interp.js\").match;\nmodule.exports.build = __webpack_require__(/*! ./lib/constructor */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/constructor.js\").build;\nmodule.exports.write = __webpack_require__(/*! ./lib/constructor */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/constructor.js\").write;\n\nmodule.exports.matcher = module.exports.compile = __webpack_require__(/*! ./lib/compile */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/compile.js\").compile;\nmodule.exports.builder = __webpack_require__(/*! ./lib/compile */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/compile.js\").compile_builder;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFjdW1pbm91cy9iaXRzeW50YXgvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsNkhBQW1EO0FBQ25ELCtIQUFvRDtBQUNwRCx5SUFBeUQ7QUFDekQseUlBQXlEOztBQUV6RCxzQkFBc0IsR0FBRyxxSUFDUztBQUNsQyw2SUFBaUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIyLy4vbm9kZV9tb2R1bGVzL0BhY3VtaW5vdXMvYml0c3ludGF4L2luZGV4LmpzPzQwNjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vbGliL3BhcnNlJykucGFyc2U7XG5tb2R1bGUuZXhwb3J0cy5tYXRjaCA9IHJlcXVpcmUoJy4vbGliL2ludGVycCcpLm1hdGNoO1xubW9kdWxlLmV4cG9ydHMuYnVpbGQgPSByZXF1aXJlKCcuL2xpYi9jb25zdHJ1Y3RvcicpLmJ1aWxkO1xubW9kdWxlLmV4cG9ydHMud3JpdGUgPSByZXF1aXJlKCcuL2xpYi9jb25zdHJ1Y3RvcicpLndyaXRlO1xuXG5tb2R1bGUuZXhwb3J0cy5tYXRjaGVyID0gbW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9XG4gIHJlcXVpcmUoJy4vbGliL2NvbXBpbGUnKS5jb21waWxlO1xubW9kdWxlLmV4cG9ydHMuYnVpbGRlciA9IHJlcXVpcmUoJy4vbGliL2NvbXBpbGUnKS5jb21waWxlX2J1aWxkZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@acuminous/bitsyntax/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@acuminous/bitsyntax/lib/compile.js":
/*!**********************************************************!*\
  !*** ./node_modules/@acuminous/bitsyntax/lib/compile.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Compile patterns to recognisers and constructors\n\n\n\n__webpack_require__(/*! buffer-more-ints */ \"(rsc)/./node_modules/buffer-more-ints/buffer-more-ints.js\");\nvar $ = (__webpack_require__(/*! util */ \"util\").format);\n\nvar parse = (__webpack_require__(/*! ./parse */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/parse.js\").parse);\nvar interp = __webpack_require__(/*! ./interp */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/interp.js\"),\n  parse_int = interp.parse_int,\n  parse_float = interp.parse_float;\nvar construct = __webpack_require__(/*! ./constructor */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/constructor.js\"),\n  write_int = construct.write_int,\n  write_float = construct.write_float;\n\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/safe-buffer/index.js\").Buffer);\n\nvar lines = [];\nfunction $start() {\n  lines = [];\n}\nfunction $line(/* format , args */) {\n  lines.push($.apply(null, arguments));\n}\nfunction $result() {\n  return lines.join('\\n');\n}\n\nfunction bits_expr(segment) {\n  if (typeof segment.size === 'string') {\n    return $('%s * %d', var_name(segment.size), segment.unit);\n  }\n  else {\n    return (segment.size * segment.unit).toString();\n  }\n}\n\nfunction get_number(segment) {\n  $line('bits = %s;\\n', bits_expr(segment));\n  var parser = (segment.type === 'integer') ?\n    'parse_int' : 'parse_float';\n  var be = segment.bigendian, sg = segment.signed;\n  $line(\"byteoffset = offset / 8; offset += bits\");\n  $line(\"if (offset > binsize) { return false; }\");\n  $line(\"else { result = %s(bin, byteoffset, bits / 8, %s, %s); }\",\n        parser, be, sg);\n}\n\nfunction get_binary(segment) {\n  $line(\"byteoffset = offset / 8;\");\n  if (segment.size === true) {\n    $line(\"offset = binsize;\");\n    $line(\"result = bin.slice(byteoffset);\");\n  }\n  else {\n    $line(\"bits = %s;\", bits_expr(segment));\n    $line(\"offset += bits;\");\n    $line(\"if (offset > binsize) { return false; }\");\n    $line(\"else { result = bin.slice(byteoffset,\",\n          \"byteoffset + bits / 8); }\");\n  }\n}\n\nfunction get_string(segment) {\n  $line(\"byteoffset = offset / 8;\");\n  var strlen = segment.value.length;\n  var strlenbits = strlen * 8;\n  $line(\"offset += %d;\", strlenbits);\n  $line(\"if (offset > binsize) { return false; }\");\n  $line(\"else { result = bin.toString(byteoffset,\",\n        $(\"byteoffset + %d); }\", strlen));\n}\n\nfunction skip_bits(segment) {\n  if (typeof segment.size === 'string') {\n    // Damn. Have to look up the size.\n    $line(\"var skipbits = %s * %d;\",\n          var_name(segment.size), segment.unit);\n    $line(\"if (offset + skipbits > binsize) { return false; }\");\n    $line(\"else { offset += skipbits; }\");\n  }\n  else if (segment.size === true) {\n    $line(\"if (offset % 8 === 0) { offset = binsize; }\");\n    $line(\"else { return false; }\");\n  }\n  else {\n    var bits = segment.unit * segment.size;\n    $line(\"if (offset + %d > binsize) { return false; }\", bits);\n    $line(\"else { offset += %d; }\", bits);\n  }\n}\n\nfunction match_seg(segment) {\n  if (segment.name === '_') {\n    skip_bits(segment);\n  }\n  else {\n    var assign_result;\n    switch (segment.type) {\n    case 'integer':\n    case 'float':\n      get_number(segment);\n      break;\n    case 'binary':\n      get_binary(segment);\n      break;\n    case 'string':\n      get_string(segment);\n      break;\n    }\n    $line(\"if (result === false) return false;\");\n    if (segment.name) {\n      // variable is given a value in the environment\n      $line(\"else if (%s !== undefined) {\", var_name(segment.name));\n      // .. and it is not the same as that matched\n      $line(\"if (%s != result) return false;\",\n            var_name(segment.name));\n      $line(\"}\");\n      // variable is free\n      $line('else %s = result;', var_name(segment.name));\n    }\n    else {\n      var repr = JSON.stringify(segment.value);\n      $line(\"else if (result != %s) return false;\", repr);\n    }\n  }\n}\n\nfunction var_name(name) {\n  return  'var_' + name;\n}\n\nfunction variables(segments) {\n  var names = {};\n  for (var i = 0; i < segments.length; i++) {\n    var name = segments[i].name;\n    if (name && name !== '_') {\n      names[name] = true;\n    }\n    name = segments[i].size;\n    if (typeof name === 'string') {\n      names[name] = true;\n    }\n  }\n  return Object.keys(names);\n}\n\nfunction compile_pattern(segments) {\n  $start();\n  $line(\"return function(binary, env) {\");\n  $line(\"'use strict';\");\n  $line(\"var bin = binary, env = env || {};\");\n  $line(\"var offset = 0, binsize = bin.length * 8;\");\n  $line(\"var bits, result, byteoffset;\");\n  var varnames = variables(segments);\n  for (var v = 0; v < varnames.length; v++) {\n    var name = varnames[v];\n    $line(\"var %s = env['%s'];\", var_name(name), name);\n  }\n\n  var len = segments.length;\n  for (var i = 0; i < len; i++) {\n    var segment = segments[i];\n    $line(\"// \" + JSON.stringify(segment));\n    match_seg(segment);\n  }\n\n  $line(\"if (offset == binsize) {\");\n  $line(\"return {\");\n  for (var v = 0; v < varnames.length; v++) {\n    var name = varnames[v];\n    $line(\"%s: %s,\", name, var_name(name));\n  }\n  $line('};');\n  $line('}'); // if offset == binsize\n  $line(\"else return false;\");\n  $line(\"}\"); // end function\n\n  var fn = new Function('parse_int', 'parse_float', $result());\n  return fn(parse_int, parse_float);\n}\n\n\nfunction write_seg(segment) {\n  switch (segment.type) {\n  case 'string':\n    $line(\"offset += buf.write(%s, offset, 'utf8');\",\n          JSON.stringify(segment.value));\n    break;\n  case 'binary':\n    $line(\"val = bindings['%s'];\", segment.name);\n    if (segment.size === true) {\n      $line('size = val.length;');\n    }\n    else if (typeof segment.size === 'string') {\n      $line(\"size = (bindings['%s'] * %d) / 8;\",\n            segment.size, segment.unit);\n    }\n    else {\n      $line(\"size = %d;\", (segment.size * segment.unit) / 8);\n    }\n    $line('val.copy(buf, offset, 0, size);');\n    $line('offset += size;');\n    break;\n  case 'integer':\n  case 'float':\n    write_number(segment);\n    break;\n  }\n}\n\nfunction write_number(segment) {\n  if (segment.name) {\n    $line(\"val = bindings['%s'];\", segment.name);\n  }\n  else {\n    $line(\"val = %d\", segment.value);\n  }\n  var writer = (segment.type === 'integer') ?\n    'write_int' : 'write_float';\n  if (typeof segment.size === 'string') {\n    $line(\"size = (bindings['%s'] * %d) / 8;\",\n          segment.size, segment.unit);\n  }\n  else {\n    $line('size = %d;', (segment.size * segment.unit) / 8);\n  }\n  $line('%s(buf, val, offset, size, %s);',\n        writer, segment.bigendian);\n  $line('offset += size;');\n}\n\nfunction size_of(segments) {\n  var variable = [];\n  var fixed = 0;\n\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (typeof segment.size === 'string' ||\n        segment.size === true) {\n      variable.push(segment);\n    }\n    else if (segment.type === 'string') {\n      fixed += Buffer.byteLength(segment.value);\n    }\n    else {\n      fixed += (segment.size * segment.unit) / 8;\n    }\n  }\n\n  $line('var buffersize = %d;', fixed);\n\n  if (variable.length > 0) {\n    for (var j = 0; j < variable.length; j++) {\n      var segment = variable[j];\n      if (segment.size === true) {\n        $line(\"buffersize += bindings['%s'].length;\", segment.name);\n      }\n      else {\n        $line(\"buffersize += (bindings['%s'] * %d) / 8;\",\n              segment.size, segment.unit);\n      }\n    }\n  }\n}\n\nfunction emit_write(segments) {\n  $line('var val, size;');\n\n  var len = segments.length;\n  for (var i = 0; i < len; i++) {\n    var segment = segments[i];\n    $line('// %s', JSON.stringify(segment));\n    write_seg(segment);\n  }\n}\n\nfunction compile_ctor(segments) {\n  $start();\n  $line('return function(bindings) {');\n  $line(\"'use strict';\");\n  size_of(segments);\n  $line('var buf = Buffer.alloc(buffersize);');\n  $line('var offset = 0;');\n  emit_write(segments);\n  $line('return buf;');\n  $line('}'); // end function\n\n  return new Function('write_int', 'write_float', 'Buffer',\n                      $result())(write_int, write_float, Buffer);\n}\n\nmodule.exports.compile_pattern = compile_pattern;\nmodule.exports.compile = function() {\n  var str = [].join.call(arguments, ',');\n  var p = parse(str);\n  return compile_pattern(p);\n};\nmodule.exports.compile_builder = function() {\n  var str = [].join.call(arguments, ',');\n  var p = parse(str);\n  return compile_ctor(p);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@acuminous/bitsyntax/lib/compile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@acuminous/bitsyntax/lib/constructor.js":
/*!**************************************************************!*\
  !*** ./node_modules/@acuminous/bitsyntax/lib/constructor.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// -*- js-indent-level: 2 -*-\n\n// Constructors given patterns\n\n\n\nvar ints = __webpack_require__(/*! buffer-more-ints */ \"(rsc)/./node_modules/buffer-more-ints/buffer-more-ints.js\");\nvar Buffer = (__webpack_require__(/*! safe-buffer */ \"(rsc)/./node_modules/safe-buffer/index.js\").Buffer);\n\n// Interpret the pattern, writing values into a buffer\nfunction write(buf, offset, pattern, bindings) {\n  for (var i=0, len = pattern.length; i < len; i++) {\n    var segment = pattern[i];\n    switch (segment.type) {\n    case 'string':\n      offset += buf.write(segment.value, offset, 'utf8');\n      break;\n    case 'binary':\n      offset += writeBinary(segment, buf, offset, bindings);\n      break;\n    case 'integer':\n      offset += writeInteger(segment, buf, offset, bindings);\n      break;\n    case 'float':\n      offset += writeFloat(segment, buf, offset, bindings);\n      break;\n    }\n  }\n  return offset;\n}\n\nfunction build(pattern, bindings) {\n  var bufsize = size_of(pattern, bindings);\n  var buf = Buffer.alloc(bufsize);\n  write(buf, 0, pattern, bindings);\n  return buf;\n}\n\n// In bytes\nfunction size_of_segment(segment, bindings) {\n  // size refers to a variable\n  if (typeof segment.size === 'string') {\n    return (bindings[segment.size] * segment.unit) / 8;\n  }\n  if (segment.type === 'string') {\n    return Buffer.byteLength(segment.value, 'utf8');\n  }\n  if (segment.type === 'binary' && segment.size === true) {\n    var val = bindings[segment.name];\n    return val.length;\n  }\n  return (segment.size * segment.unit) / 8;\n}\n\n// size of the to-be-constructed binary, in bytes\nfunction size_of(segments, bindings) {\n  var size = 0;\n  for (var i=0, len = segments.length; i < len; i++) {\n    size += size_of_segment(segments[i], bindings);\n  }\n  return size;\n}\n\nfunction writeBinary(segment, buf, offset, bindings) {\n  var bin = bindings[segment.name];\n  var size = size_of_segment(segment, bindings);\n  bin.copy(buf, offset, 0, size);\n  return size;\n}\n\n// TODO in ff might use the noAssert argument to Buffer.write*() but\n// need to check that it does the right thing wrt little-endian\n\nfunction writeInteger(segment, buf, offset, bindings) {\n  var value = (segment.name) ? bindings[segment.name] : segment.value;\n  var size = size_of_segment(segment, bindings);\n  return write_int(buf, value, offset, size, segment.bigendian);\n}\n\nfunction write_int(buf, value, offset, size, bigendian) {\n  switch (size) {\n  case 1:\n    buf.writeUInt8(value, offset);\n    break;\n  case 2:\n    (bigendian) ?\n      buf.writeUInt16BE(value, offset) :\n      buf.writeUInt16LE(value, offset);\n    break;\n  case 4:\n    (bigendian) ?\n      buf.writeUInt32BE(value, offset) :\n      buf.writeUInt32LE(value, offset);\n    break;\n  case 8:\n    (bigendian) ?\n      ints.writeUInt64BE(buf, value, offset) :\n      ints.writeUInt64LE(buf, value, offset);\n    break;\n  default:\n    throw new Error(\"integer size * unit must be 8, 16, 32 or 64\");\n  }\n  return size;\n}\n\nfunction writeFloat(segment, buf, offset, bindings) {\n  var value = (segment.name) ? bindings[segment.name] : segment.value;\n  var size = size_of_segment(segment, bindings);\n  return write_float(buf, value, offset, size, segment.bigendian);\n}\n\nfunction write_float(buf, value, offset, size, bigendian) {\n  if (size === 4) {\n    (bigendian) ?\n      buf.writeFloatBE(value, offset) :\n      buf.writeFloatLE(value, offset);\n  }\n  else if (size === 8) {\n    (bigendian) ?\n      buf.writeDoubleBE(value, offset) :\n      buf.writeDoubleLE(value, offset);\n  }\n  else {\n    throw new Error(\"float size * unit must be 32 or 64\");\n  }\n  return size;\n}\n\nvar parse = (__webpack_require__(/*! ./parse */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/parse.js\").parse);\n\nmodule.exports.write = write;\nmodule.exports.build = build;\nmodule.exports.write_int = write_int;\nmodule.exports.write_float = write_float;\n\nmodule.exports.builder = function(pstr) {\n  pstr = (arguments.length > 1) ? [].join.call(arguments, ',') : pstr;\n  var pattern = parse(pstr);\n  return function(vars) {\n    return build(pattern, vars);\n  };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFjdW1pbm91cy9iaXRzeW50YXgvbGliL2NvbnN0cnVjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyxtRkFBa0I7QUFDckMsYUFBYSw0RkFBNkI7O0FBRTFDO0FBQ0E7QUFDQSxzQ0FBc0MsU0FBUztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsU0FBUztBQUNoRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWSxvR0FBd0I7O0FBRXBDLG9CQUFvQjtBQUNwQixvQkFBb0I7QUFDcEIsd0JBQXdCO0FBQ3hCLDBCQUEwQjs7QUFFMUIsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYjIvLi9ub2RlX21vZHVsZXMvQGFjdW1pbm91cy9iaXRzeW50YXgvbGliL2NvbnN0cnVjdG9yLmpzPzdhZmEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gLSotIGpzLWluZGVudC1sZXZlbDogMiAtKi1cblxuLy8gQ29uc3RydWN0b3JzIGdpdmVuIHBhdHRlcm5zXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGludHMgPSByZXF1aXJlKCdidWZmZXItbW9yZS1pbnRzJyk7XG52YXIgQnVmZmVyID0gcmVxdWlyZSgnc2FmZS1idWZmZXInKS5CdWZmZXI7XG5cbi8vIEludGVycHJldCB0aGUgcGF0dGVybiwgd3JpdGluZyB2YWx1ZXMgaW50byBhIGJ1ZmZlclxuZnVuY3Rpb24gd3JpdGUoYnVmLCBvZmZzZXQsIHBhdHRlcm4sIGJpbmRpbmdzKSB7XG4gIGZvciAodmFyIGk9MCwgbGVuID0gcGF0dGVybi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBzZWdtZW50ID0gcGF0dGVybltpXTtcbiAgICBzd2l0Y2ggKHNlZ21lbnQudHlwZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBvZmZzZXQgKz0gYnVmLndyaXRlKHNlZ21lbnQudmFsdWUsIG9mZnNldCwgJ3V0ZjgnKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICBvZmZzZXQgKz0gd3JpdGVCaW5hcnkoc2VnbWVudCwgYnVmLCBvZmZzZXQsIGJpbmRpbmdzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgb2Zmc2V0ICs9IHdyaXRlSW50ZWdlcihzZWdtZW50LCBidWYsIG9mZnNldCwgYmluZGluZ3MpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnZmxvYXQnOlxuICAgICAgb2Zmc2V0ICs9IHdyaXRlRmxvYXQoc2VnbWVudCwgYnVmLCBvZmZzZXQsIGJpbmRpbmdzKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBidWlsZChwYXR0ZXJuLCBiaW5kaW5ncykge1xuICB2YXIgYnVmc2l6ZSA9IHNpemVfb2YocGF0dGVybiwgYmluZGluZ3MpO1xuICB2YXIgYnVmID0gQnVmZmVyLmFsbG9jKGJ1ZnNpemUpO1xuICB3cml0ZShidWYsIDAsIHBhdHRlcm4sIGJpbmRpbmdzKTtcbiAgcmV0dXJuIGJ1Zjtcbn1cblxuLy8gSW4gYnl0ZXNcbmZ1bmN0aW9uIHNpemVfb2Zfc2VnbWVudChzZWdtZW50LCBiaW5kaW5ncykge1xuICAvLyBzaXplIHJlZmVycyB0byBhIHZhcmlhYmxlXG4gIGlmICh0eXBlb2Ygc2VnbWVudC5zaXplID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiAoYmluZGluZ3Nbc2VnbWVudC5zaXplXSAqIHNlZ21lbnQudW5pdCkgLyA4O1xuICB9XG4gIGlmIChzZWdtZW50LnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKHNlZ21lbnQudmFsdWUsICd1dGY4Jyk7XG4gIH1cbiAgaWYgKHNlZ21lbnQudHlwZSA9PT0gJ2JpbmFyeScgJiYgc2VnbWVudC5zaXplID09PSB0cnVlKSB7XG4gICAgdmFyIHZhbCA9IGJpbmRpbmdzW3NlZ21lbnQubmFtZV07XG4gICAgcmV0dXJuIHZhbC5sZW5ndGg7XG4gIH1cbiAgcmV0dXJuIChzZWdtZW50LnNpemUgKiBzZWdtZW50LnVuaXQpIC8gODtcbn1cblxuLy8gc2l6ZSBvZiB0aGUgdG8tYmUtY29uc3RydWN0ZWQgYmluYXJ5LCBpbiBieXRlc1xuZnVuY3Rpb24gc2l6ZV9vZihzZWdtZW50cywgYmluZGluZ3MpIHtcbiAgdmFyIHNpemUgPSAwO1xuICBmb3IgKHZhciBpPTAsIGxlbiA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgc2l6ZSArPSBzaXplX29mX3NlZ21lbnQoc2VnbWVudHNbaV0sIGJpbmRpbmdzKTtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn1cblxuZnVuY3Rpb24gd3JpdGVCaW5hcnkoc2VnbWVudCwgYnVmLCBvZmZzZXQsIGJpbmRpbmdzKSB7XG4gIHZhciBiaW4gPSBiaW5kaW5nc1tzZWdtZW50Lm5hbWVdO1xuICB2YXIgc2l6ZSA9IHNpemVfb2Zfc2VnbWVudChzZWdtZW50LCBiaW5kaW5ncyk7XG4gIGJpbi5jb3B5KGJ1Ziwgb2Zmc2V0LCAwLCBzaXplKTtcbiAgcmV0dXJuIHNpemU7XG59XG5cbi8vIFRPRE8gaW4gZmYgbWlnaHQgdXNlIHRoZSBub0Fzc2VydCBhcmd1bWVudCB0byBCdWZmZXIud3JpdGUqKCkgYnV0XG4vLyBuZWVkIHRvIGNoZWNrIHRoYXQgaXQgZG9lcyB0aGUgcmlnaHQgdGhpbmcgd3J0IGxpdHRsZS1lbmRpYW5cblxuZnVuY3Rpb24gd3JpdGVJbnRlZ2VyKHNlZ21lbnQsIGJ1Ziwgb2Zmc2V0LCBiaW5kaW5ncykge1xuICB2YXIgdmFsdWUgPSAoc2VnbWVudC5uYW1lKSA/IGJpbmRpbmdzW3NlZ21lbnQubmFtZV0gOiBzZWdtZW50LnZhbHVlO1xuICB2YXIgc2l6ZSA9IHNpemVfb2Zfc2VnbWVudChzZWdtZW50LCBiaW5kaW5ncyk7XG4gIHJldHVybiB3cml0ZV9pbnQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBzaXplLCBzZWdtZW50LmJpZ2VuZGlhbik7XG59XG5cbmZ1bmN0aW9uIHdyaXRlX2ludChidWYsIHZhbHVlLCBvZmZzZXQsIHNpemUsIGJpZ2VuZGlhbikge1xuICBzd2l0Y2ggKHNpemUpIHtcbiAgY2FzZSAxOlxuICAgIGJ1Zi53cml0ZVVJbnQ4KHZhbHVlLCBvZmZzZXQpO1xuICAgIGJyZWFrO1xuICBjYXNlIDI6XG4gICAgKGJpZ2VuZGlhbikgP1xuICAgICAgYnVmLndyaXRlVUludDE2QkUodmFsdWUsIG9mZnNldCkgOlxuICAgICAgYnVmLndyaXRlVUludDE2TEUodmFsdWUsIG9mZnNldCk7XG4gICAgYnJlYWs7XG4gIGNhc2UgNDpcbiAgICAoYmlnZW5kaWFuKSA/XG4gICAgICBidWYud3JpdGVVSW50MzJCRSh2YWx1ZSwgb2Zmc2V0KSA6XG4gICAgICBidWYud3JpdGVVSW50MzJMRSh2YWx1ZSwgb2Zmc2V0KTtcbiAgICBicmVhaztcbiAgY2FzZSA4OlxuICAgIChiaWdlbmRpYW4pID9cbiAgICAgIGludHMud3JpdGVVSW50NjRCRShidWYsIHZhbHVlLCBvZmZzZXQpIDpcbiAgICAgIGludHMud3JpdGVVSW50NjRMRShidWYsIHZhbHVlLCBvZmZzZXQpO1xuICAgIGJyZWFrO1xuICBkZWZhdWx0OlxuICAgIHRocm93IG5ldyBFcnJvcihcImludGVnZXIgc2l6ZSAqIHVuaXQgbXVzdCBiZSA4LCAxNiwgMzIgb3IgNjRcIik7XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQoc2VnbWVudCwgYnVmLCBvZmZzZXQsIGJpbmRpbmdzKSB7XG4gIHZhciB2YWx1ZSA9IChzZWdtZW50Lm5hbWUpID8gYmluZGluZ3Nbc2VnbWVudC5uYW1lXSA6IHNlZ21lbnQudmFsdWU7XG4gIHZhciBzaXplID0gc2l6ZV9vZl9zZWdtZW50KHNlZ21lbnQsIGJpbmRpbmdzKTtcbiAgcmV0dXJuIHdyaXRlX2Zsb2F0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgc2l6ZSwgc2VnbWVudC5iaWdlbmRpYW4pO1xufVxuXG5mdW5jdGlvbiB3cml0ZV9mbG9hdChidWYsIHZhbHVlLCBvZmZzZXQsIHNpemUsIGJpZ2VuZGlhbikge1xuICBpZiAoc2l6ZSA9PT0gNCkge1xuICAgIChiaWdlbmRpYW4pID9cbiAgICAgIGJ1Zi53cml0ZUZsb2F0QkUodmFsdWUsIG9mZnNldCkgOlxuICAgICAgYnVmLndyaXRlRmxvYXRMRSh2YWx1ZSwgb2Zmc2V0KTtcbiAgfVxuICBlbHNlIGlmIChzaXplID09PSA4KSB7XG4gICAgKGJpZ2VuZGlhbikgP1xuICAgICAgYnVmLndyaXRlRG91YmxlQkUodmFsdWUsIG9mZnNldCkgOlxuICAgICAgYnVmLndyaXRlRG91YmxlTEUodmFsdWUsIG9mZnNldCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZmxvYXQgc2l6ZSAqIHVuaXQgbXVzdCBiZSAzMiBvciA2NFwiKTtcbiAgfVxuICByZXR1cm4gc2l6ZTtcbn1cblxudmFyIHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpLnBhcnNlO1xuXG5tb2R1bGUuZXhwb3J0cy53cml0ZSA9IHdyaXRlO1xubW9kdWxlLmV4cG9ydHMuYnVpbGQgPSBidWlsZDtcbm1vZHVsZS5leHBvcnRzLndyaXRlX2ludCA9IHdyaXRlX2ludDtcbm1vZHVsZS5leHBvcnRzLndyaXRlX2Zsb2F0ID0gd3JpdGVfZmxvYXQ7XG5cbm1vZHVsZS5leHBvcnRzLmJ1aWxkZXIgPSBmdW5jdGlvbihwc3RyKSB7XG4gIHBzdHIgPSAoYXJndW1lbnRzLmxlbmd0aCA+IDEpID8gW10uam9pbi5jYWxsKGFyZ3VtZW50cywgJywnKSA6IHBzdHI7XG4gIHZhciBwYXR0ZXJuID0gcGFyc2UocHN0cik7XG4gIHJldHVybiBmdW5jdGlvbih2YXJzKSB7XG4gICAgcmV0dXJuIGJ1aWxkKHBhdHRlcm4sIHZhcnMpO1xuICB9O1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@acuminous/bitsyntax/lib/constructor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@acuminous/bitsyntax/lib/interp.js":
/*!*********************************************************!*\
  !*** ./node_modules/@acuminous/bitsyntax/lib/interp.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// -*- js-indent: 2 -*-\n// Interpreter for bit syntax AST.\n// Grammar:\n//\n// pattern   := segment (\",\" segment)*\n// segment   := (value | var) (\":\" size)? (\"/\" specifier (\"-\" specifier)*)? | string\n// var       := \"_\" | identifier\n// size      := integer | var\n// specifier := \"little\" | \"big\" | \"signed\" | \"unsigned\" | \"unit\" \":\" 0..256 | type\n// type      := \"integer\" | \"binary\" | \"float\"\n//\n// where integer has the obvious meaning, and identifier is anything\n// other than \"_\" that fits the JavaScript identifier specification.\n//\n\n// We'll use an object to represent each segment, and an array of\n// segments for a pattern. We won't try to optimise for groups of\n// patterns; we'll just step through each to see if it works. We rely\n// a hypothetical prior step to check that it's a valid pattern.\n\n// ? compile to intermediate instructions ?\n\n// A segment looks like\n// {\n//    type: string, // 'string' is special case\n//    size: integer | true, // true means 'all remaining'\n//    name: string | null, // (may be '_')\n//    value: value | null, // either name OR value\n//    unit: integer,\n//    signed: boolean,\n//    bigendian: boolean\n// }\n\n\n\nvar ints    = __webpack_require__(/*! buffer-more-ints */ \"(rsc)/./node_modules/buffer-more-ints/buffer-more-ints.js\"),\n    debug   = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")('bitsyntax-Interpreter');\n\nfunction parse_int(bin, off, sizeInBytes, bigendian, signed) {\n  switch (sizeInBytes) {\n  case 1:\n    return (signed) ? bin.readInt8(off) : bin.readUInt8(off);\n  case 2:\n    return (bigendian) ?\n      (signed) ? bin.readInt16BE(off) : bin.readUInt16BE(off) :\n      (signed) ? bin.readInt16LE(off) : bin.readUInt16LE(off);\n  case 4:\n    return (bigendian) ?\n      (signed) ? bin.readInt32BE(off) : bin.readUInt32BE(off) :\n      (signed) ? bin.readInt32LE(off) : bin.readUInt32LE(off);\n  case 8:\n    return (bigendian) ?\n      ((signed) ? ints.readInt64BE : ints.readUInt64BE)(bin, off) :\n      ((signed) ? ints.readInt64LE : ints.readUInt64LE)(bin, off);\n  default:\n    throw \"Integers must be 8-, 16-, 32- or 64-bit\";\n  }\n}\n\nfunction parse_float(bin, off, sizeInBytes, bigendian) {\n  switch (sizeInBytes) {\n  case 4:\n    return (bigendian) ? bin.readFloatBE(off) : bin.readFloatLE(off);\n  case 8:\n    return (bigendian) ? bin.readDoubleBE(off) : bin.readDoubleLE(off);\n  default:\n    throw \"Floats must be 32- or 64-bit\";\n  }\n}\n\nfunction size_of(segment, bound) {\n  var size = segment.size;\n  if (typeof size === 'string') {\n    return bound[size];\n  }\n  else {\n    return size;\n  }\n}\n\nfunction new_scope(env) {\n  function scope() {};\n  scope.prototype = env;\n  return new scope();\n}\n\nfunction bindings(scope) {\n  var s = {};\n  for (var k in scope) {\n    if (scope.hasOwnProperty(k)) {\n      s[k] = scope[k];\n    }\n  }\n  return s;\n}\n\nfunction match(pattern, binary, boundvars) {\n  var offset = 0, vars = new_scope(boundvars);\n  var binsize = binary.length * 8;\n\n  function skip_bits(segment) {\n    debug(\"skip bits\"); debug(segment);\n    var size = size_of(segment, vars);\n    if (size === true) {\n      if (offset % 8 === 0) {\n        offset = binsize;\n        return true;\n      }\n      else {\n        return false;\n      }\n    }\n\n    var bits = segment.unit * size;\n    if (offset + bits > binsize) {\n      return false;\n    }\n    else {\n      offset += bits;\n    }\n  }\n\n  function get_integer(segment) {\n    debug(\"get_integer\"); debug(segment);\n    // let's do only multiples of eight bits for now\n    var unit = segment.unit, size = size_of(segment, vars);\n    var bitsize = size * unit;\n    var byteoffset = offset / 8; // NB assumes aligned\n    offset += bitsize;\n    if (bitsize % 8 > 0 || (offset > binsize)) {\n      return false;\n    }\n    else {\n      return parse_int(binary, byteoffset, bitsize / 8,\n                       segment.bigendian, segment.signed);\n    }\n  }\n\n  function get_float(segment) {\n    debug(\"get_float\"); debug(segment);\n    var unit = segment.unit; var size = size_of(segment, vars);\n    var bitsize = size * unit;\n    var byteoffset = offset / 8; // assume aligned\n    offset += bitsize;\n    if (offset > binsize) {\n      return false;\n    }\n    else {\n      return parse_float(binary, byteoffset,\n                         bitsize / 8, segment.bigendian);\n    }\n  }\n\n  function get_binary(segment) {\n    debug(\"get_binary\"); debug(segment);\n    var unit = segment.unit, size = size_of(segment, vars);\n    var byteoffset = offset / 8; // NB alignment\n\n    if (size === true) {\n      offset = binsize;\n      return binary.slice(byteoffset);\n    }\n    else {\n      var bitsize = size * unit;\n      if (bitsize % 8 > 0 || (offset + bitsize) > binsize) {\n        return false;\n      }\n      else {\n        offset += bitsize;\n        return binary.slice(byteoffset, byteoffset + bitsize / 8);\n      }\n    }\n  }\n\n  function get_string(segment) {\n    debug(\"get_string\"); debug(segment);\n    var len = segment.value.length;\n    var byteoffset = offset / 8;\n\n    offset += len * 8;\n    if (offset > binsize) {\n      return false;\n    }\n    // FIXME bytes vs UTF8 characters\n    return binary.slice(byteoffset, byteoffset + len).toString('utf8');\n  }\n\n  var patternlen = pattern.length;\n  for (var i = 0;  i < patternlen; i++) {\n    var segment = pattern[i];\n    var result = false;\n    if (segment.name === '_') {\n      result = skip_bits(segment);\n    }\n    else {\n      switch (segment.type) {\n      case 'string':\n        result = get_string(segment);\n        break;\n      case 'integer':\n        result = get_integer(segment);\n        break;\n      case 'float':\n        result = get_float(segment);\n        break;\n      case 'binary':\n        result = get_binary(segment);\n        break;\n      }\n\n      if (result === false) {\n        return false;\n      }\n      else if (segment.name) {\n        vars[segment.name] = result;\n      }\n      else if (segment.value != result) {\n        return false;\n      }\n    }\n  }\n  if (offset == binsize) {\n    return bindings(vars);\n  }\n  else {\n    return false;\n  }\n}\n\nmodule.exports.match = match;\nmodule.exports.parse_int = parse_int;\nmodule.exports.parse_float = parse_float;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@acuminous/bitsyntax/lib/interp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@acuminous/bitsyntax/lib/parse.js":
/*!********************************************************!*\
  !*** ./node_modules/@acuminous/bitsyntax/lib/parse.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Parse patterns in string form into the form we use for interpreting\n// (and later, for compiling).\n\n\n\nvar ast = __webpack_require__(/*! ./pattern */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/pattern.js\");\nvar parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/@acuminous/bitsyntax/lib/parser.js\");\n\nfunction parse_pattern(string) {\n  var segments = parser.parse(string);\n  for (var i=0, len = segments.length; i < len; i++) {\n    var s = segments[i];\n    if (s.string != undefined) {\n      segments[i] = ast.string(s.string);\n    }\n    else if (s.value != undefined) {\n      segments[i] = ast.value(s.value, s.size, s.specifiers);\n    }\n    else if (s.name != undefined) {\n      segments[i] = ast.variable(s.name, s.size, s.specifiers);\n    }\n    else {\n      throw \"Unknown segment \" + s;\n    }\n  }\n  return segments;\n}\n\nmodule.exports.parse = function() {\n  var str = [].join.call(arguments, ',');\n  return parse_pattern(str);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFjdW1pbm91cy9iaXRzeW50YXgvbGliL3BhcnNlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRWE7O0FBRWIsVUFBVSxtQkFBTyxDQUFDLDJFQUFXO0FBQzdCLGFBQWEsbUJBQU8sQ0FBQyx5RUFBVTs7QUFFL0I7QUFDQTtBQUNBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIyLy4vbm9kZV9tb2R1bGVzL0BhY3VtaW5vdXMvYml0c3ludGF4L2xpYi9wYXJzZS5qcz83MDI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFBhcnNlIHBhdHRlcm5zIGluIHN0cmluZyBmb3JtIGludG8gdGhlIGZvcm0gd2UgdXNlIGZvciBpbnRlcnByZXRpbmdcbi8vIChhbmQgbGF0ZXIsIGZvciBjb21waWxpbmcpLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBhc3QgPSByZXF1aXJlKCcuL3BhdHRlcm4nKTtcbnZhciBwYXJzZXIgPSByZXF1aXJlKCcuL3BhcnNlcicpO1xuXG5mdW5jdGlvbiBwYXJzZV9wYXR0ZXJuKHN0cmluZykge1xuICB2YXIgc2VnbWVudHMgPSBwYXJzZXIucGFyc2Uoc3RyaW5nKTtcbiAgZm9yICh2YXIgaT0wLCBsZW4gPSBzZWdtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBzID0gc2VnbWVudHNbaV07XG4gICAgaWYgKHMuc3RyaW5nICE9IHVuZGVmaW5lZCkge1xuICAgICAgc2VnbWVudHNbaV0gPSBhc3Quc3RyaW5nKHMuc3RyaW5nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAocy52YWx1ZSAhPSB1bmRlZmluZWQpIHtcbiAgICAgIHNlZ21lbnRzW2ldID0gYXN0LnZhbHVlKHMudmFsdWUsIHMuc2l6ZSwgcy5zcGVjaWZpZXJzKTtcbiAgICB9XG4gICAgZWxzZSBpZiAocy5uYW1lICE9IHVuZGVmaW5lZCkge1xuICAgICAgc2VnbWVudHNbaV0gPSBhc3QudmFyaWFibGUocy5uYW1lLCBzLnNpemUsIHMuc3BlY2lmaWVycyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgXCJVbmtub3duIHNlZ21lbnQgXCIgKyBzO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VnbWVudHM7XG59XG5cbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzdHIgPSBbXS5qb2luLmNhbGwoYXJndW1lbnRzLCAnLCcpO1xuICByZXR1cm4gcGFyc2VfcGF0dGVybihzdHIpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@acuminous/bitsyntax/lib/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@acuminous/bitsyntax/lib/parser.js":
/*!*********************************************************!*\
  !*** ./node_modules/@acuminous/bitsyntax/lib/parser.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = (function(){\n  /*\n   * Generated by PEG.js 0.7.0.\n   *\n   * http://pegjs.majda.cz/\n   */\n  \n  function quote(s) {\n    /*\n     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a\n     * string literal except for the closing quote character, backslash,\n     * carriage return, line separator, paragraph separator, and line feed.\n     * Any character may appear in the form of an escape sequence.\n     *\n     * For portability, we also escape escape all control and non-ASCII\n     * characters. Note that \"\\0\" and \"\\v\" escape sequences are not used\n     * because JSHint does not like the first and IE the second.\n     */\n     return '\"' + s\n      .replace(/\\\\/g, '\\\\\\\\')  // backslash\n      .replace(/\"/g, '\\\\\"')    // closing quote character\n      .replace(/\\x08/g, '\\\\b') // backspace\n      .replace(/\\t/g, '\\\\t')   // horizontal tab\n      .replace(/\\n/g, '\\\\n')   // line feed\n      .replace(/\\f/g, '\\\\f')   // form feed\n      .replace(/\\r/g, '\\\\r')   // carriage return\n      .replace(/[\\x00-\\x07\\x0B\\x0E-\\x1F\\x80-\\uFFFF]/g, escape)\n      + '\"';\n  }\n  \n  var result = {\n    /*\n     * Parses the input with a generated parser. If the parsing is successfull,\n     * returns a value explicitly or implicitly specified by the grammar from\n     * which the parser was generated (see |PEG.buildParser|). If the parsing is\n     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.\n     */\n    parse: function(input, startRule) {\n      var parseFunctions = {\n        \"start\": parse_start,\n        \"segmentTail\": parse_segmentTail,\n        \"segment\": parse_segment,\n        \"string\": parse_string,\n        \"chars\": parse_chars,\n        \"char\": parse_char,\n        \"hexDigit\": parse_hexDigit,\n        \"identifier\": parse_identifier,\n        \"number\": parse_number,\n        \"size\": parse_size,\n        \"specifierList\": parse_specifierList,\n        \"specifierTail\": parse_specifierTail,\n        \"specifier\": parse_specifier,\n        \"unit\": parse_unit,\n        \"ws\": parse_ws\n      };\n      \n      if (startRule !== undefined) {\n        if (parseFunctions[startRule] === undefined) {\n          throw new Error(\"Invalid rule name: \" + quote(startRule) + \".\");\n        }\n      } else {\n        startRule = \"start\";\n      }\n      \n      var pos = 0;\n      var reportFailures = 0;\n      var rightmostFailuresPos = 0;\n      var rightmostFailuresExpected = [];\n      \n      function padLeft(input, padding, length) {\n        var result = input;\n        \n        var padLength = length - input.length;\n        for (var i = 0; i < padLength; i++) {\n          result = padding + result;\n        }\n        \n        return result;\n      }\n      \n      function escape(ch) {\n        var charCode = ch.charCodeAt(0);\n        var escapeChar;\n        var length;\n        \n        if (charCode <= 0xFF) {\n          escapeChar = 'x';\n          length = 2;\n        } else {\n          escapeChar = 'u';\n          length = 4;\n        }\n        \n        return '\\\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);\n      }\n      \n      function matchFailed(failure) {\n        if (pos < rightmostFailuresPos) {\n          return;\n        }\n        \n        if (pos > rightmostFailuresPos) {\n          rightmostFailuresPos = pos;\n          rightmostFailuresExpected = [];\n        }\n        \n        rightmostFailuresExpected.push(failure);\n      }\n      \n      function parse_start() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_ws();\n        if (result0 !== null) {\n          result1 = parse_segment();\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_segmentTail();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_segmentTail();\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, head, tail) { tail.unshift(head); return tail; })(pos0, result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_segmentTail() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        result0 = parse_ws();\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 44) {\n            result1 = \",\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\",\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result2 = parse_ws();\n            if (result2 !== null) {\n              result3 = parse_segment();\n              if (result3 !== null) {\n                result0 = [result0, result1, result2, result3];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, seg) { return seg; })(pos0, result0[3]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_segment() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        result0 = parse_string();\n        if (result0 !== null) {\n          result0 = (function(offset, str) { return {string: str}; })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          result0 = parse_identifier();\n          if (result0 !== null) {\n            result1 = parse_size();\n            result1 = result1 !== null ? result1 : \"\";\n            if (result1 !== null) {\n              result2 = parse_specifierList();\n              result2 = result2 !== null ? result2 : \"\";\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, v, size, specs) { return {name: v, size: size, specifiers: specs}; })(pos0, result0[0], result0[1], result0[2]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            pos1 = pos;\n            result0 = parse_number();\n            if (result0 !== null) {\n              result1 = parse_size();\n              result1 = result1 !== null ? result1 : \"\";\n              if (result1 !== null) {\n                result2 = parse_specifierList();\n                result2 = result2 !== null ? result2 : \"\";\n                if (result2 !== null) {\n                  result0 = [result0, result1, result2];\n                } else {\n                  result0 = null;\n                  pos = pos1;\n                }\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n            if (result0 !== null) {\n              result0 = (function(offset, v, size, specs) { return {value: v, size: size, specifiers: specs}; })(pos0, result0[0], result0[1], result0[2]);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_string() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 34) {\n          result0 = \"\\\"\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"\\\\\\\"\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          if (input.charCodeAt(pos) === 34) {\n            result1 = \"\\\"\";\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\"\\\"\");\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return \"\";    })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 34) {\n            result0 = \"\\\"\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\"\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse_chars();\n            if (result1 !== null) {\n              if (input.charCodeAt(pos) === 34) {\n                result2 = \"\\\"\";\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"\\\\\\\"\\\"\");\n                }\n              }\n              if (result2 !== null) {\n                result0 = [result0, result1, result2];\n              } else {\n                result0 = null;\n                pos = pos1;\n              }\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, chars) { return chars; })(pos0, result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      \n      function parse_chars() {\n        var result0, result1;\n        var pos0;\n        \n        pos0 = pos;\n        result1 = parse_char();\n        if (result1 !== null) {\n          result0 = [];\n          while (result1 !== null) {\n            result0.push(result1);\n            result1 = parse_char();\n          }\n        } else {\n          result0 = null;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, chars) { return chars.join(\"\"); })(pos0, result0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_char() {\n        var result0, result1, result2, result3, result4;\n        var pos0, pos1;\n        \n        if (/^[^\"\\\\\\0-\\x1F]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[^\\\"\\\\\\\\\\\\0-\\\\x1F]\");\n          }\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          if (input.substr(pos, 2) === \"\\\\\\\"\") {\n            result0 = \"\\\\\\\"\";\n            pos += 2;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"\\\\\\\\\\\\\\\"\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result0 = (function(offset) { return '\"';  })(pos0);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n          if (result0 === null) {\n            pos0 = pos;\n            if (input.substr(pos, 2) === \"\\\\\\\\\") {\n              result0 = \"\\\\\\\\\";\n              pos += 2;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"\\\\\\\\\\\\\\\\\\\"\");\n              }\n            }\n            if (result0 !== null) {\n              result0 = (function(offset) { return \"\\\\\"; })(pos0);\n            }\n            if (result0 === null) {\n              pos = pos0;\n            }\n            if (result0 === null) {\n              pos0 = pos;\n              if (input.substr(pos, 2) === \"\\\\/\") {\n                result0 = \"\\\\/\";\n                pos += 2;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"\\\\\\\\/\\\"\");\n                }\n              }\n              if (result0 !== null) {\n                result0 = (function(offset) { return \"/\";  })(pos0);\n              }\n              if (result0 === null) {\n                pos = pos0;\n              }\n              if (result0 === null) {\n                pos0 = pos;\n                if (input.substr(pos, 2) === \"\\\\b\") {\n                  result0 = \"\\\\b\";\n                  pos += 2;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"\\\\\\\\b\\\"\");\n                  }\n                }\n                if (result0 !== null) {\n                  result0 = (function(offset) { return \"\\b\"; })(pos0);\n                }\n                if (result0 === null) {\n                  pos = pos0;\n                }\n                if (result0 === null) {\n                  pos0 = pos;\n                  if (input.substr(pos, 2) === \"\\\\f\") {\n                    result0 = \"\\\\f\";\n                    pos += 2;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"\\\\\\\\f\\\"\");\n                    }\n                  }\n                  if (result0 !== null) {\n                    result0 = (function(offset) { return \"\\f\"; })(pos0);\n                  }\n                  if (result0 === null) {\n                    pos = pos0;\n                  }\n                  if (result0 === null) {\n                    pos0 = pos;\n                    if (input.substr(pos, 2) === \"\\\\n\") {\n                      result0 = \"\\\\n\";\n                      pos += 2;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"\\\\\\\\n\\\"\");\n                      }\n                    }\n                    if (result0 !== null) {\n                      result0 = (function(offset) { return \"\\n\"; })(pos0);\n                    }\n                    if (result0 === null) {\n                      pos = pos0;\n                    }\n                    if (result0 === null) {\n                      pos0 = pos;\n                      if (input.substr(pos, 2) === \"\\\\r\") {\n                        result0 = \"\\\\r\";\n                        pos += 2;\n                      } else {\n                        result0 = null;\n                        if (reportFailures === 0) {\n                          matchFailed(\"\\\"\\\\\\\\r\\\"\");\n                        }\n                      }\n                      if (result0 !== null) {\n                        result0 = (function(offset) { return \"\\r\"; })(pos0);\n                      }\n                      if (result0 === null) {\n                        pos = pos0;\n                      }\n                      if (result0 === null) {\n                        pos0 = pos;\n                        if (input.substr(pos, 2) === \"\\\\t\") {\n                          result0 = \"\\\\t\";\n                          pos += 2;\n                        } else {\n                          result0 = null;\n                          if (reportFailures === 0) {\n                            matchFailed(\"\\\"\\\\\\\\t\\\"\");\n                          }\n                        }\n                        if (result0 !== null) {\n                          result0 = (function(offset) { return \"\\t\"; })(pos0);\n                        }\n                        if (result0 === null) {\n                          pos = pos0;\n                        }\n                        if (result0 === null) {\n                          pos0 = pos;\n                          pos1 = pos;\n                          if (input.substr(pos, 2) === \"\\\\u\") {\n                            result0 = \"\\\\u\";\n                            pos += 2;\n                          } else {\n                            result0 = null;\n                            if (reportFailures === 0) {\n                              matchFailed(\"\\\"\\\\\\\\u\\\"\");\n                            }\n                          }\n                          if (result0 !== null) {\n                            result1 = parse_hexDigit();\n                            if (result1 !== null) {\n                              result2 = parse_hexDigit();\n                              if (result2 !== null) {\n                                result3 = parse_hexDigit();\n                                if (result3 !== null) {\n                                  result4 = parse_hexDigit();\n                                  if (result4 !== null) {\n                                    result0 = [result0, result1, result2, result3, result4];\n                                  } else {\n                                    result0 = null;\n                                    pos = pos1;\n                                  }\n                                } else {\n                                  result0 = null;\n                                  pos = pos1;\n                                }\n                              } else {\n                                result0 = null;\n                                pos = pos1;\n                              }\n                            } else {\n                              result0 = null;\n                              pos = pos1;\n                            }\n                          } else {\n                            result0 = null;\n                            pos = pos1;\n                          }\n                          if (result0 !== null) {\n                            result0 = (function(offset, h1, h2, h3, h4) {\n                                return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n                              })(pos0, result0[1], result0[2], result0[3], result0[4]);\n                          }\n                          if (result0 === null) {\n                            pos = pos0;\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_hexDigit() {\n        var result0;\n        \n        if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[0-9a-fA-F]\");\n          }\n        }\n        return result0;\n      }\n      \n      function parse_identifier() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (/^[_a-zA-Z]/.test(input.charAt(pos))) {\n          result0 = input.charAt(pos);\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[_a-zA-Z]\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = [];\n          if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {\n            result2 = input.charAt(pos);\n            pos++;\n          } else {\n            result2 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[_a-zA-Z0-9]\");\n            }\n          }\n          while (result2 !== null) {\n            result1.push(result2);\n            if (/^[_a-zA-Z0-9]/.test(input.charAt(pos))) {\n              result2 = input.charAt(pos);\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[_a-zA-Z0-9]\");\n              }\n            }\n          }\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, head, tail) { return head + tail.join(''); })(pos0, result0[0], result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_number() {\n        var result0, result1, result2;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        if (input.charCodeAt(pos) === 48) {\n          result0 = \"0\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"0\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result0 = (function(offset) { return 0; })(pos0);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (/^[1-9]/.test(input.charAt(pos))) {\n            result0 = input.charAt(pos);\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[1-9]\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = [];\n            if (/^[0-9]/.test(input.charAt(pos))) {\n              result2 = input.charAt(pos);\n              pos++;\n            } else {\n              result2 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"[0-9]\");\n              }\n            }\n            while (result2 !== null) {\n              result1.push(result2);\n              if (/^[0-9]/.test(input.charAt(pos))) {\n                result2 = input.charAt(pos);\n                pos++;\n              } else {\n                result2 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"[0-9]\");\n                }\n              }\n            }\n            if (result1 !== null) {\n              result0 = [result0, result1];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, head, tail) { return parseInt(head + tail.join('')); })(pos0, result0[0], result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      \n      function parse_size() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 58) {\n          result0 = \":\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\":\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_number();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, num) { return num; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        if (result0 === null) {\n          pos0 = pos;\n          pos1 = pos;\n          if (input.charCodeAt(pos) === 58) {\n            result0 = \":\";\n            pos++;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\":\\\"\");\n            }\n          }\n          if (result0 !== null) {\n            result1 = parse_identifier();\n            if (result1 !== null) {\n              result0 = [result0, result1];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n          if (result0 !== null) {\n            result0 = (function(offset, id) { return id; })(pos0, result0[1]);\n          }\n          if (result0 === null) {\n            pos = pos0;\n          }\n        }\n        return result0;\n      }\n      \n      function parse_specifierList() {\n        var result0, result1, result2, result3;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 47) {\n          result0 = \"/\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"/\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_specifier();\n          if (result1 !== null) {\n            result2 = [];\n            result3 = parse_specifierTail();\n            while (result3 !== null) {\n              result2.push(result3);\n              result3 = parse_specifierTail();\n            }\n            if (result2 !== null) {\n              result0 = [result0, result1, result2];\n            } else {\n              result0 = null;\n              pos = pos1;\n            }\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, head, tail) { tail.unshift(head); return tail; })(pos0, result0[1], result0[2]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_specifierTail() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.charCodeAt(pos) === 45) {\n          result0 = \"-\";\n          pos++;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"-\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_specifier();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, spec) { return spec; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_specifier() {\n        var result0;\n        \n        if (input.substr(pos, 6) === \"little\") {\n          result0 = \"little\";\n          pos += 6;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"little\\\"\");\n          }\n        }\n        if (result0 === null) {\n          if (input.substr(pos, 3) === \"big\") {\n            result0 = \"big\";\n            pos += 3;\n          } else {\n            result0 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"\\\"big\\\"\");\n            }\n          }\n          if (result0 === null) {\n            if (input.substr(pos, 6) === \"signed\") {\n              result0 = \"signed\";\n              pos += 6;\n            } else {\n              result0 = null;\n              if (reportFailures === 0) {\n                matchFailed(\"\\\"signed\\\"\");\n              }\n            }\n            if (result0 === null) {\n              if (input.substr(pos, 8) === \"unsigned\") {\n                result0 = \"unsigned\";\n                pos += 8;\n              } else {\n                result0 = null;\n                if (reportFailures === 0) {\n                  matchFailed(\"\\\"unsigned\\\"\");\n                }\n              }\n              if (result0 === null) {\n                if (input.substr(pos, 7) === \"integer\") {\n                  result0 = \"integer\";\n                  pos += 7;\n                } else {\n                  result0 = null;\n                  if (reportFailures === 0) {\n                    matchFailed(\"\\\"integer\\\"\");\n                  }\n                }\n                if (result0 === null) {\n                  if (input.substr(pos, 6) === \"binary\") {\n                    result0 = \"binary\";\n                    pos += 6;\n                  } else {\n                    result0 = null;\n                    if (reportFailures === 0) {\n                      matchFailed(\"\\\"binary\\\"\");\n                    }\n                  }\n                  if (result0 === null) {\n                    if (input.substr(pos, 5) === \"float\") {\n                      result0 = \"float\";\n                      pos += 5;\n                    } else {\n                      result0 = null;\n                      if (reportFailures === 0) {\n                        matchFailed(\"\\\"float\\\"\");\n                      }\n                    }\n                    if (result0 === null) {\n                      result0 = parse_unit();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return result0;\n      }\n      \n      function parse_unit() {\n        var result0, result1;\n        var pos0, pos1;\n        \n        pos0 = pos;\n        pos1 = pos;\n        if (input.substr(pos, 5) === \"unit:\") {\n          result0 = \"unit:\";\n          pos += 5;\n        } else {\n          result0 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"\\\"unit:\\\"\");\n          }\n        }\n        if (result0 !== null) {\n          result1 = parse_number();\n          if (result1 !== null) {\n            result0 = [result0, result1];\n          } else {\n            result0 = null;\n            pos = pos1;\n          }\n        } else {\n          result0 = null;\n          pos = pos1;\n        }\n        if (result0 !== null) {\n          result0 = (function(offset, num) { return 'unit:' + num; })(pos0, result0[1]);\n        }\n        if (result0 === null) {\n          pos = pos0;\n        }\n        return result0;\n      }\n      \n      function parse_ws() {\n        var result0, result1;\n        \n        result0 = [];\n        if (/^[ \\t\\n]/.test(input.charAt(pos))) {\n          result1 = input.charAt(pos);\n          pos++;\n        } else {\n          result1 = null;\n          if (reportFailures === 0) {\n            matchFailed(\"[ \\\\t\\\\n]\");\n          }\n        }\n        while (result1 !== null) {\n          result0.push(result1);\n          if (/^[ \\t\\n]/.test(input.charAt(pos))) {\n            result1 = input.charAt(pos);\n            pos++;\n          } else {\n            result1 = null;\n            if (reportFailures === 0) {\n              matchFailed(\"[ \\\\t\\\\n]\");\n            }\n          }\n        }\n        return result0;\n      }\n      \n      \n      function cleanupExpected(expected) {\n        expected.sort();\n        \n        var lastExpected = null;\n        var cleanExpected = [];\n        for (var i = 0; i < expected.length; i++) {\n          if (expected[i] !== lastExpected) {\n            cleanExpected.push(expected[i]);\n            lastExpected = expected[i];\n          }\n        }\n        return cleanExpected;\n      }\n      \n      function computeErrorPosition() {\n        /*\n         * The first idea was to use |String.split| to break the input up to the\n         * error position along newlines and derive the line and column from\n         * there. However IE's |split| implementation is so broken that it was\n         * enough to prevent it.\n         */\n        \n        var line = 1;\n        var column = 1;\n        var seenCR = false;\n        \n        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {\n          var ch = input.charAt(i);\n          if (ch === \"\\n\") {\n            if (!seenCR) { line++; }\n            column = 1;\n            seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            line++;\n            column = 1;\n            seenCR = true;\n          } else {\n            column++;\n            seenCR = false;\n          }\n        }\n        \n        return { line: line, column: column };\n      }\n      \n      \n      var result = parseFunctions[startRule]();\n      \n      /*\n       * The parser is now in one of the following three states:\n       *\n       * 1. The parser successfully parsed the whole input.\n       *\n       *    - |result !== null|\n       *    - |pos === input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 2. The parser successfully parsed only a part of the input.\n       *\n       *    - |result !== null|\n       *    - |pos < input.length|\n       *    - |rightmostFailuresExpected| may or may not contain something\n       *\n       * 3. The parser did not successfully parse any part of the input.\n       *\n       *   - |result === null|\n       *   - |pos === 0|\n       *   - |rightmostFailuresExpected| contains at least one failure\n       *\n       * All code following this comment (including called functions) must\n       * handle these states.\n       */\n      if (result === null || pos !== input.length) {\n        var offset = Math.max(pos, rightmostFailuresPos);\n        var found = offset < input.length ? input.charAt(offset) : null;\n        var errorPosition = computeErrorPosition();\n        \n        throw new this.SyntaxError(\n          cleanupExpected(rightmostFailuresExpected),\n          found,\n          offset,\n          errorPosition.line,\n          errorPosition.column\n        );\n      }\n      \n      return result;\n    },\n    \n    /* Returns the parser source code. */\n    toSource: function() { return this._source; }\n  };\n  \n  /* Thrown when a parser encounters a syntax error. */\n  \n  result.SyntaxError = function(expected, found, offset, line, column) {\n    function buildMessage(expected, found) {\n      var expectedHumanized, foundHumanized;\n      \n      switch (expected.length) {\n        case 0:\n          expectedHumanized = \"end of input\";\n          break;\n        case 1:\n          expectedHumanized = expected[0];\n          break;\n        default:\n          expectedHumanized = expected.slice(0, expected.length - 1).join(\", \")\n            + \" or \"\n            + expected[expected.length - 1];\n      }\n      \n      foundHumanized = found ? quote(found) : \"end of input\";\n      \n      return \"Expected \" + expectedHumanized + \" but \" + foundHumanized + \" found.\";\n    }\n    \n    this.name = \"SyntaxError\";\n    this.expected = expected;\n    this.found = found;\n    this.message = buildMessage(expected, found);\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n  };\n  \n  result.SyntaxError.prototype = Error.prototype;\n  \n  return result;\n})();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@acuminous/bitsyntax/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@acuminous/bitsyntax/lib/pattern.js":
/*!**********************************************************!*\
  !*** ./node_modules/@acuminous/bitsyntax/lib/pattern.js ***!
  \**********************************************************/
/***/ ((module) => {

"use strict";
eval("// -*- js-indent-level: 2 -*-\n// Constructing patterns\n\n\n\nfunction set(values) {\n  var s = {};\n  for (var i in values) {\n    if (!Object.prototype.hasOwnProperty.call(values, i)) continue;\n    s[values[i]] = 1;\n  }\n  return s;\n}\n\n// Construct a segment bound to a variable, e.g., from a segment like\n// \"Len:32/unsigned-big\". `specifiers0` is an array.\nfunction variable(name, size, specifiers0) {\n  var specifiers = set(specifiers0);\n  var segment = {name: name};\n  segment.type = type_in(specifiers);\n  specs(segment, segment.type, specifiers);\n  segment.size = size_of(segment, segment.type, size, segment.unit);\n  return segment;\n}\n\nmodule.exports.variable = variable;\nmodule.exports.rest = function() {\n  return variable('_', true, ['binary']);\n}\n\n// Construct a segment with a literal value, e.g., from a segment like\n// \"206\". `specifiers0` is an array.\n\nfunction value(val, size, specifiers0) {\n  var specifiers = set(specifiers0);\n  var segment = {value: val};\n  segment.type = type_in(specifiers);\n  // TODO check type v. value ..\n  specs(segment, segment.type, specifiers);\n  segment.size = size_of(segment, segment.type, size, segment.unit);\n  return segment;\n}\n\nmodule.exports.value = value;\n\n// A string can appear as a literal, but it must appear without\n// specifiers.\nfunction string(val) {\n  return {value: val, type: 'string'};\n}\nmodule.exports.string = string;\n\nvar TYPES = {'integer': 1, 'binary': 1, 'float': 1};\nfunction type_in(specifiers) {\n  for (var t in specifiers) {\n    if (!Object.prototype.hasOwnProperty.call(specifiers, t)) continue;\n    if (TYPES[t]) { return t; }\n  }\n  return 'integer';\n}\n\nfunction specs(segment, type, specifiers) {\n  switch (type) {\n  case 'integer':\n    segment.signed = signed_in(specifiers);\n    // fall through\n  case 'float':\n    segment.bigendian = endian_in(specifiers);\n    // fall through\n  default:\n    segment.unit = unit_in(specifiers, segment.type);\n  }\n  return segment;\n}\n\nfunction endian_in(specifiers) {\n  // default is big, but I have chosen true = bigendian\n  return !specifiers['little'];\n}\n\nfunction signed_in(specifiers) {\n  // this time I got it right; default is unsigned\n  return specifiers['signed'];\n}\n\nfunction unit_in(specifiers, type) {\n  for (var s in specifiers) {\n    if (!Object.prototype.hasOwnProperty.call(specifiers, s)) continue;\n    if (s.substr(0, 5) == 'unit:') {\n      var unit = parseInt(s.substr(5));\n      // TODO check sane for type\n      return unit;\n    }\n  }\n  // OK defaults then\n  switch (type) {\n  case 'binary':\n    return 8;\n  case 'integer':\n  case 'float':\n    return 1;\n  }\n}\n\nfunction size_of(segment, type, size, unit) {\n  if (size !== undefined && size !== '') {\n    return size;\n  }\n  else {\n    switch (type) {\n    case 'integer':\n      return 8;\n    case 'float':\n      return 64;\n    case 'binary':\n      return true;\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFjdW1pbm91cy9iaXRzeW50YXgvbGliL3BhdHRlcm4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCLG1CQUFtQjtBQUNuQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9COztBQUVwQjtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxxQkFBcUI7O0FBRXJCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYjIvLi9ub2RlX21vZHVsZXMvQGFjdW1pbm91cy9iaXRzeW50YXgvbGliL3BhdHRlcm4uanM/NGVjOCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAtKi0ganMtaW5kZW50LWxldmVsOiAyIC0qLVxuLy8gQ29uc3RydWN0aW5nIHBhdHRlcm5zXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gc2V0KHZhbHVlcykge1xuICB2YXIgcyA9IHt9O1xuICBmb3IgKHZhciBpIGluIHZhbHVlcykge1xuICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlcywgaSkpIGNvbnRpbnVlO1xuICAgIHNbdmFsdWVzW2ldXSA9IDE7XG4gIH1cbiAgcmV0dXJuIHM7XG59XG5cbi8vIENvbnN0cnVjdCBhIHNlZ21lbnQgYm91bmQgdG8gYSB2YXJpYWJsZSwgZS5nLiwgZnJvbSBhIHNlZ21lbnQgbGlrZVxuLy8gXCJMZW46MzIvdW5zaWduZWQtYmlnXCIuIGBzcGVjaWZpZXJzMGAgaXMgYW4gYXJyYXkuXG5mdW5jdGlvbiB2YXJpYWJsZShuYW1lLCBzaXplLCBzcGVjaWZpZXJzMCkge1xuICB2YXIgc3BlY2lmaWVycyA9IHNldChzcGVjaWZpZXJzMCk7XG4gIHZhciBzZWdtZW50ID0ge25hbWU6IG5hbWV9O1xuICBzZWdtZW50LnR5cGUgPSB0eXBlX2luKHNwZWNpZmllcnMpO1xuICBzcGVjcyhzZWdtZW50LCBzZWdtZW50LnR5cGUsIHNwZWNpZmllcnMpO1xuICBzZWdtZW50LnNpemUgPSBzaXplX29mKHNlZ21lbnQsIHNlZ21lbnQudHlwZSwgc2l6ZSwgc2VnbWVudC51bml0KTtcbiAgcmV0dXJuIHNlZ21lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzLnZhcmlhYmxlID0gdmFyaWFibGU7XG5tb2R1bGUuZXhwb3J0cy5yZXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB2YXJpYWJsZSgnXycsIHRydWUsIFsnYmluYXJ5J10pO1xufVxuXG4vLyBDb25zdHJ1Y3QgYSBzZWdtZW50IHdpdGggYSBsaXRlcmFsIHZhbHVlLCBlLmcuLCBmcm9tIGEgc2VnbWVudCBsaWtlXG4vLyBcIjIwNlwiLiBgc3BlY2lmaWVyczBgIGlzIGFuIGFycmF5LlxuXG5mdW5jdGlvbiB2YWx1ZSh2YWwsIHNpemUsIHNwZWNpZmllcnMwKSB7XG4gIHZhciBzcGVjaWZpZXJzID0gc2V0KHNwZWNpZmllcnMwKTtcbiAgdmFyIHNlZ21lbnQgPSB7dmFsdWU6IHZhbH07XG4gIHNlZ21lbnQudHlwZSA9IHR5cGVfaW4oc3BlY2lmaWVycyk7XG4gIC8vIFRPRE8gY2hlY2sgdHlwZSB2LiB2YWx1ZSAuLlxuICBzcGVjcyhzZWdtZW50LCBzZWdtZW50LnR5cGUsIHNwZWNpZmllcnMpO1xuICBzZWdtZW50LnNpemUgPSBzaXplX29mKHNlZ21lbnQsIHNlZ21lbnQudHlwZSwgc2l6ZSwgc2VnbWVudC51bml0KTtcbiAgcmV0dXJuIHNlZ21lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzLnZhbHVlID0gdmFsdWU7XG5cbi8vIEEgc3RyaW5nIGNhbiBhcHBlYXIgYXMgYSBsaXRlcmFsLCBidXQgaXQgbXVzdCBhcHBlYXIgd2l0aG91dFxuLy8gc3BlY2lmaWVycy5cbmZ1bmN0aW9uIHN0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsLCB0eXBlOiAnc3RyaW5nJ307XG59XG5tb2R1bGUuZXhwb3J0cy5zdHJpbmcgPSBzdHJpbmc7XG5cbnZhciBUWVBFUyA9IHsnaW50ZWdlcic6IDEsICdiaW5hcnknOiAxLCAnZmxvYXQnOiAxfTtcbmZ1bmN0aW9uIHR5cGVfaW4oc3BlY2lmaWVycykge1xuICBmb3IgKHZhciB0IGluIHNwZWNpZmllcnMpIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzcGVjaWZpZXJzLCB0KSkgY29udGludWU7XG4gICAgaWYgKFRZUEVTW3RdKSB7IHJldHVybiB0OyB9XG4gIH1cbiAgcmV0dXJuICdpbnRlZ2VyJztcbn1cblxuZnVuY3Rpb24gc3BlY3Moc2VnbWVudCwgdHlwZSwgc3BlY2lmaWVycykge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgY2FzZSAnaW50ZWdlcic6XG4gICAgc2VnbWVudC5zaWduZWQgPSBzaWduZWRfaW4oc3BlY2lmaWVycyk7XG4gICAgLy8gZmFsbCB0aHJvdWdoXG4gIGNhc2UgJ2Zsb2F0JzpcbiAgICBzZWdtZW50LmJpZ2VuZGlhbiA9IGVuZGlhbl9pbihzcGVjaWZpZXJzKTtcbiAgICAvLyBmYWxsIHRocm91Z2hcbiAgZGVmYXVsdDpcbiAgICBzZWdtZW50LnVuaXQgPSB1bml0X2luKHNwZWNpZmllcnMsIHNlZ21lbnQudHlwZSk7XG4gIH1cbiAgcmV0dXJuIHNlZ21lbnQ7XG59XG5cbmZ1bmN0aW9uIGVuZGlhbl9pbihzcGVjaWZpZXJzKSB7XG4gIC8vIGRlZmF1bHQgaXMgYmlnLCBidXQgSSBoYXZlIGNob3NlbiB0cnVlID0gYmlnZW5kaWFuXG4gIHJldHVybiAhc3BlY2lmaWVyc1snbGl0dGxlJ107XG59XG5cbmZ1bmN0aW9uIHNpZ25lZF9pbihzcGVjaWZpZXJzKSB7XG4gIC8vIHRoaXMgdGltZSBJIGdvdCBpdCByaWdodDsgZGVmYXVsdCBpcyB1bnNpZ25lZFxuICByZXR1cm4gc3BlY2lmaWVyc1snc2lnbmVkJ107XG59XG5cbmZ1bmN0aW9uIHVuaXRfaW4oc3BlY2lmaWVycywgdHlwZSkge1xuICBmb3IgKHZhciBzIGluIHNwZWNpZmllcnMpIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzcGVjaWZpZXJzLCBzKSkgY29udGludWU7XG4gICAgaWYgKHMuc3Vic3RyKDAsIDUpID09ICd1bml0OicpIHtcbiAgICAgIHZhciB1bml0ID0gcGFyc2VJbnQocy5zdWJzdHIoNSkpO1xuICAgICAgLy8gVE9ETyBjaGVjayBzYW5lIGZvciB0eXBlXG4gICAgICByZXR1cm4gdW5pdDtcbiAgICB9XG4gIH1cbiAgLy8gT0sgZGVmYXVsdHMgdGhlblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgY2FzZSAnYmluYXJ5JzpcbiAgICByZXR1cm4gODtcbiAgY2FzZSAnaW50ZWdlcic6XG4gIGNhc2UgJ2Zsb2F0JzpcbiAgICByZXR1cm4gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzaXplX29mKHNlZ21lbnQsIHR5cGUsIHNpemUsIHVuaXQpIHtcbiAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCAmJiBzaXplICE9PSAnJykge1xuICAgIHJldHVybiBzaXplO1xuICB9XG4gIGVsc2Uge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgcmV0dXJuIDg7XG4gICAgY2FzZSAnZmxvYXQnOlxuICAgICAgcmV0dXJuIDY0O1xuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@acuminous/bitsyntax/lib/pattern.js\n");

/***/ })

};
;