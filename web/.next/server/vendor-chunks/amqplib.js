/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/amqplib";
exports.ids = ["vendor-chunks/amqplib"];
exports.modules = {

/***/ "(rsc)/./node_modules/amqplib/callback_api.js":
/*!**********************************************!*\
  !*** ./node_modules/amqplib/callback_api.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var raw_connect = (__webpack_require__(/*! ./lib/connect */ \"(rsc)/./node_modules/amqplib/lib/connect.js\").connect);\nvar CallbackModel = (__webpack_require__(/*! ./lib/callback_model */ \"(rsc)/./node_modules/amqplib/lib/callback_model.js\").CallbackModel);\n\n// Supports three shapes:\n// connect(url, options, callback)\n// connect(url, callback)\n// connect(callback)\nfunction connect(url, options, cb) {\n  if (typeof url === 'function')\n    cb = url, url = false, options = false;\n  else if (typeof options === 'function')\n    cb = options, options = false;\n\n  raw_connect(url, options, function(err, c) {\n    if (err === null) cb(null, new CallbackModel(c));\n    else cb(err);\n  });\n};\n\nmodule.exports.connect = connect;\nmodule.exports.credentials = __webpack_require__(/*! ./lib/credentials */ \"(rsc)/./node_modules/amqplib/lib/credentials.js\");\nmodule.exports.IllegalOperationError = __webpack_require__(/*! ./lib/error */ \"(rsc)/./node_modules/amqplib/lib/error.js\").IllegalOperationError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9jYWxsYmFja19hcGkuanMiLCJtYXBwaW5ncyI6IkFBQUEsa0JBQWtCLGlHQUFnQztBQUNsRCxvQkFBb0IscUhBQTZDOztBQUVqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLHNCQUFzQjtBQUN0Qiw0SEFBeUQ7QUFDekQsZ0pBQW1GIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViMi8uL25vZGVfbW9kdWxlcy9hbXFwbGliL2NhbGxiYWNrX2FwaS5qcz9kMDhkIl0sInNvdXJjZXNDb250ZW50IjpbInZhciByYXdfY29ubmVjdCA9IHJlcXVpcmUoJy4vbGliL2Nvbm5lY3QnKS5jb25uZWN0O1xudmFyIENhbGxiYWNrTW9kZWwgPSByZXF1aXJlKCcuL2xpYi9jYWxsYmFja19tb2RlbCcpLkNhbGxiYWNrTW9kZWw7XG5cbi8vIFN1cHBvcnRzIHRocmVlIHNoYXBlczpcbi8vIGNvbm5lY3QodXJsLCBvcHRpb25zLCBjYWxsYmFjaylcbi8vIGNvbm5lY3QodXJsLCBjYWxsYmFjaylcbi8vIGNvbm5lY3QoY2FsbGJhY2spXG5mdW5jdGlvbiBjb25uZWN0KHVybCwgb3B0aW9ucywgY2IpIHtcbiAgaWYgKHR5cGVvZiB1cmwgPT09ICdmdW5jdGlvbicpXG4gICAgY2IgPSB1cmwsIHVybCA9IGZhbHNlLCBvcHRpb25zID0gZmFsc2U7XG4gIGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKVxuICAgIGNiID0gb3B0aW9ucywgb3B0aW9ucyA9IGZhbHNlO1xuXG4gIHJhd19jb25uZWN0KHVybCwgb3B0aW9ucywgZnVuY3Rpb24oZXJyLCBjKSB7XG4gICAgaWYgKGVyciA9PT0gbnVsbCkgY2IobnVsbCwgbmV3IENhbGxiYWNrTW9kZWwoYykpO1xuICAgIGVsc2UgY2IoZXJyKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5jb25uZWN0ID0gY29ubmVjdDtcbm1vZHVsZS5leHBvcnRzLmNyZWRlbnRpYWxzID0gcmVxdWlyZSgnLi9saWIvY3JlZGVudGlhbHMnKTtcbm1vZHVsZS5leHBvcnRzLklsbGVnYWxPcGVyYXRpb25FcnJvciA9IHJlcXVpcmUoJy4vbGliL2Vycm9yJykuSWxsZWdhbE9wZXJhdGlvbkVycm9yO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/callback_api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/channel_api.js":
/*!*********************************************!*\
  !*** ./node_modules/amqplib/channel_api.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var raw_connect = (__webpack_require__(/*! ./lib/connect */ \"(rsc)/./node_modules/amqplib/lib/connect.js\").connect);\nvar ChannelModel = (__webpack_require__(/*! ./lib/channel_model */ \"(rsc)/./node_modules/amqplib/lib/channel_model.js\").ChannelModel);\nvar promisify = (__webpack_require__(/*! util */ \"util\").promisify);\n\nfunction connect(url, connOptions) {\n  return promisify(function(cb) {\n    return raw_connect(url, connOptions, cb);\n  })()\n  .then(function(conn) {\n    return new ChannelModel(conn);\n  });\n};\n\nmodule.exports.connect = connect;\nmodule.exports.credentials = __webpack_require__(/*! ./lib/credentials */ \"(rsc)/./node_modules/amqplib/lib/credentials.js\");\nmodule.exports.IllegalOperationError = __webpack_require__(/*! ./lib/error */ \"(rsc)/./node_modules/amqplib/lib/error.js\").IllegalOperationError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9jaGFubmVsX2FwaS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0IsaUdBQWdDO0FBQ2xELG1CQUFtQixrSEFBMkM7QUFDOUQsZ0JBQWdCLG1EQUF5Qjs7QUFFekM7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsc0JBQXNCO0FBQ3RCLDRIQUF5RDtBQUN6RCxnSkFBbUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIyLy4vbm9kZV9tb2R1bGVzL2FtcXBsaWIvY2hhbm5lbF9hcGkuanM/OTMzOCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmF3X2Nvbm5lY3QgPSByZXF1aXJlKCcuL2xpYi9jb25uZWN0JykuY29ubmVjdDtcbnZhciBDaGFubmVsTW9kZWwgPSByZXF1aXJlKCcuL2xpYi9jaGFubmVsX21vZGVsJykuQ2hhbm5lbE1vZGVsO1xudmFyIHByb21pc2lmeSA9IHJlcXVpcmUoJ3V0aWwnKS5wcm9taXNpZnk7XG5cbmZ1bmN0aW9uIGNvbm5lY3QodXJsLCBjb25uT3B0aW9ucykge1xuICByZXR1cm4gcHJvbWlzaWZ5KGZ1bmN0aW9uKGNiKSB7XG4gICAgcmV0dXJuIHJhd19jb25uZWN0KHVybCwgY29ubk9wdGlvbnMsIGNiKTtcbiAgfSkoKVxuICAudGhlbihmdW5jdGlvbihjb25uKSB7XG4gICAgcmV0dXJuIG5ldyBDaGFubmVsTW9kZWwoY29ubik7XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMuY29ubmVjdCA9IGNvbm5lY3Q7XG5tb2R1bGUuZXhwb3J0cy5jcmVkZW50aWFscyA9IHJlcXVpcmUoJy4vbGliL2NyZWRlbnRpYWxzJyk7XG5tb2R1bGUuZXhwb3J0cy5JbGxlZ2FsT3BlcmF0aW9uRXJyb3IgPSByZXF1aXJlKCcuL2xpYi9lcnJvcicpLklsbGVnYWxPcGVyYXRpb25FcnJvcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/channel_api.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/api_args.js":
/*!**********************************************!*\
  !*** ./node_modules/amqplib/lib/api_args.js ***!
  \**********************************************/
/***/ ((module) => {

"use strict";
eval("//\n//\n//\n\n\n\n/*\nThe channel (promise) and callback APIs have similar signatures, and\nin particular, both need AMQP fields prepared from the same arguments\nand options. The arguments marshalling is done here. Each of the\nprocedures below takes arguments and options (the latter in an object)\nparticular to the operation it represents, and returns an object with\nfields for handing to the encoder.\n*/\n\n// A number of AMQP methods have a table-typed field called\n// `arguments`, that is intended to carry extension-specific\n// values. RabbitMQ uses this in a number of places; e.g., to specify\n// an 'alternate exchange'.\n//\n// Many of the methods in this API have an `options` argument, from\n// which I take both values that have a default in AMQP (e.g.,\n// autoDelete in QueueDeclare) *and* values that are specific to\n// RabbitMQ (e.g., 'alternate-exchange'), which would normally be\n// supplied in `arguments`. So that extensions I don't support yet can\n// be used, I include `arguments` itself among the options.\n//\n// The upshot of this is that I often need to prepare an `arguments`\n// value that has any values passed in `options.arguments` as well as\n// any I've promoted to being options themselves. Since I don't want\n// to mutate anything passed in, the general pattern is to create a\n// fresh object with the `arguments` value given as its prototype; all\n// fields in the supplied value will be serialised, as well as any I\n// set on the fresh object. What I don't want to do, however, is set a\n// field to undefined by copying possibly missing field values,\n// because that will mask a value in the prototype.\n//\n// NB the `arguments` field already has a default value of `{}`, so\n// there's no need to explicitly default it unless I'm setting values.\nfunction setIfDefined(obj, prop, value) {\n  if (value != undefined) obj[prop] = value;\n}\n\nvar EMPTY_OPTIONS = Object.freeze({});\n\nvar Args = {};\n\nArgs.assertQueue = function(queue, options) {\n  queue = queue || '';\n  options = options || EMPTY_OPTIONS;\n\n  var argt = Object.create(options.arguments || null);\n  setIfDefined(argt, 'x-expires', options.expires);\n  setIfDefined(argt, 'x-message-ttl', options.messageTtl);\n  setIfDefined(argt, 'x-dead-letter-exchange',\n               options.deadLetterExchange);\n  setIfDefined(argt, 'x-dead-letter-routing-key',\n               options.deadLetterRoutingKey);\n  setIfDefined(argt, 'x-max-length', options.maxLength);\n  setIfDefined(argt, 'x-max-priority', options.maxPriority);\n  setIfDefined(argt, 'x-overflow', options.overflow);\n  setIfDefined(argt, 'x-queue-mode', options.queueMode);\n\n  return {\n    queue: queue,\n    exclusive: !!options.exclusive,\n    durable: (options.durable === undefined) ? true : options.durable,\n    autoDelete: !!options.autoDelete,\n    arguments: argt,\n    passive: false,\n    // deprecated but we have to include it\n    ticket: 0,\n    nowait: false\n  };\n};\n\nArgs.checkQueue = function(queue) {\n  return {\n    queue: queue,\n    passive: true, // switch to \"completely different\" mode\n    nowait: false,\n    durable: true, autoDelete: false, exclusive: false, // ignored\n    ticket: 0,\n  };\n};\n\nArgs.deleteQueue = function(queue, options) {\n  options = options || EMPTY_OPTIONS;\n  return {\n    queue: queue,\n    ifUnused: !!options.ifUnused,\n    ifEmpty: !!options.ifEmpty,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.purgeQueue = function(queue) {\n  return {\n    queue: queue,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.bindQueue = function(queue, source, pattern, argt) {\n  return {\n    queue: queue,\n    exchange: source,\n    routingKey: pattern,\n    arguments: argt,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.unbindQueue = function(queue, source, pattern, argt) {\n  return {\n    queue: queue,\n    exchange: source,\n    routingKey: pattern,\n    arguments: argt,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.assertExchange = function(exchange, type, options) {\n  options = options || EMPTY_OPTIONS;\n  var argt = Object.create(options.arguments || null);\n  setIfDefined(argt, 'alternate-exchange', options.alternateExchange);\n  return {\n    exchange: exchange,\n    ticket: 0,\n    type: type,\n    passive: false,\n    durable: (options.durable === undefined) ? true : options.durable,\n    autoDelete: !!options.autoDelete,\n    internal: !!options.internal,\n    nowait: false,\n    arguments: argt\n  };\n};\n\nArgs.checkExchange = function(exchange) {\n  return {\n    exchange: exchange,\n    passive: true, // switch to 'may as well be another method' mode\n    nowait: false,\n    // ff are ignored\n    durable: true, internal: false,  type: '',  autoDelete: false,\n    ticket: 0\n  };\n};\n\nArgs.deleteExchange = function(exchange, options) {\n  options = options || EMPTY_OPTIONS;\n  return {\n    exchange: exchange,\n    ifUnused: !!options.ifUnused,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.bindExchange = function(dest, source, pattern, argt) {\n  return {\n    source: source,\n    destination: dest,\n    routingKey: pattern,\n    arguments: argt,\n    ticket: 0, nowait: false\n  };\n};\n\nArgs.unbindExchange = function(dest, source, pattern, argt) {\n  return {\n    source: source,\n    destination: dest,\n    routingKey: pattern,\n    arguments: argt,\n    ticket: 0, nowait: false\n  };\n};\n\n// It's convenient to construct the properties and the method fields\n// at the same time, since in the APIs, values for both can appear in\n// `options`. Since the property or mthod field names don't overlap, I\n// just return one big object that can be used for both purposes, and\n// the encoder will pick out what it wants.\nArgs.publish = function(exchange, routingKey, options) {\n  options = options || EMPTY_OPTIONS;\n\n  // The CC and BCC fields expect an array of \"longstr\", which would\n  // normally be buffer values in JavaScript; however, since a field\n  // array (or table) cannot have shortstr values, the codec will\n  // encode all strings as longstrs anyway.\n  function convertCC(cc) {\n    if (cc === undefined) {\n      return undefined;\n    }\n    else if (Array.isArray(cc)) {\n      return cc.map(String);\n    }\n    else return [String(cc)];\n  }\n\n  var headers = Object.create(options.headers || null);\n  setIfDefined(headers, 'CC', convertCC(options.CC));\n  setIfDefined(headers, 'BCC', convertCC(options.BCC));\n\n  var deliveryMode; // undefined will default to 1 (non-persistent)\n\n  // Previously I overloaded deliveryMode be a boolean meaning\n  // 'persistent or not'; better is to name this option for what it\n  // is, but I need to have backwards compatibility for applications\n  // that either supply a numeric or boolean value.\n  if (options.persistent !== undefined)\n    deliveryMode = (options.persistent) ? 2 : 1;\n  else if (typeof options.deliveryMode === 'number')\n    deliveryMode = options.deliveryMode;\n  else if (options.deliveryMode) // is supplied and truthy\n    deliveryMode = 2;\n\n  var expiration = options.expiration;\n  if (expiration !== undefined) expiration = expiration.toString();\n\n  return {\n    // method fields\n    exchange: exchange,\n    routingKey: routingKey,\n    mandatory: !!options.mandatory,\n    immediate: false, // RabbitMQ doesn't implement this any more\n    ticket: undefined,\n    // properties\n    contentType: options.contentType,\n    contentEncoding: options.contentEncoding,\n    headers: headers,\n    deliveryMode: deliveryMode,\n    priority: options.priority,\n    correlationId: options.correlationId,\n    replyTo: options.replyTo,\n    expiration: expiration,\n    messageId: options.messageId,\n    timestamp: options.timestamp,\n    type: options.type,\n    userId: options.userId,\n    appId: options.appId,\n    clusterId: undefined\n  };\n};\n\nArgs.consume = function(queue, options) {\n  options = options || EMPTY_OPTIONS;\n  var argt = Object.create(options.arguments || null);\n  setIfDefined(argt, 'x-priority', options.priority);\n  return {\n    ticket: 0,\n    queue: queue,\n    consumerTag: options.consumerTag || '',\n    noLocal: !!options.noLocal,\n    noAck: !!options.noAck,\n    exclusive: !!options.exclusive,\n    nowait: false,\n    arguments: argt\n  };\n};\n\nArgs.cancel = function(consumerTag) {\n  return {\n    consumerTag: consumerTag,\n    nowait: false\n  };\n};\n\nArgs.get = function(queue, options) {\n  options = options || EMPTY_OPTIONS;\n  return {\n    ticket: 0,\n    queue: queue,\n    noAck: !!options.noAck\n  };\n};\n\nArgs.ack = function(tag, allUpTo) {\n  return {\n    deliveryTag: tag,\n    multiple: !!allUpTo\n  };\n};\n\nArgs.nack = function(tag, allUpTo, requeue) {\n  return {\n    deliveryTag: tag,\n    multiple: !!allUpTo,\n    requeue: (requeue === undefined) ? true : requeue\n  };\n};\n\nArgs.reject = function(tag, requeue) {\n  return {\n    deliveryTag: tag,\n    requeue: (requeue === undefined) ? true : requeue\n  };\n};\n\nArgs.prefetch = function(count, global) {\n  return {\n    prefetchCount: count || 0,\n    prefetchSize: 0,\n    global: !!global\n  };\n};\n\nArgs.recover = function() {\n  return {requeue: true};\n};\n\nmodule.exports = Object.freeze(Args);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/api_args.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/bitset.js":
/*!********************************************!*\
  !*** ./node_modules/amqplib/lib/bitset.js ***!
  \********************************************/
/***/ ((module) => {

"use strict";
eval("//\n//\n//\n\n\n\n/**\n * A bitset implementation, after that in java.util.  Yes there\n * already exist such things, but none implement next{Clear|Set}Bit or\n * equivalent, and none involved me tooling about for an evening.\n */\nclass BitSet {\n  /**\n   * @param {number} [size]\n   */\n  constructor(size) {\n    if (size) {\n      const numWords = Math.ceil(size / 32);\n      this.words = new Array(numWords);\n    }\n    else {\n      this.words = [];\n    }\n    this.wordsInUse = 0; // = number, not index\n  }\n\n  /**\n   * @param {number} numWords\n   */\n  ensureSize(numWords) {\n    const wordsPresent = this.words.length;\n    if (wordsPresent < numWords) {\n      this.words = this.words.concat(new Array(numWords - wordsPresent));\n    }\n  }\n\n  /**\n   * @param {number} bitIndex\n   */\n  set(bitIndex) {\n    const w = wordIndex(bitIndex);\n    if (w >= this.wordsInUse) {\n      this.ensureSize(w + 1);\n      this.wordsInUse = w + 1;\n    }\n    const bit = 1 << bitIndex;\n    this.words[w] |= bit;\n  }\n\n  /**\n   * @param {number} bitIndex\n   */\n  clear(bitIndex) {\n    const w = wordIndex(bitIndex);\n    if (w >= this.wordsInUse) return;\n    const mask = ~(1 << bitIndex);\n    this.words[w] &= mask;\n  }\n\n  /**\n   * @param {number} bitIndex\n   */\n  get(bitIndex) {\n    const w = wordIndex(bitIndex);\n    if (w >= this.wordsInUse) return false; // >= since index vs size\n    const bit = 1 << bitIndex;\n    return !!(this.words[w] & bit);\n  }\n\n  /**\n   * Give the next bit that is set on or after fromIndex, or -1 if no such bit\n   *\n   * @param {number} fromIndex\n   */\n  nextSetBit(fromIndex) {\n    let w = wordIndex(fromIndex);\n    if (w >= this.wordsInUse) return -1;\n\n    // the right-hand side is shifted to only test the bits of the first\n    // word that are > fromIndex\n    let word = this.words[w] & (0xffffffff << fromIndex);\n    while (true) {\n      if (word) return (w * 32) + trailingZeros(word);\n      w++;\n      if (w === this.wordsInUse) return -1;\n      word = this.words[w];\n    }\n  }\n\n  /**\n   * @param {number} fromIndex\n   */\n  nextClearBit(fromIndex) {\n    let w = wordIndex(fromIndex);\n    if (w >= this.wordsInUse) return fromIndex;\n\n    let word = ~(this.words[w]) & (0xffffffff << fromIndex);\n    while (true) {\n      if (word) return (w * 32) + trailingZeros(word);\n      w++;\n      if (w == this.wordsInUse) return w * 32;\n      word = ~(this.words[w]);\n    }\n  }\n}\n\n/**\n * @param {number} bitIndex\n */\nfunction wordIndex(bitIndex) {\n  return Math.floor(bitIndex / 32);\n}\n\n/**\n * @param {number} i\n */\nfunction trailingZeros(i) {\n  // From Hacker's Delight, via JDK. Probably far less effective here,\n  // since bit ops are not necessarily the quick way to do things in\n  // JS.\n  if (i === 0) return 32;\n  let y, n = 31;\n  y = i << 16; if (y != 0) { n = n -16; i = y; }\n  y = i << 8;  if (y != 0) { n = n - 8; i = y; }\n  y = i << 4;  if (y != 0) { n = n - 4; i = y; }\n  y = i << 2;  if (y != 0) { n = n - 2; i = y; }\n  return n - ((i << 1) >>> 31);\n}\n\nmodule.exports.BitSet = BitSet;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvYml0c2V0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0Esc0RBQXNELFVBQVU7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYyxXQUFXO0FBQ3hDLGVBQWUsY0FBYyxXQUFXO0FBQ3hDLGVBQWUsY0FBYyxXQUFXO0FBQ3hDLGVBQWUsY0FBYyxXQUFXO0FBQ3hDO0FBQ0E7O0FBRUEscUJBQXFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViMi8uL25vZGVfbW9kdWxlcy9hbXFwbGliL2xpYi9iaXRzZXQuanM/MjI4YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy9cbi8vXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGJpdHNldCBpbXBsZW1lbnRhdGlvbiwgYWZ0ZXIgdGhhdCBpbiBqYXZhLnV0aWwuICBZZXMgdGhlcmVcbiAqIGFscmVhZHkgZXhpc3Qgc3VjaCB0aGluZ3MsIGJ1dCBub25lIGltcGxlbWVudCBuZXh0e0NsZWFyfFNldH1CaXQgb3JcbiAqIGVxdWl2YWxlbnQsIGFuZCBub25lIGludm9sdmVkIG1lIHRvb2xpbmcgYWJvdXQgZm9yIGFuIGV2ZW5pbmcuXG4gKi9cbmNsYXNzIEJpdFNldCB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemVdXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzaXplKSB7XG4gICAgaWYgKHNpemUpIHtcbiAgICAgIGNvbnN0IG51bVdvcmRzID0gTWF0aC5jZWlsKHNpemUgLyAzMik7XG4gICAgICB0aGlzLndvcmRzID0gbmV3IEFycmF5KG51bVdvcmRzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLndvcmRzID0gW107XG4gICAgfVxuICAgIHRoaXMud29yZHNJblVzZSA9IDA7IC8vID0gbnVtYmVyLCBub3QgaW5kZXhcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbnVtV29yZHNcbiAgICovXG4gIGVuc3VyZVNpemUobnVtV29yZHMpIHtcbiAgICBjb25zdCB3b3Jkc1ByZXNlbnQgPSB0aGlzLndvcmRzLmxlbmd0aDtcbiAgICBpZiAod29yZHNQcmVzZW50IDwgbnVtV29yZHMpIHtcbiAgICAgIHRoaXMud29yZHMgPSB0aGlzLndvcmRzLmNvbmNhdChuZXcgQXJyYXkobnVtV29yZHMgLSB3b3Jkc1ByZXNlbnQpKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIHtudW1iZXJ9IGJpdEluZGV4XG4gICAqL1xuICBzZXQoYml0SW5kZXgpIHtcbiAgICBjb25zdCB3ID0gd29yZEluZGV4KGJpdEluZGV4KTtcbiAgICBpZiAodyA+PSB0aGlzLndvcmRzSW5Vc2UpIHtcbiAgICAgIHRoaXMuZW5zdXJlU2l6ZSh3ICsgMSk7XG4gICAgICB0aGlzLndvcmRzSW5Vc2UgPSB3ICsgMTtcbiAgICB9XG4gICAgY29uc3QgYml0ID0gMSA8PCBiaXRJbmRleDtcbiAgICB0aGlzLndvcmRzW3ddIHw9IGJpdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0ge251bWJlcn0gYml0SW5kZXhcbiAgICovXG4gIGNsZWFyKGJpdEluZGV4KSB7XG4gICAgY29uc3QgdyA9IHdvcmRJbmRleChiaXRJbmRleCk7XG4gICAgaWYgKHcgPj0gdGhpcy53b3Jkc0luVXNlKSByZXR1cm47XG4gICAgY29uc3QgbWFzayA9IH4oMSA8PCBiaXRJbmRleCk7XG4gICAgdGhpcy53b3Jkc1t3XSAmPSBtYXNrO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRJbmRleFxuICAgKi9cbiAgZ2V0KGJpdEluZGV4KSB7XG4gICAgY29uc3QgdyA9IHdvcmRJbmRleChiaXRJbmRleCk7XG4gICAgaWYgKHcgPj0gdGhpcy53b3Jkc0luVXNlKSByZXR1cm4gZmFsc2U7IC8vID49IHNpbmNlIGluZGV4IHZzIHNpemVcbiAgICBjb25zdCBiaXQgPSAxIDw8IGJpdEluZGV4O1xuICAgIHJldHVybiAhISh0aGlzLndvcmRzW3ddICYgYml0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHaXZlIHRoZSBuZXh0IGJpdCB0aGF0IGlzIHNldCBvbiBvciBhZnRlciBmcm9tSW5kZXgsIG9yIC0xIGlmIG5vIHN1Y2ggYml0XG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXhcbiAgICovXG4gIG5leHRTZXRCaXQoZnJvbUluZGV4KSB7XG4gICAgbGV0IHcgPSB3b3JkSW5kZXgoZnJvbUluZGV4KTtcbiAgICBpZiAodyA+PSB0aGlzLndvcmRzSW5Vc2UpIHJldHVybiAtMTtcblxuICAgIC8vIHRoZSByaWdodC1oYW5kIHNpZGUgaXMgc2hpZnRlZCB0byBvbmx5IHRlc3QgdGhlIGJpdHMgb2YgdGhlIGZpcnN0XG4gICAgLy8gd29yZCB0aGF0IGFyZSA+IGZyb21JbmRleFxuICAgIGxldCB3b3JkID0gdGhpcy53b3Jkc1t3XSAmICgweGZmZmZmZmZmIDw8IGZyb21JbmRleCk7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmICh3b3JkKSByZXR1cm4gKHcgKiAzMikgKyB0cmFpbGluZ1plcm9zKHdvcmQpO1xuICAgICAgdysrO1xuICAgICAgaWYgKHcgPT09IHRoaXMud29yZHNJblVzZSkgcmV0dXJuIC0xO1xuICAgICAgd29yZCA9IHRoaXMud29yZHNbd107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXhcbiAgICovXG4gIG5leHRDbGVhckJpdChmcm9tSW5kZXgpIHtcbiAgICBsZXQgdyA9IHdvcmRJbmRleChmcm9tSW5kZXgpO1xuICAgIGlmICh3ID49IHRoaXMud29yZHNJblVzZSkgcmV0dXJuIGZyb21JbmRleDtcblxuICAgIGxldCB3b3JkID0gfih0aGlzLndvcmRzW3ddKSAmICgweGZmZmZmZmZmIDw8IGZyb21JbmRleCk7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmICh3b3JkKSByZXR1cm4gKHcgKiAzMikgKyB0cmFpbGluZ1plcm9zKHdvcmQpO1xuICAgICAgdysrO1xuICAgICAgaWYgKHcgPT0gdGhpcy53b3Jkc0luVXNlKSByZXR1cm4gdyAqIDMyO1xuICAgICAgd29yZCA9IH4odGhpcy53b3Jkc1t3XSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdEluZGV4XG4gKi9cbmZ1bmN0aW9uIHdvcmRJbmRleChiaXRJbmRleCkge1xuICByZXR1cm4gTWF0aC5mbG9vcihiaXRJbmRleCAvIDMyKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaVxuICovXG5mdW5jdGlvbiB0cmFpbGluZ1plcm9zKGkpIHtcbiAgLy8gRnJvbSBIYWNrZXIncyBEZWxpZ2h0LCB2aWEgSkRLLiBQcm9iYWJseSBmYXIgbGVzcyBlZmZlY3RpdmUgaGVyZSxcbiAgLy8gc2luY2UgYml0IG9wcyBhcmUgbm90IG5lY2Vzc2FyaWx5IHRoZSBxdWljayB3YXkgdG8gZG8gdGhpbmdzIGluXG4gIC8vIEpTLlxuICBpZiAoaSA9PT0gMCkgcmV0dXJuIDMyO1xuICBsZXQgeSwgbiA9IDMxO1xuICB5ID0gaSA8PCAxNjsgaWYgKHkgIT0gMCkgeyBuID0gbiAtMTY7IGkgPSB5OyB9XG4gIHkgPSBpIDw8IDg7ICBpZiAoeSAhPSAwKSB7IG4gPSBuIC0gODsgaSA9IHk7IH1cbiAgeSA9IGkgPDwgNDsgIGlmICh5ICE9IDApIHsgbiA9IG4gLSA0OyBpID0geTsgfVxuICB5ID0gaSA8PCAyOyAgaWYgKHkgIT0gMCkgeyBuID0gbiAtIDI7IGkgPSB5OyB9XG4gIHJldHVybiBuIC0gKChpIDw8IDEpID4+PiAzMSk7XG59XG5cbm1vZHVsZS5leHBvcnRzLkJpdFNldCA9IEJpdFNldDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/bitset.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/callback_model.js":
/*!****************************************************!*\
  !*** ./node_modules/amqplib/lib/callback_model.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("//\n//\n//\n\n\n\nvar defs = __webpack_require__(/*! ./defs */ \"(rsc)/./node_modules/amqplib/lib/defs.js\");\nvar EventEmitter = __webpack_require__(/*! events */ \"events\");\nvar BaseChannel = (__webpack_require__(/*! ./channel */ \"(rsc)/./node_modules/amqplib/lib/channel.js\").BaseChannel);\nvar acceptMessage = (__webpack_require__(/*! ./channel */ \"(rsc)/./node_modules/amqplib/lib/channel.js\").acceptMessage);\nvar Args = __webpack_require__(/*! ./api_args */ \"(rsc)/./node_modules/amqplib/lib/api_args.js\");\n\nclass CallbackModel extends EventEmitter {\n  constructor (connection) {\n    super();\n    this.connection = connection;\n    var self = this;\n    ['error', 'close', 'blocked', 'unblocked'].forEach(function (ev) {\n      connection.on(ev, self.emit.bind(self, ev));\n    });\n  }\n\n  close (cb) {\n    this.connection.close(cb);\n  }\n\n  updateSecret(newSecret, reason, cb) {\n    this.connection._updateSecret(newSecret, reason, cb);\n  }\n\n  createChannel (cb) {\n    var ch = new Channel(this.connection);\n    ch.open(function (err, ok) {\n      if (err === null)\n        cb && cb(null, ch);\n      else\n        cb && cb(err);\n    });\n    return ch;\n  }\n\n  createConfirmChannel (cb) {\n    var ch = new ConfirmChannel(this.connection);\n    ch.open(function (err) {\n      if (err !== null)\n        return cb && cb(err);\n      else {\n        ch.rpc(defs.ConfirmSelect, { nowait: false },\n          defs.ConfirmSelectOk, function (err, _ok) {\n            if (err !== null)\n              return cb && cb(err);\n            else\n              cb && cb(null, ch);\n          });\n      }\n    });\n    return ch;\n  }\n}\n\nclass Channel extends BaseChannel {\n  constructor (connection) {\n    super(connection);\n    this.on('delivery', this.handleDelivery.bind(this));\n    this.on('cancel', this.handleCancel.bind(this));\n  }\n\n  // This encodes straight-forward RPC: no side-effects and return the\n  // fields from the server response. It wraps the callback given it, so\n  // the calling method argument can be passed as-is. For anything that\n  // needs to have side-effects, or needs to change the server response,\n  // use `#_rpc(...)` and remember to dereference `.fields` of the\n  // server response.\n  rpc (method, fields, expect, cb0) {\n    var cb = callbackWrapper(this, cb0);\n    this._rpc(method, fields, expect, function (err, ok) {\n      cb(err, ok && ok.fields); // in case of an error, ok will be\n\n      // undefined\n    });\n    return this;\n  }\n\n  // === Public API ===\n  open (cb) {\n    try { this.allocate(); }\n    catch (e) { return cb(e); }\n\n    return this.rpc(defs.ChannelOpen, { outOfBand: \"\" },\n      defs.ChannelOpenOk, cb);\n  }\n\n  close (cb) {\n    return this.closeBecause(\"Goodbye\", defs.constants.REPLY_SUCCESS,\n      function () { cb && cb(null); });\n  }\n\n  assertQueue (queue, options, cb) {\n    return this.rpc(defs.QueueDeclare,\n      Args.assertQueue(queue, options),\n      defs.QueueDeclareOk, cb);\n  }\n\n  checkQueue (queue, cb) {\n    return this.rpc(defs.QueueDeclare,\n      Args.checkQueue(queue),\n      defs.QueueDeclareOk, cb);\n  }\n\n  deleteQueue (queue, options, cb) {\n    return this.rpc(defs.QueueDelete,\n      Args.deleteQueue(queue, options),\n      defs.QueueDeleteOk, cb);\n  }\n\n  purgeQueue (queue, cb) {\n    return this.rpc(defs.QueuePurge,\n      Args.purgeQueue(queue),\n      defs.QueuePurgeOk, cb);\n  }\n\n  bindQueue (queue, source, pattern, argt, cb) {\n    return this.rpc(defs.QueueBind,\n      Args.bindQueue(queue, source, pattern, argt),\n      defs.QueueBindOk, cb);\n  }\n\n  unbindQueue (queue, source, pattern, argt, cb) {\n    return this.rpc(defs.QueueUnbind,\n      Args.unbindQueue(queue, source, pattern, argt),\n      defs.QueueUnbindOk, cb);\n  }\n\n  assertExchange (ex, type, options, cb0) {\n    var cb = callbackWrapper(this, cb0);\n    this._rpc(defs.ExchangeDeclare,\n      Args.assertExchange(ex, type, options),\n      defs.ExchangeDeclareOk,\n      function (e, _) { cb(e, { exchange: ex }); });\n    return this;\n  }\n\n  checkExchange (exchange, cb) {\n    return this.rpc(defs.ExchangeDeclare,\n      Args.checkExchange(exchange),\n      defs.ExchangeDeclareOk, cb);\n  }\n\n  deleteExchange (exchange, options, cb) {\n    return this.rpc(defs.ExchangeDelete,\n      Args.deleteExchange(exchange, options),\n      defs.ExchangeDeleteOk, cb);\n  }\n\n  bindExchange (dest, source, pattern, argt, cb) {\n    return this.rpc(defs.ExchangeBind,\n      Args.bindExchange(dest, source, pattern, argt),\n      defs.ExchangeBindOk, cb);\n  }\n\n  unbindExchange (dest, source, pattern, argt, cb) {\n    return this.rpc(defs.ExchangeUnbind,\n      Args.unbindExchange(dest, source, pattern, argt),\n      defs.ExchangeUnbindOk, cb);\n  }\n\n  publish (exchange, routingKey, content, options) {\n    var fieldsAndProps = Args.publish(exchange, routingKey, options);\n    return this.sendMessage(fieldsAndProps, fieldsAndProps, content);\n  }\n\n  sendToQueue (queue, content, options) {\n    return this.publish('', queue, content, options);\n  }\n\n  consume (queue, callback, options, cb0) {\n    var cb = callbackWrapper(this, cb0);\n    var fields = Args.consume(queue, options);\n    var self = this;\n    this._rpc(\n      defs.BasicConsume, fields, defs.BasicConsumeOk,\n      function (err, ok) {\n        if (err === null) {\n          self.registerConsumer(ok.fields.consumerTag, callback);\n          cb(null, ok.fields);\n        }\n        else\n          cb(err);\n      });\n    return this;\n  }\n\n  cancel (consumerTag, cb0) {\n    var cb = callbackWrapper(this, cb0);\n    var self = this;\n    this._rpc(\n      defs.BasicCancel, Args.cancel(consumerTag), defs.BasicCancelOk,\n      function (err, ok) {\n        if (err === null) {\n          self.unregisterConsumer(consumerTag);\n          cb(null, ok.fields);\n        }\n        else\n          cb(err);\n      });\n    return this;\n  }\n\n  get (queue, options, cb0) {\n    var self = this;\n    var fields = Args.get(queue, options);\n    var cb = callbackWrapper(this, cb0);\n    this.sendOrEnqueue(defs.BasicGet, fields, function (err, f) {\n      if (err === null) {\n        if (f.id === defs.BasicGetEmpty) {\n          cb(null, false);\n        }\n        else if (f.id === defs.BasicGetOk) {\n          self.handleMessage = acceptMessage(function (m) {\n            m.fields = f.fields;\n            cb(null, m);\n          });\n        }\n        else {\n          cb(new Error(\"Unexpected response to BasicGet: \" +\n            inspect(f)));\n        }\n      }\n    });\n    return this;\n  }\n\n  ack (message, allUpTo) {\n    this.sendImmediately(\n      defs.BasicAck, Args.ack(message.fields.deliveryTag, allUpTo));\n    return this;\n  }\n\n  ackAll () {\n    this.sendImmediately(defs.BasicAck, Args.ack(0, true));\n    return this;\n  }\n\n  nack (message, allUpTo, requeue) {\n    this.sendImmediately(\n      defs.BasicNack,\n      Args.nack(message.fields.deliveryTag, allUpTo, requeue));\n    return this;\n  }\n\n  nackAll (requeue) {\n    this.sendImmediately(\n      defs.BasicNack, Args.nack(0, true, requeue));\n    return this;\n  }\n\n  reject (message, requeue) {\n    this.sendImmediately(\n      defs.BasicReject,\n      Args.reject(message.fields.deliveryTag, requeue));\n    return this;\n  }\n\n  prefetch (count, global, cb) {\n    return this.rpc(defs.BasicQos,\n      Args.prefetch(count, global),\n      defs.BasicQosOk, cb);\n  }\n\n  recover (cb) {\n    return this.rpc(defs.BasicRecover,\n      Args.recover(),\n      defs.BasicRecoverOk, cb);\n  }\n}\n\n\n// Wrap an RPC callback to make sure the callback is invoked with\n// either `(null, value)` or `(error)`, i.e., never two non-null\n// values. Also substitutes a stub if the callback is `undefined` or\n// otherwise falsey, for convenience in methods for which the callback\n// is optional (that is, most of them).\nfunction callbackWrapper(ch, cb) {\n  return (cb) ? function(err, ok) {\n    if (err === null) {\n      cb(null, ok);\n    }\n    else cb(err);\n  } : function() {};\n}\n\nclass ConfirmChannel extends Channel {\n  publish (exchange, routingKey,\n    content, options, cb) {\n    this.pushConfirmCallback(cb);\n    return Channel.prototype.publish.call(\n      this, exchange, routingKey, content, options);\n  }\n\n  sendToQueue (queue, content,\n    options, cb) {\n    return this.publish('', queue, content, options, cb);\n  }\n\n  waitForConfirms (k) {\n    var awaiting = [];\n    var unconfirmed = this.unconfirmed;\n    unconfirmed.forEach(function (val, index) {\n      if (val === null)\n        ; // already confirmed\n      else {\n        var confirmed = new Promise(function (resolve, reject) {\n          unconfirmed[index] = function (err) {\n            if (val)\n              val(err);\n            if (err === null)\n              resolve();\n            else\n              reject(err);\n          };\n        });\n        awaiting.push(confirmed);\n      }\n    });\n    return Promise.all(awaiting).then(function () { k(); },\n      function (err) { k(err); });\n  }\n}\n\nmodule.exports.CallbackModel = CallbackModel;\nmodule.exports.Channel = Channel;\nmodule.exports.ConfirmChannel = ConfirmChannel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/callback_model.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/channel.js":
/*!*********************************************!*\
  !*** ./node_modules/amqplib/lib/channel.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("//\n//\n//\n\n// Channel machinery.\n\n\n\nvar defs = __webpack_require__(/*! ./defs */ \"(rsc)/./node_modules/amqplib/lib/defs.js\");\nvar closeMsg = (__webpack_require__(/*! ./format */ \"(rsc)/./node_modules/amqplib/lib/format.js\").closeMessage);\nvar inspect = (__webpack_require__(/*! ./format */ \"(rsc)/./node_modules/amqplib/lib/format.js\").inspect);\nvar methodName = (__webpack_require__(/*! ./format */ \"(rsc)/./node_modules/amqplib/lib/format.js\").methodName);\nvar assert = __webpack_require__(/*! assert */ \"assert\");\nvar EventEmitter = __webpack_require__(/*! events */ \"events\");\nvar fmt = (__webpack_require__(/*! util */ \"util\").format);\nvar IllegalOperationError = (__webpack_require__(/*! ./error */ \"(rsc)/./node_modules/amqplib/lib/error.js\").IllegalOperationError);\nvar stackCapture = (__webpack_require__(/*! ./error */ \"(rsc)/./node_modules/amqplib/lib/error.js\").stackCapture);\n\nclass Channel extends EventEmitter {\n  constructor (connection) {\n    super();\n\n    this.connection = connection;\n    // for the presently outstanding RPC\n    this.reply = null;\n    // for the RPCs awaiting action\n    this.pending = [];\n    // for unconfirmed messages\n    this.lwm = 1; // the least, unconfirmed deliveryTag\n    this.unconfirmed = []; // rolling window of delivery callbacks\n    this.on('ack', this.handleConfirm.bind(this, function (cb) {\n      if (cb)\n        cb(null);\n    }));\n    this.on('nack', this.handleConfirm.bind(this, function (cb) {\n      if (cb)\n        cb(new Error('message nacked'));\n    }));\n    this.on('close', function () {\n      var cb;\n      while (cb = this.unconfirmed.shift()) {\n        if (cb)\n          cb(new Error('channel closed'));\n      }\n    });\n    // message frame state machine\n    this.handleMessage = acceptDeliveryOrReturn;\n  }\n\n  allocate () {\n    this.ch = this.connection.freshChannel(this);\n    return this;\n  }\n\n  // Incoming frames are either notifications of e.g., message delivery,\n  // or replies to something we've sent. In general I deal with the\n  // former by emitting an event, and with the latter by keeping a track\n  // of what's expecting a reply.\n  //\n  // The AMQP specification implies that RPCs can't be pipelined; that\n  // is, you can have only one outstanding RPC on a channel at a\n  // time. Certainly that's what RabbitMQ and its clients assume. For\n  // this reason, I buffer RPCs if the channel is already waiting for a\n  // reply.\n  // Just send the damn frame.\n  sendImmediately (method, fields) {\n    return this.connection.sendMethod(this.ch, method, fields);\n  }\n\n  // Invariant: !this.reply -> pending.length == 0. That is, whenever we\n  // clear a reply, we must send another RPC (and thereby fill\n  // this.reply) if there is one waiting. The invariant relevant here\n  // and in `accept`.\n  sendOrEnqueue (method, fields, reply) {\n    if (!this.reply) { // if no reply waiting, we can go\n      assert(this.pending.length === 0);\n      this.reply = reply;\n      this.sendImmediately(method, fields);\n    }\n    else {\n      this.pending.push({\n        method: method,\n        fields: fields,\n        reply: reply\n      });\n    }\n  }\n\n  sendMessage (fields, properties, content) {\n    return this.connection.sendMessage(\n      this.ch,\n      defs.BasicPublish, fields,\n      defs.BasicProperties, properties,\n      content);\n  }\n\n  // Internal, synchronously resolved RPC; the return value is resolved\n  // with the whole frame.\n  _rpc (method, fields, expect, cb) {\n    var self = this;\n\n    function reply (err, f) {\n      if (err === null) {\n        if (f.id === expect) {\n          return cb(null, f);\n        }\n        else {\n          // We have detected a problem, so it's up to us to close the\n          // channel\n          var expectedName = methodName(expect);\n\n          var e = new Error(fmt(\"Expected %s; got %s\",\n            expectedName, inspect(f, false)));\n          self.closeWithError(f.id, fmt('Expected %s; got %s',\n            expectedName, methodName(f.id)),\n            defs.constants.UNEXPECTED_FRAME, e);\n          return cb(e);\n        }\n      }\n\n\n      // An error will be given if, for example, this is waiting to be\n      // sent and the connection closes\n      else if (err instanceof Error)\n        return cb(err);\n\n\n      // A close frame will be given if this is the RPC awaiting reply\n      // and the channel is closed by the server\n      else {\n        // otherwise, it's a close frame\n        var closeReason = (err.fields.classId << 16) + err.fields.methodId;\n        var e = (method === closeReason)\n          ? fmt(\"Operation failed: %s; %s\",\n            methodName(method), closeMsg(err))\n          : fmt(\"Channel closed by server: %s\", closeMsg(err));\n        var closeFrameError = new Error(e);\n        closeFrameError.code = err.fields.replyCode;\n        closeFrameError.classId = err.fields.classId;\n        closeFrameError.methodId = err.fields.methodId;\n        return cb(closeFrameError);\n      }\n    }\n\n    this.sendOrEnqueue(method, fields, reply);\n  }\n\n  // Move to entirely closed state.\n  toClosed (capturedStack) {\n    this._rejectPending();\n    invalidateSend(this, 'Channel closed', capturedStack);\n    this.accept = invalidOp('Channel closed', capturedStack);\n    this.connection.releaseChannel(this.ch);\n    this.emit('close');\n  }\n\n  // Stop being able to send and receive methods and content. Used when\n  // we close the channel. Invokes the continuation once the server has\n  // acknowledged the close, but before the channel is moved to the\n  // closed state.\n  toClosing (capturedStack, k) {\n    var send = this.sendImmediately.bind(this);\n    invalidateSend(this, 'Channel closing', capturedStack);\n\n    this.accept = function (f) {\n      if (f.id === defs.ChannelCloseOk) {\n        if (k)\n          k();\n        var s = stackCapture('ChannelCloseOk frame received');\n        this.toClosed(s);\n      }\n      else if (f.id === defs.ChannelClose) {\n        send(defs.ChannelCloseOk, {});\n      }\n      // else ignore frame\n    };\n  }\n\n  _rejectPending () {\n    function rej (r) {\n      r(new Error(\"Channel ended, no reply will be forthcoming\"));\n    }\n    if (this.reply !== null)\n      rej(this.reply);\n    this.reply = null;\n\n    var discard;\n    while (discard = this.pending.shift())\n      rej(discard.reply);\n    this.pending = null; // so pushes will break\n  }\n\n  closeBecause (reason, code, k) {\n    this.sendImmediately(defs.ChannelClose, {\n      replyText: reason,\n      replyCode: code,\n      methodId: 0, classId: 0\n    });\n    var s = stackCapture('closeBecause called: ' + reason);\n    this.toClosing(s, k);\n  }\n\n  // If we close because there's been an error, we need to distinguish\n  // between what we tell the server (`reason`) and what we report as\n  // the cause in the client (`error`).\n  closeWithError (id, reason, code, error) {\n    var self = this;\n    this.closeBecause(reason, code, function () {\n      error.code = code;\n      // content frames and consumer errors do not provide a method a class/method ID\n      if (id) {\n        error.classId = defs.info(id).classId;\n        error.methodId = defs.info(id).methodId;\n      }\n      self.emit('error', error);\n    });\n  }\n\n  // A trampolining state machine for message frames on a channel. A\n  // message arrives in at least two frames: first, a method announcing\n  // the message (either a BasicDeliver or BasicGetOk); then, a message\n  // header with the message properties; then, zero or more content\n  // frames.\n  // Keep the try/catch localised, in an attempt to avoid disabling\n  // optimisation\n  acceptMessageFrame (f) {\n    try {\n      this.handleMessage = this.handleMessage(f);\n    }\n    catch (msg) {\n      if (typeof msg === 'string') {\n        this.closeWithError(f.id, msg, defs.constants.UNEXPECTED_FRAME,\n          new Error(msg));\n      }\n      else if (msg instanceof Error) {\n        this.closeWithError(f.id, 'Error while processing message',\n          defs.constants.INTERNAL_ERROR, msg);\n      }\n      else {\n        this.closeWithError(f.id, 'Internal error while processing message',\n          defs.constants.INTERNAL_ERROR,\n          new Error(msg.toString()));\n      }\n    }\n  }\n\n  handleConfirm (handle, f) {\n    var tag = f.deliveryTag;\n    var multi = f.multiple;\n\n    if (multi) {\n      var confirmed = this.unconfirmed.splice(0, tag - this.lwm + 1);\n      this.lwm = tag + 1;\n      confirmed.forEach(handle);\n    }\n    else {\n      var c;\n      if (tag === this.lwm) {\n        c = this.unconfirmed.shift();\n        this.lwm++;\n        // Advance the LWM and the window to the next non-gap, or\n        // possibly to the end\n        while (this.unconfirmed[0] === null) {\n          this.unconfirmed.shift();\n          this.lwm++;\n        }\n      }\n      else {\n        c = this.unconfirmed[tag - this.lwm];\n        this.unconfirmed[tag - this.lwm] = null;\n      }\n      // Technically, in the single-deliveryTag case, I should report a\n      // protocol breach if it's already been confirmed.\n      handle(c);\n    }\n  }\n\n  pushConfirmCallback (cb) {\n    // `null` is used specifically for marking already confirmed slots,\n    // so I coerce `undefined` and `null` to false; functions are never\n    // falsey.\n    this.unconfirmed.push(cb || false);\n  }\n\n  onBufferDrain () {\n    this.emit('drain');\n  }\n\n  accept(f) {\n\n    switch (f.id) {\n\n      // Message frames\n    case undefined: // content frame!\n    case defs.BasicDeliver:\n    case defs.BasicReturn:\n    case defs.BasicProperties:\n      return this.acceptMessageFrame(f);\n\n      // confirmations, need to do confirm.select first\n    case defs.BasicAck:\n      return this.emit('ack', f.fields);\n    case defs.BasicNack:\n      return this.emit('nack', f.fields);\n    case defs.BasicCancel:\n      // The broker can send this if e.g., the queue is deleted.\n      return this.emit('cancel', f.fields);\n\n    case defs.ChannelClose:\n      // Any remote closure is an error to us. Reject the pending reply\n      // with the close frame, so it can see whether it was that\n      // operation that caused it to close.\n      if (this.reply) {\n        var reply = this.reply; this.reply = null;\n        reply(f);\n      }\n      var emsg = \"Channel closed by server: \" + closeMsg(f);\n      this.sendImmediately(defs.ChannelCloseOk, {});\n\n      var error = new Error(emsg);\n      error.code = f.fields.replyCode;\n      error.classId = f.fields.classId;\n      error.methodId = f.fields.methodId;\n      this.emit('error', error);\n\n      var s = stackCapture(emsg);\n      this.toClosed(s);\n      return;\n\n    case defs.BasicFlow:\n      // RabbitMQ doesn't send this, it just blocks the TCP socket\n      return this.closeWithError(f.id, \"Flow not implemented\",\n                                 defs.constants.NOT_IMPLEMENTED,\n                                 new Error('Flow not implemented'));\n\n    default: // assume all other things are replies\n      // Resolving the reply may lead to another RPC; to make sure we\n      // don't hold that up, clear this.reply\n      var reply = this.reply; this.reply = null;\n      // however, maybe there's an RPC waiting to go? If so, that'll\n      // fill this.reply again, restoring the invariant. This does rely\n      // on any response being recv'ed after resolving the promise,\n      // below; hence, I use synchronous defer.\n      if (this.pending.length > 0) {\n        var send = this.pending.shift();\n        this.reply = send.reply;\n        this.sendImmediately(send.method, send.fields);\n      }\n      return reply(null, f);\n    }\n  }\n}\n\n// Shutdown protocol. There's three scenarios:\n//\n// 1. The application decides to shut the channel\n// 2. The server decides to shut the channel, possibly because of\n// something the application did\n// 3. The connection is closing, so there won't be any more frames\n// going back and forth.\n//\n// 1 and 2 involve an exchange of method frames (Close and CloseOk),\n// while 3 doesn't; the connection simply says \"shutdown\" to the\n// channel, which then acts as if it's closing, without going through\n// the exchange.\n\nfunction invalidOp(msg, stack) {\n  return function() {\n    throw new IllegalOperationError(msg, stack);\n  };\n}\n\nfunction invalidateSend(ch, msg, stack) {\n  ch.sendImmediately = ch.sendOrEnqueue = ch.sendMessage =\n    invalidOp(msg, stack);\n}\n\n// Kick off a message delivery given a BasicDeliver or BasicReturn\n// frame (BasicGet uses the RPC mechanism)\nfunction acceptDeliveryOrReturn(f) {\n  var event;\n  if (f.id === defs.BasicDeliver) event = 'delivery';\n  else if (f.id === defs.BasicReturn) event = 'return';\n  else throw fmt(\"Expected BasicDeliver or BasicReturn; got %s\",\n                 inspect(f));\n\n  var self = this;\n  var fields = f.fields;\n  return acceptMessage(function(message) {\n    message.fields = fields;\n    self.emit(event, message);\n  });\n}\n\n// Move to the state of waiting for message frames (headers, then\n// one or more content frames)\nfunction acceptMessage(continuation) {\n  var totalSize = 0, remaining = 0;\n  var buffers = null;\n\n  var message = {\n    fields: null,\n    properties: null,\n    content: null\n  };\n\n  return headers;\n\n  // expect a headers frame\n  function headers(f) {\n    if (f.id === defs.BasicProperties) {\n      message.properties = f.fields;\n      totalSize = remaining = f.size;\n\n      // for zero-length messages, content frames aren't required.\n      if (totalSize === 0) {\n        message.content = Buffer.alloc(0);\n        continuation(message);\n        return acceptDeliveryOrReturn;\n      }\n      else {\n        return content;\n      }\n    }\n    else {\n      throw \"Expected headers frame after delivery\";\n    }\n  }\n\n  // expect a content frame\n  // %%% TODO cancelled messages (sent as zero-length content frame)\n  function content(f) {\n    if (f.content) {\n      var size = f.content.length;\n      remaining -= size;\n      if (remaining === 0) {\n        if (buffers !== null) {\n          buffers.push(f.content);\n          message.content = Buffer.concat(buffers);\n        }\n        else {\n          message.content = f.content;\n        }\n        continuation(message);\n        return acceptDeliveryOrReturn;\n      }\n      else if (remaining < 0) {\n        throw fmt(\"Too much content sent! Expected %d bytes\",\n                  totalSize);\n      }\n      else {\n        if (buffers !== null)\n          buffers.push(f.content);\n        else\n          buffers = [f.content];\n        return content;\n      }\n    }\n    else throw \"Expected content frame after headers\"\n  }\n}\n\n// This adds just a bit more stuff useful for the APIs, but not\n// low-level machinery.\nclass BaseChannel extends Channel {\n  constructor (connection) {\n    super(connection);\n    this.consumers = new Map();\n  }\n\n  // Not sure I like the ff, it's going to be changing hidden classes\n  // all over the place. On the other hand, whaddya do.\n  registerConsumer (tag, callback) {\n    this.consumers.set(tag, callback);\n  }\n\n  unregisterConsumer (tag) {\n    this.consumers.delete(tag);\n  }\n\n  dispatchMessage (fields, message) {\n    var consumerTag = fields.consumerTag;\n    var consumer = this.consumers.get(consumerTag);\n    if (consumer) {\n      return consumer(message);\n    }\n    else {\n      // %%% Surely a race here\n      throw new Error(\"Unknown consumer: \" + consumerTag);\n    }\n  }\n\n  handleDelivery (message) {\n    return this.dispatchMessage(message.fields, message);\n  }\n\n  handleCancel (fields) {\n    var result = this.dispatchMessage(fields, null);\n    this.unregisterConsumer(fields.consumerTag);\n    return result;\n  }\n}\n\nmodule.exports.acceptMessage = acceptMessage;\nmodule.exports.BaseChannel = BaseChannel;\nmodule.exports.Channel = Channel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/channel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/channel_model.js":
/*!***************************************************!*\
  !*** ./node_modules/amqplib/lib/channel_model.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("//\n//\n//\n\n\n\nconst EventEmitter = __webpack_require__(/*! events */ \"events\");\nconst promisify = (__webpack_require__(/*! util */ \"util\").promisify);\nconst defs = __webpack_require__(/*! ./defs */ \"(rsc)/./node_modules/amqplib/lib/defs.js\");\nconst {BaseChannel} = __webpack_require__(/*! ./channel */ \"(rsc)/./node_modules/amqplib/lib/channel.js\");\nconst {acceptMessage} = __webpack_require__(/*! ./channel */ \"(rsc)/./node_modules/amqplib/lib/channel.js\");\nconst Args = __webpack_require__(/*! ./api_args */ \"(rsc)/./node_modules/amqplib/lib/api_args.js\");\nconst {inspect} = __webpack_require__(/*! ./format */ \"(rsc)/./node_modules/amqplib/lib/format.js\");\n\nclass ChannelModel extends EventEmitter {\n  constructor(connection) {\n    super();\n    this.connection = connection;\n\n    ['error', 'close', 'blocked', 'unblocked'].forEach(ev => {\n      connection.on(ev, this.emit.bind(this, ev));\n    });\n  }\n\n  close() {\n    return promisify(this.connection.close.bind(this.connection))();\n  }\n\n  updateSecret(newSecret, reason) {\n    return promisify(this.connection._updateSecret.bind(this.connection))(newSecret, reason);\n  }\n\n  async createChannel() {\n    const channel = new Channel(this.connection);\n    await channel.open();\n    return channel;\n  }\n\n  async createConfirmChannel() {\n    const channel = new ConfirmChannel(this.connection);\n    await channel.open();\n    await channel.rpc(defs.ConfirmSelect, {nowait: false}, defs.ConfirmSelectOk);\n    return channel;\n  }\n}\n\n// Channels\n\nclass Channel extends BaseChannel {\n  constructor(connection) {\n    super(connection);\n    this.on('delivery', this.handleDelivery.bind(this));\n    this.on('cancel', this.handleCancel.bind(this));\n  }\n\n  // An RPC that returns a 'proper' promise, which resolves to just the\n  // response's fields; this is intended to be suitable for implementing\n  // API procedures.\n  async rpc(method, fields, expect) {\n    const f = await promisify(cb => {\n      return this._rpc(method, fields, expect, cb);\n    })();\n\n    return f.fields;\n  }\n\n  // Do the remarkably simple channel open handshake\n  async open() {\n    const ch = await this.allocate.bind(this)();\n    return ch.rpc(defs.ChannelOpen, {outOfBand: \"\"},\n                  defs.ChannelOpenOk);\n  }\n\n  close() {\n    return promisify(cb => {\n      return this.closeBecause(\"Goodbye\", defs.constants.REPLY_SUCCESS,\n                      cb);\n    })();\n  }\n\n  // === Public API, declaring queues and stuff ===\n\n  assertQueue(queue, options) {\n    return this.rpc(defs.QueueDeclare,\n                    Args.assertQueue(queue, options),\n                    defs.QueueDeclareOk);\n  }\n\n  checkQueue(queue) {\n    return this.rpc(defs.QueueDeclare,\n                    Args.checkQueue(queue),\n                    defs.QueueDeclareOk);\n  }\n\n  deleteQueue(queue, options) {\n    return this.rpc(defs.QueueDelete,\n                    Args.deleteQueue(queue, options),\n                    defs.QueueDeleteOk);\n  }\n\n  purgeQueue(queue) {\n    return this.rpc(defs.QueuePurge,\n                    Args.purgeQueue(queue),\n                    defs.QueuePurgeOk);\n  }\n\n  bindQueue(queue, source, pattern, argt) {\n    return this.rpc(defs.QueueBind,\n                    Args.bindQueue(queue, source, pattern, argt),\n                    defs.QueueBindOk);\n  }\n\n  unbindQueue(queue, source, pattern, argt) {\n    return this.rpc(defs.QueueUnbind,\n                    Args.unbindQueue(queue, source, pattern, argt),\n                    defs.QueueUnbindOk);\n  }\n\n  assertExchange(exchange, type, options) {\n    // The server reply is an empty set of fields, but it's convenient\n    // to have the exchange name handed to the continuation.\n    return this.rpc(defs.ExchangeDeclare,\n                    Args.assertExchange(exchange, type, options),\n                    defs.ExchangeDeclareOk)\n      .then(_ok => { return { exchange }; });\n  }\n\n  checkExchange(exchange) {\n    return this.rpc(defs.ExchangeDeclare,\n                    Args.checkExchange(exchange),\n                    defs.ExchangeDeclareOk);\n  }\n\n  deleteExchange(name, options) {\n    return this.rpc(defs.ExchangeDelete,\n                    Args.deleteExchange(name, options),\n                    defs.ExchangeDeleteOk);\n  }\n\n  bindExchange(dest, source, pattern, argt) {\n    return this.rpc(defs.ExchangeBind,\n                    Args.bindExchange(dest, source, pattern, argt),\n                    defs.ExchangeBindOk);\n  }\n\n  unbindExchange(dest, source, pattern, argt) {\n    return this.rpc(defs.ExchangeUnbind,\n                    Args.unbindExchange(dest, source, pattern, argt),\n                    defs.ExchangeUnbindOk);\n  }\n\n  // Working with messages\n\n  publish(exchange, routingKey, content, options) {\n    const fieldsAndProps = Args.publish(exchange, routingKey, options);\n    return this.sendMessage(fieldsAndProps, fieldsAndProps, content);\n  }\n\n  sendToQueue(queue, content, options) {\n    return this.publish('', queue, content, options);\n  }\n\n  consume(queue, callback, options) {\n    // NB we want the callback to be run synchronously, so that we've\n    // registered the consumerTag before any messages can arrive.\n    const fields = Args.consume(queue, options);\n    return new Promise((resolve, reject) => {\n      this._rpc(defs.BasicConsume, fields, defs.BasicConsumeOk, (err, ok) => {\n        if (err) return reject(err);\n        this.registerConsumer(ok.fields.consumerTag, callback);\n        resolve(ok.fields);\n      });\n    });\n  }\n\n  async cancel(consumerTag) {\n    const ok = await promisify(cb => {\n      this._rpc(defs.BasicCancel, Args.cancel(consumerTag),\n            defs.BasicCancelOk,\n            cb);\n    })()\n    .then(ok => {\n      this.unregisterConsumer(consumerTag);\n      return ok.fields;\n    });\n  }\n\n  get(queue, options) {\n    const fields = Args.get(queue, options);\n    return new Promise((resolve, reject) => {\n      this.sendOrEnqueue(defs.BasicGet, fields, (err, f) => {\n        if (err) return reject(err);\n        if (f.id === defs.BasicGetEmpty) {\n          return resolve(false);\n        }\n        else if (f.id === defs.BasicGetOk) {\n          const fields = f.fields;\n          this.handleMessage = acceptMessage(m => {\n            m.fields = fields;\n            resolve(m);\n          });\n        }\n        else {\n          reject(new Error(`Unexpected response to BasicGet: ${inspect(f)}`));\n        }\n      });\n    });\n  }\n\n  ack(message, allUpTo) {\n    this.sendImmediately(\n      defs.BasicAck,\n      Args.ack(message.fields.deliveryTag, allUpTo));\n  }\n\n  ackAll() {\n    this.sendImmediately(defs.BasicAck, Args.ack(0, true));\n  }\n\n  nack(message, allUpTo, requeue) {\n    this.sendImmediately(\n      defs.BasicNack,\n      Args.nack(message.fields.deliveryTag, allUpTo, requeue));\n  }\n\n  nackAll(requeue) {\n    this.sendImmediately(defs.BasicNack,\n                         Args.nack(0, true, requeue));\n  }\n\n  // `Basic.Nack` is not available in older RabbitMQ versions (or in the\n  // AMQP specification), so you have to use the one-at-a-time\n  // `Basic.Reject`. This is otherwise synonymous with\n  // `#nack(message, false, requeue)`.\n  reject(message, requeue) {\n    this.sendImmediately(\n      defs.BasicReject,\n      Args.reject(message.fields.deliveryTag, requeue));\n  }\n\n  recover() {\n    return this.rpc(defs.BasicRecover,\n                    Args.recover(),\n                    defs.BasicRecoverOk);\n  }\n\n  qos(count, global) {\n    return this.rpc(defs.BasicQos,\n                    Args.prefetch(count, global),\n                    defs.BasicQosOk);\n  }\n}\n\n// There are more options in AMQP than exposed here; RabbitMQ only\n// implements prefetch based on message count, and only for individual\n// channels or consumers. RabbitMQ v3.3.0 and after treat prefetch\n// (without `global` set) as per-consumer (for consumers following),\n// and prefetch with `global` set as per-channel.\nChannel.prototype.prefetch = Channel.prototype.qos\n\n// Confirm channel. This is a channel with confirms 'switched on',\n// meaning sent messages will provoke a responding 'ack' or 'nack'\n// from the server. The upshot of this is that `publish` and\n// `sendToQueue` both take a callback, which will be called either\n// with `null` as its argument to signify 'ack', or an exception as\n// its argument to signify 'nack'.\n\nclass ConfirmChannel extends Channel {\n  publish(exchange, routingKey, content, options, cb) {\n    this.pushConfirmCallback(cb);\n    return super.publish(exchange, routingKey, content, options);\n  }\n\n  sendToQueue(queue, content, options, cb) {\n    return this.publish('', queue, content, options, cb);\n  }\n\n  waitForConfirms() {\n    const awaiting = [];\n    const unconfirmed = this.unconfirmed;\n    unconfirmed.forEach((val, index) => {\n      if (val !== null) {\n        const confirmed = new Promise((resolve, reject) => {\n          unconfirmed[index] = err => {\n            if (val) val(err);\n            if (err === null) resolve();\n            else reject(err);\n          };\n        });\n        awaiting.push(confirmed);\n      }\n    });\n    // Channel closed\n    if (!this.pending) {\n      var cb;\n      while (cb = this.unconfirmed.shift()) {\n        if (cb) cb(new Error('channel closed'));\n      }\n    }\n    return Promise.all(awaiting);\n  }\n}\n\nmodule.exports.ConfirmChannel = ConfirmChannel;\nmodule.exports.Channel = Channel;\nmodule.exports.ChannelModel = ChannelModel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/channel_model.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/codec.js":
/*!*******************************************!*\
  !*** ./node_modules/amqplib/lib/codec.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("//\n//\n//\n\n/*\n\nThe AMQP 0-9-1 is a mess when it comes to the types that can be\nencoded on the wire.\n\nThere are four encoding schemes, and three overlapping sets of types:\nframes, methods, (field-)tables, and properties.\n\nEach *frame type* has a set layout in which values of given types are\nconcatenated along with sections of \"raw binary\" data.\n\nIn frames there are `shortstr`s, that is length-prefixed strings of\nUTF8 chars, 8 bit unsigned integers (called `octet`), unsigned 16 bit\nintegers (called `short` or `short-uint`), unsigned 32 bit integers\n(called `long` or `long-uint`), unsigned 64 bit integers (called\n`longlong` or `longlong-uint`), and flags (called `bit`).\n\nMethods are encoded as a frame giving a method ID and a sequence of\narguments of known types. The encoded method argument values are\nconcatenated (with some fun complications around \"packing\" consecutive\nbit values into bytes).\n\nAlong with the types given in frames, method arguments may be long\nbyte strings (`longstr`, not required to be UTF8) or 64 bit unsigned\nintegers to be interpreted as timestamps (yeah I don't know why\neither), or arbitrary sets of key-value pairs (called `field-table`).\n\nInside a field table the keys are `shortstr` and the values are\nprefixed with a byte tag giving the type. The types are any of the\nabove except for bits (which are replaced by byte-wide `bool`), along\nwith a NULL value `void`, a special fixed-precision number encoding\n(`decimal`), IEEE754 `float`s and `double`s, signed integers,\n`field-array` (a sequence of tagged values), and nested field-tables.\n\nRabbitMQ and QPid use a subset of the field-table types, and different\nvalue tags, established before the AMQP 0-9-1 specification was\npublished. So far as I know, no-one uses the types and tags as\npublished. http://www.rabbitmq.com/amqp-0-9-1-errata.html gives the\nlist of field-table types.\n\nLastly, there are (sets of) properties, only one of which is given in\nAMQP 0-9-1: `BasicProperties`. These are almost the same as methods,\nexcept that they appear in content header frames, which include a\ncontent size, and they carry a set of flags indicating which\nproperties are present. This scheme can save ones of bytes per message\n(messages which take a minimum of three frames each to send).\n\n*/\n\n\n\nvar ints = __webpack_require__(/*! buffer-more-ints */ \"(rsc)/./node_modules/buffer-more-ints/buffer-more-ints.js\");\n\n// JavaScript uses only doubles so what I'm testing for is whether\n// it's *better* to encode a number as a float or double. This really\n// just amounts to testing whether there's a fractional part to the\n// number, except that see below. NB I don't use bitwise operations to\n// do this 'efficiently' -- it would mask the number to 32 bits.\n//\n// At 2^50, doubles don't have sufficient precision to distinguish\n// between floating point and integer numbers (`Math.pow(2, 50) + 0.1\n// === Math.pow(2, 50)` (and, above 2^53, doubles cannot represent all\n// integers (`Math.pow(2, 53) + 1 === Math.pow(2, 53)`)). Hence\n// anything with a magnitude at or above 2^50 may as well be encoded\n// as a 64-bit integer. Except that only signed integers are supported\n// by RabbitMQ, so anything above 2^63 - 1 must be a double.\nfunction isFloatingPoint(n) {\n    return n >= 0x8000000000000000 ||\n        (Math.abs(n) < 0x4000000000000\n         && Math.floor(n) !== n);\n}\n\nfunction encodeTable(buffer, val, offset) {\n    var start = offset;\n    offset += 4; // leave room for the table length\n    for (var key in val) {\n        if (val[key] !== undefined) {\n          var len = Buffer.byteLength(key);\n          buffer.writeUInt8(len, offset); offset++;\n          buffer.write(key, offset, 'utf8'); offset += len;\n          offset += encodeFieldValue(buffer, val[key], offset);\n        }\n    }\n    var size = offset - start;\n    buffer.writeUInt32BE(size - 4, start);\n    return size;\n}\n\nfunction encodeArray(buffer, val, offset) {\n    var start = offset;\n    offset += 4;\n    for (var i=0, num=val.length; i < num; i++) {\n        offset += encodeFieldValue(buffer, val[i], offset);\n    }\n    var size = offset - start;\n    buffer.writeUInt32BE(size - 4, start);\n    return size;\n}\n\nfunction encodeFieldValue(buffer, value, offset) {\n    var start = offset;\n    var type = typeof value, val = value;\n    // A trapdoor for specifying a type, e.g., timestamp\n    if (value && type === 'object' && value.hasOwnProperty('!')) {\n        val = value.value;\n        type = value['!'];\n    }\n\n    // If it's a JS number, we'll have to guess what type to encode it\n    // as.\n    if (type == 'number') {\n        // Making assumptions about the kind of number (floating point\n        // v integer, signed, unsigned, size) desired is dangerous in\n        // general; however, in practice RabbitMQ uses only\n        // longstrings and unsigned integers in its arguments, and\n        // other clients generally conflate number types anyway. So\n        // the only distinction we care about is floating point vs\n        // integers, preferring integers since those can be promoted\n        // if necessary. If floating point is required, we may as well\n        // use double precision.\n        if (isFloatingPoint(val)) {\n            type = 'double';\n        }\n        else { // only signed values are used in tables by\n               // RabbitMQ. It *used* to (< v3.3.0) treat the byte 'b'\n               // type as unsigned, but most clients (and the spec)\n               // think it's signed, and now RabbitMQ does too.\n            if (val < 128 && val >= -128) {\n                type = 'byte';\n            }\n            else if (val >= -0x8000 && val < 0x8000) {\n                type = 'short'\n            }\n            else if (val >= -0x80000000 && val < 0x80000000) {\n                type = 'int';\n            }\n            else {\n                type = 'long';\n            }\n        }\n    }\n\n    function tag(t) { buffer.write(t, offset); offset++; }\n\n    switch (type) {\n    case 'string': // no shortstr in field tables\n        var len = Buffer.byteLength(val, 'utf8');\n        tag('S');\n        buffer.writeUInt32BE(len, offset); offset += 4;\n        buffer.write(val, offset, 'utf8'); offset += len;\n        break;\n    case 'object':\n        if (val === null) {\n            tag('V');\n        }\n        else if (Array.isArray(val)) {\n            tag('A');\n            offset += encodeArray(buffer, val, offset);\n        }\n        else if (Buffer.isBuffer(val)) {\n            tag('x');\n            buffer.writeUInt32BE(val.length, offset); offset += 4;\n            val.copy(buffer, offset); offset += val.length;\n        }\n        else {\n            tag('F');\n            offset += encodeTable(buffer, val, offset);\n        }\n        break;\n    case 'boolean':\n        tag('t');\n        buffer.writeUInt8((val) ? 1 : 0, offset); offset++;\n        break;\n    // These are the types that are either guessed above, or\n    // explicitly given using the {'!': type} notation.\n    case 'double':\n    case 'float64':\n        tag('d');\n        buffer.writeDoubleBE(val, offset);\n        offset += 8;\n        break;\n    case 'byte':\n    case 'int8':\n        tag('b');\n        buffer.writeInt8(val, offset); offset++;\n        break;\n    case 'short':\n    case 'int16':\n        tag('s');\n        buffer.writeInt16BE(val, offset); offset += 2;\n        break;\n    case 'int':\n    case 'int32':\n        tag('I');\n        buffer.writeInt32BE(val, offset); offset += 4;\n        break;\n    case 'long':\n    case 'int64':\n        tag('l');\n        ints.writeInt64BE(buffer, val, offset); offset += 8;\n        break;\n\n    // Now for exotic types, those can _only_ be denoted by using\n    // `{'!': type, value: val}\n    case 'timestamp':\n        tag('T');\n        ints.writeUInt64BE(buffer, val, offset); offset += 8;\n        break;\n    case 'float':\n        tag('f');\n        buffer.writeFloatBE(val, offset); offset += 4;\n        break;\n    case 'decimal':\n        tag('D');\n        if (val.hasOwnProperty('places') && val.hasOwnProperty('digits')\n            && val.places >= 0 && val.places < 256) {\n            buffer[offset] = val.places; offset++;\n            buffer.writeUInt32BE(val.digits, offset); offset += 4;\n        }\n        else throw new TypeError(\n            \"Decimal value must be {'places': 0..255, 'digits': uint32}, \" +\n                \"got \" + JSON.stringify(val));\n        break;\n    default:\n        throw new TypeError('Unknown type to encode: ' + type);\n    }\n    return offset - start;\n}\n\n// Assume we're given a slice of the buffer that contains just the\n// fields.\nfunction decodeFields(slice) {\n    var fields = {}, offset = 0, size = slice.length;\n    var len, key, val;\n\n    function decodeFieldValue() {\n        var tag = String.fromCharCode(slice[offset]); offset++;\n        switch (tag) {\n        case 'b':\n            val = slice.readInt8(offset); offset++;\n            break;\n        case 'S':\n            len = slice.readUInt32BE(offset); offset += 4;\n            val = slice.toString('utf8', offset, offset + len);\n            offset += len;\n            break;\n        case 'I':\n            val = slice.readInt32BE(offset); offset += 4;\n            break;\n        case 'D': // only positive decimals, apparently.\n            var places = slice[offset]; offset++;\n            var digits = slice.readUInt32BE(offset); offset += 4;\n            val = {'!': 'decimal', value: {places: places, digits: digits}};\n            break;\n        case 'T':\n            val = ints.readUInt64BE(slice, offset); offset += 8;\n            val = {'!': 'timestamp', value: val};\n            break;\n        case 'F':\n            len = slice.readUInt32BE(offset); offset += 4;\n            val = decodeFields(slice.subarray(offset, offset + len));\n            offset += len;\n            break;\n        case 'A':\n            len = slice.readUInt32BE(offset); offset += 4;\n            decodeArray(offset + len);\n            // NB decodeArray will itself update offset and val\n            break;\n        case 'd':\n            val = slice.readDoubleBE(offset); offset += 8;\n            break;\n        case 'f':\n            val = slice.readFloatBE(offset); offset += 4;\n            break;\n        case 'l':\n            val = ints.readInt64BE(slice, offset); offset += 8;\n            break;\n        case 's':\n            val = slice.readInt16BE(offset); offset += 2;\n            break;\n        case 't':\n            val = slice[offset] != 0; offset++;\n            break;\n        case 'V':\n            val = null;\n            break;\n        case 'x':\n            len = slice.readUInt32BE(offset); offset += 4;\n            val = slice.subarray(offset, offset + len);\n            offset += len;\n            break;\n        default:\n            throw new TypeError('Unexpected type tag \"' + tag +'\"');\n        }\n    }\n\n    function decodeArray(until) {\n        var vals = [];\n        while (offset < until) {\n            decodeFieldValue();\n            vals.push(val);\n        }\n        val = vals;\n    }\n\n    while (offset < size) {\n        len = slice.readUInt8(offset); offset++;\n        key = slice.toString('utf8', offset, offset + len);\n        offset += len;\n        decodeFieldValue();\n        fields[key] = val;\n    }\n    return fields;\n}\n\nmodule.exports.encodeTable = encodeTable;\nmodule.exports.decodeFields = decodeFields;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/codec.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/connect.js":
/*!*********************************************!*\
  !*** ./node_modules/amqplib/lib/connect.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("//\n//\n//\n\n// General-purpose API for glueing everything together.\n\n\n\nvar URL = __webpack_require__(/*! url-parse */ \"(rsc)/./node_modules/url-parse/index.js\");\nvar QS = __webpack_require__(/*! querystring */ \"querystring\");\nvar Connection = (__webpack_require__(/*! ./connection */ \"(rsc)/./node_modules/amqplib/lib/connection.js\").Connection);\nvar fmt = (__webpack_require__(/*! util */ \"util\").format);\nvar credentials = __webpack_require__(/*! ./credentials */ \"(rsc)/./node_modules/amqplib/lib/credentials.js\");\n\nfunction copyInto(obj, target) {\n  var keys = Object.keys(obj);\n  var i = keys.length;\n  while (i--) {\n    var k = keys[i];\n    target[k] = obj[k];\n  }\n  return target;\n}\n\n// Adapted from util._extend, which is too fringe to use.\nfunction clone(obj) {\n  return copyInto(obj, {});\n}\n\nvar CLIENT_PROPERTIES = {\n  \"product\": \"amqplib\",\n  \"version\": (__webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/amqplib/package.json\").version),\n  \"platform\": fmt('Node.JS %s', process.version),\n  \"information\": \"http://squaremo.github.io/amqp.node\",\n  \"capabilities\": {\n    \"publisher_confirms\": true,\n    \"exchange_exchange_bindings\": true,\n    \"basic.nack\": true,\n    \"consumer_cancel_notify\": true,\n    \"connection.blocked\": true,\n    \"authentication_failure_close\": true\n  }\n};\n\n// Construct the main frames used in the opening handshake\nfunction openFrames(vhost, query, credentials, extraClientProperties) {\n  if (!vhost)\n    vhost = '/';\n  else\n    vhost = QS.unescape(vhost);\n\n  var query = query || {};\n\n  function intOrDefault(val, def) {\n    return (val === undefined) ? def : parseInt(val);\n  }\n\n  var clientProperties = Object.create(CLIENT_PROPERTIES);\n\n  return {\n    // start-ok\n    'clientProperties': copyInto(extraClientProperties, clientProperties),\n    'mechanism': credentials.mechanism,\n    'response': credentials.response(),\n    'locale': query.locale || 'en_US',\n\n    // tune-ok\n    'channelMax': intOrDefault(query.channelMax, 0),\n    'frameMax': intOrDefault(query.frameMax, 0x1000),\n    'heartbeat': intOrDefault(query.heartbeat, 0),\n\n    // open\n    'virtualHost': vhost,\n    'capabilities': '',\n    'insist': 0\n  };\n}\n\n// Decide on credentials based on what we're supplied.\nfunction credentialsFromUrl(parts) {\n  var user = 'guest', passwd = 'guest';\n  if (parts.username != '' || parts.password != '') {\n    user = (parts.username) ? unescape(parts.username) : '';\n    passwd = (parts.password) ? unescape(parts.password) : '';\n  }\n  return credentials.plain(user, passwd);\n}\n\nfunction connect(url, socketOptions, openCallback) {\n  // tls.connect uses `util._extend()` on the options given it, which\n  // copies only properties mentioned in `Object.keys()`, when\n  // processing the options. So I have to make copies too, rather\n  // than using `Object.create()`.\n  var sockopts = clone(socketOptions || {});\n  url = url || 'amqp://localhost';\n\n  var noDelay = !!sockopts.noDelay;\n  var timeout = sockopts.timeout;\n  var keepAlive = !!sockopts.keepAlive;\n  // 0 is default for node\n  var keepAliveDelay = sockopts.keepAliveDelay || 0;\n\n  var extraClientProperties = sockopts.clientProperties || {};\n\n  var protocol, fields;\n  if (typeof url === 'object') {\n    protocol = (url.protocol || 'amqp') + ':';\n    sockopts.host = url.hostname;\n    sockopts.servername = sockopts.servername || url.hostname;\n    sockopts.port = url.port || ((protocol === 'amqp:') ? 5672 : 5671);\n\n    var user, pass;\n    // Only default if both are missing, to have the same behaviour as\n    // the stringly URL.\n    if (url.username == undefined && url.password == undefined) {\n      user = 'guest'; pass = 'guest';\n    } else {\n      user = url.username || '';\n      pass = url.password || '';\n    }\n\n    var config = {\n      locale: url.locale,\n      channelMax: url.channelMax,\n      frameMax: url.frameMax,\n      heartbeat: url.heartbeat,\n    };\n\n    fields = openFrames(url.vhost, config, sockopts.credentials || credentials.plain(user, pass), extraClientProperties);\n  } else {\n    var parts = URL(url, true); // yes, parse the query string\n    protocol = parts.protocol;\n    sockopts.host = parts.hostname;\n    sockopts.servername = sockopts.servername || parts.hostname;\n    sockopts.port = parseInt(parts.port) || ((protocol === 'amqp:') ? 5672 : 5671);\n    var vhost = parts.pathname ? parts.pathname.substr(1) : null;\n    fields = openFrames(vhost, parts.query, sockopts.credentials || credentialsFromUrl(parts), extraClientProperties);\n  }\n\n  var sockok = false;\n  var sock;\n\n  function onConnect() {\n    sockok = true;\n    sock.setNoDelay(noDelay);\n    if (keepAlive) sock.setKeepAlive(keepAlive, keepAliveDelay);\n\n    var c = new Connection(sock);\n    c.open(fields, function(err, ok) {\n      // disable timeout once the connection is open, we don't want\n      // it fouling things\n      if (timeout) sock.setTimeout(0);\n      if (err === null) {\n        openCallback(null, c);\n      } else {\n        // The connection isn't closed by the server on e.g. wrong password\n        sock.end();\n        sock.destroy();\n        openCallback(err);\n      }\n    });\n  }\n\n  if (protocol === 'amqp:') {\n    sock = (__webpack_require__(/*! net */ \"net\").connect)(sockopts, onConnect);\n  }\n  else if (protocol === 'amqps:') {\n    sock = (__webpack_require__(/*! tls */ \"tls\").connect)(sockopts, onConnect);\n  }\n  else {\n    throw new Error(\"Expected amqp: or amqps: as the protocol; got \" + protocol);\n  }\n\n  if (timeout) {\n    sock.setTimeout(timeout, function() {\n      sock.end();\n      sock.destroy();\n      openCallback(new Error('connect ETIMEDOUT'));\n    });\n  }\n\n  sock.once('error', function(err) {\n    if (!sockok) openCallback(err);\n  });\n\n}\n\nmodule.exports.connect = connect;\nmodule.exports.credentialsFromUrl = credentialsFromUrl;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/connect.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/connection.js":
/*!************************************************!*\
  !*** ./node_modules/amqplib/lib/connection.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("//\n//\n//\n\n\n\nvar defs = __webpack_require__(/*! ./defs */ \"(rsc)/./node_modules/amqplib/lib/defs.js\");\nvar constants = defs.constants;\nvar frame = __webpack_require__(/*! ./frame */ \"(rsc)/./node_modules/amqplib/lib/frame.js\");\nvar HEARTBEAT = frame.HEARTBEAT;\nvar Mux = (__webpack_require__(/*! ./mux */ \"(rsc)/./node_modules/amqplib/lib/mux.js\").Mux);\n\nvar Duplex =\n  (__webpack_require__(/*! stream */ \"stream\").Duplex) ||\n  __webpack_require__(/*! readable-stream/duplex */ \"(rsc)/./node_modules/readable-stream/duplex.js\");\nvar EventEmitter = __webpack_require__(/*! events */ \"events\");\nvar Heart = (__webpack_require__(/*! ./heartbeat */ \"(rsc)/./node_modules/amqplib/lib/heartbeat.js\").Heart);\n\nvar methodName = (__webpack_require__(/*! ./format */ \"(rsc)/./node_modules/amqplib/lib/format.js\").methodName);\nvar closeMsg = (__webpack_require__(/*! ./format */ \"(rsc)/./node_modules/amqplib/lib/format.js\").closeMessage);\nvar inspect = (__webpack_require__(/*! ./format */ \"(rsc)/./node_modules/amqplib/lib/format.js\").inspect);\n\nvar BitSet = (__webpack_require__(/*! ./bitset */ \"(rsc)/./node_modules/amqplib/lib/bitset.js\").BitSet);\nvar fmt = (__webpack_require__(/*! util */ \"util\").format);\nvar PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough) ||\n  __webpack_require__(/*! readable-stream/passthrough */ \"(rsc)/./node_modules/readable-stream/passthrough.js\");\nvar IllegalOperationError = (__webpack_require__(/*! ./error */ \"(rsc)/./node_modules/amqplib/lib/error.js\").IllegalOperationError);\nvar stackCapture = (__webpack_require__(/*! ./error */ \"(rsc)/./node_modules/amqplib/lib/error.js\").stackCapture);\n\n// High-water mark for channel write buffers, in 'objects' (which are\n// encoded frames as buffers).\nvar DEFAULT_WRITE_HWM = 1024;\n// If all the frames of a message (method, properties, content) total\n// to less than this, copy them into a single buffer and write it all\n// at once. Note that this is less than the minimum frame size: if it\n// was greater, we might have to fragment the content.\nvar SINGLE_CHUNK_THRESHOLD = 2048;\n\nclass Connection extends EventEmitter {\n  constructor (underlying) {\n    super();\n\n    var stream = this.stream = wrapStream(underlying);\n    this.muxer = new Mux(stream);\n\n    // frames\n    this.rest = Buffer.alloc(0);\n    this.frameMax = constants.FRAME_MIN_SIZE;\n    this.sentSinceLastCheck = false;\n    this.recvSinceLastCheck = false;\n\n    this.expectSocketClose = false;\n    this.freeChannels = new BitSet();\n    this.channels = [{\n      channel: { accept: channel0(this) },\n      buffer: underlying\n    }];\n  }\n\n  // This changed between versions, as did the codec, methods, etc. AMQP\n  // 0-9-1 is fairly similar to 0.8, but better, and nothing implements\n  // 0.8 that doesn't implement 0-9-1. In other words, it doesn't make\n  // much sense to generalise here.\n  sendProtocolHeader () {\n    this.sendBytes(frame.PROTOCOL_HEADER);\n  }\n\n  /*\n    The frighteningly complicated opening protocol (spec section 2.2.4):\n\n       Client -> Server\n\n         protocol header ->\n           <- start\n         start-ok ->\n       .. next two zero or more times ..\n           <- secure\n         secure-ok ->\n           <- tune\n         tune-ok ->\n         open ->\n           <- open-ok\n\n  If I'm only supporting SASL's PLAIN mechanism (which I am for the time\n  being), it gets a bit easier since the server won't in general send\n  back a `secure`, it'll just send `tune` after the `start-ok`.\n  (SASL PLAIN: http://tools.ietf.org/html/rfc4616)\n\n  */\n  open (allFields, openCallback0) {\n    var self = this;\n    var openCallback = openCallback0 || function () { };\n\n    // This is where we'll put our negotiated values\n    var tunedOptions = Object.create(allFields);\n\n    function wait (k) {\n      self.step(function (err, frame) {\n        if (err !== null)\n          bail(err);\n        else if (frame.channel !== 0) {\n          bail(new Error(\n            fmt(\"Frame on channel != 0 during handshake: %s\",\n              inspect(frame, false))));\n        }\n        else\n          k(frame);\n      });\n    }\n\n    function expect (Method, k) {\n      wait(function (frame) {\n        if (frame.id === Method)\n          k(frame);\n        else {\n          bail(new Error(\n            fmt(\"Expected %s; got %s\",\n              methodName(Method), inspect(frame, false))));\n        }\n      });\n    }\n\n    function bail (err) {\n      openCallback(err);\n    }\n\n    function send (Method) {\n      // This can throw an exception if there's some problem with the\n      // options; e.g., something is a string instead of a number.\n      self.sendMethod(0, Method, tunedOptions);\n    }\n\n    function negotiate (server, desired) {\n      // We get sent values for channelMax, frameMax and heartbeat,\n      // which we may accept or lower (subject to a minimum for\n      // frameMax, but we'll leave that to the server to enforce). In\n      // all cases, `0` really means \"no limit\", or rather the highest\n      // value in the encoding, e.g., unsigned short for channelMax.\n      if (server === 0 || desired === 0) {\n        // i.e., whichever places a limit, if either\n        return Math.max(server, desired);\n      }\n      else {\n        return Math.min(server, desired);\n      }\n    }\n\n    function onStart (start) {\n      var mechanisms = start.fields.mechanisms.toString().split(' ');\n      if (mechanisms.indexOf(allFields.mechanism) < 0) {\n        bail(new Error(fmt('SASL mechanism %s is not provided by the server',\n          allFields.mechanism)));\n        return;\n      }\n      self.serverProperties = start.fields.serverProperties;\n      try {\n        send(defs.ConnectionStartOk);\n      } catch (err) {\n        bail(err);\n        return;\n      }\n      wait(afterStartOk);\n    }\n\n    function afterStartOk (reply) {\n      switch (reply.id) {\n        case defs.ConnectionSecure:\n          bail(new Error(\n            \"Wasn't expecting to have to go through secure\"));\n          break;\n        case defs.ConnectionClose:\n          bail(new Error(fmt(\"Handshake terminated by server: %s\",\n            closeMsg(reply))));\n          break;\n        case defs.ConnectionTune:\n          var fields = reply.fields;\n          tunedOptions.frameMax =\n            negotiate(fields.frameMax, allFields.frameMax);\n          tunedOptions.channelMax =\n            negotiate(fields.channelMax, allFields.channelMax);\n          tunedOptions.heartbeat =\n            negotiate(fields.heartbeat, allFields.heartbeat);\n          try {\n            send(defs.ConnectionTuneOk);\n            send(defs.ConnectionOpen);\n          } catch (err) {\n            bail(err);\n            return;\n          }\n          expect(defs.ConnectionOpenOk, onOpenOk);\n          break;\n        default:\n          bail(new Error(\n            fmt(\"Expected connection.secure, connection.close, \" +\n              \"or connection.tune during handshake; got %s\",\n              inspect(reply, false))));\n          break;\n      }\n    }\n\n    function onOpenOk (openOk) {\n      // Impose the maximum of the encoded value, if the negotiated\n      // value is zero, meaning \"no, no limits\"\n      self.channelMax = tunedOptions.channelMax || 0xffff;\n      self.frameMax = tunedOptions.frameMax || 0xffffffff;\n      // 0 means \"no heartbeat\", rather than \"maximum period of\n      // heartbeating\"\n      self.heartbeat = tunedOptions.heartbeat;\n      self.heartbeater = self.startHeartbeater();\n      self.accept = mainAccept;\n      succeed(openOk);\n    }\n\n    // If the server closes the connection, it's probably because of\n    // something we did\n    function endWhileOpening (err) {\n      bail(err || new Error('Socket closed abruptly ' +\n        'during opening handshake'));\n    }\n\n    this.stream.on('end', endWhileOpening);\n    this.stream.on('error', endWhileOpening);\n\n    function succeed (ok) {\n      self.stream.removeListener('end', endWhileOpening);\n      self.stream.removeListener('error', endWhileOpening);\n      self.stream.on('error', self.onSocketError.bind(self));\n      self.stream.on('end', self.onSocketError.bind(\n        self, new Error('Unexpected close')));\n      self.on('frameError', self.onSocketError.bind(self));\n      self.acceptLoop();\n      openCallback(null, ok);\n    }\n\n    // Now kick off the handshake by prompting the server\n    this.sendProtocolHeader();\n    expect(defs.ConnectionStart, onStart);\n  }\n\n  // Closing things: AMQP has a closing handshake that applies to\n  // closing both connects and channels. As the initiating party, I send\n  // Close, then ignore all frames until I see either CloseOK --\n  // which signifies that the other party has seen the Close and shut\n  // the connection or channel down, so it's fine to free resources; or\n  // Close, which means the other party also wanted to close the\n  // whatever, and I should send CloseOk so it can free resources,\n  // then go back to waiting for the CloseOk. If I receive a Close\n  // out of the blue, I should throw away any unsent frames (they will\n  // be ignored anyway) and send CloseOk, then clean up resources. In\n  // general, Close out of the blue signals an error (or a forced\n  // closure, which may as well be an error).\n  //\n  //  RUNNING [1] --- send Close ---> Closing [2] ---> recv Close --+\n  //     |                               |                         [3]\n  //     |                               +------ send CloseOk ------+\n  //  recv Close                   recv CloseOk\n  //     |                               |\n  //     V                               V\n  //  Ended [4] ---- send CloseOk ---> Closed [5]\n  //\n  // [1] All frames accepted; getting a Close frame from the server\n  // moves to Ended; client may initiate a close by sending Close\n  // itself.\n  // [2] Client has initiated a close; only CloseOk or (simulataneously\n  // sent) Close is accepted.\n  // [3] Simultaneous close\n  // [4] Server won't send any more frames; accept no more frames, send\n  // CloseOk.\n  // [5] Fully closed, client will send no more, server will send no\n  // more. Signal 'close' or 'error'.\n  //\n  // There are two signalling mechanisms used in the API. The first is\n  // that calling `close` will return a promise, that will either\n  // resolve once the connection or channel is cleanly shut down, or\n  // will reject if the shutdown times out.\n  //\n  // The second is the 'close' and 'error' events. These are\n  // emitted as above. The events will fire *before* promises are\n  // resolved.\n  // Close the connection without even giving a reason. Typical.\n  close (closeCallback) {\n    var k = closeCallback && function () { closeCallback(null); };\n    this.closeBecause(\"Cheers, thanks\", constants.REPLY_SUCCESS, k);\n  }\n\n  // Close with a reason and a 'code'. I'm pretty sure RabbitMQ totally\n  // ignores these; maybe it logs them. The continuation will be invoked\n  // when the CloseOk has been received, and before the 'close' event.\n  closeBecause (reason, code, k) {\n    this.sendMethod(0, defs.ConnectionClose, {\n      replyText: reason,\n      replyCode: code,\n      methodId: 0, classId: 0\n    });\n    var s = stackCapture('closeBecause called: ' + reason);\n    this.toClosing(s, k);\n  }\n\n  closeWithError (reason, code, error) {\n    this.emit('error', error);\n    this.closeBecause(reason, code);\n  }\n\n  onSocketError (err) {\n    if (!this.expectSocketClose) {\n      // forestall any more calls to onSocketError, since we're signed\n      // up for `'error'` *and* `'end'`\n      this.expectSocketClose = true;\n      this.emit('error', err);\n      var s = stackCapture('Socket error');\n      this.toClosed(s, err);\n    }\n  }\n\n  // A close has been initiated. Repeat: a close has been initiated.\n  // This means we should not send more frames, anyway they will be\n  // ignored. We also have to shut down all the channels.\n  toClosing (capturedStack, k) {\n    var send = this.sendMethod.bind(this);\n\n    this.accept = function (f) {\n      if (f.id === defs.ConnectionCloseOk) {\n        if (k)\n          k();\n        var s = stackCapture('ConnectionCloseOk received');\n        this.toClosed(s, undefined);\n      }\n      else if (f.id === defs.ConnectionClose) {\n        send(0, defs.ConnectionCloseOk, {});\n      }\n      // else ignore frame\n    };\n    invalidateSend(this, 'Connection closing', capturedStack);\n  }\n\n  _closeChannels (capturedStack) {\n    for (var i = 1; i < this.channels.length; i++) {\n      var ch = this.channels[i];\n      if (ch !== null) {\n        ch.channel.toClosed(capturedStack); // %%% or with an error? not clear\n      }\n    }\n  }\n\n  // A close has been confirmed. Cease all communication.\n  toClosed (capturedStack, maybeErr) {\n    this._closeChannels(capturedStack);\n    var info = fmt('Connection closed (%s)',\n      (maybeErr) ? maybeErr.toString() : 'by client');\n    // Tidy up, invalidate enverything, dynamite the bridges.\n    invalidateSend(this, info, capturedStack);\n    this.accept = invalidOp(info, capturedStack);\n    this.close = function (cb) {\n      cb && cb(new IllegalOperationError(info, capturedStack));\n    };\n    if (this.heartbeater)\n      this.heartbeater.clear();\n    // This is certainly true now, if it wasn't before\n    this.expectSocketClose = true;\n    this.stream.end();\n    this.emit('close', maybeErr);\n  }\n\n  _updateSecret(newSecret, reason, cb) {\n    this.sendMethod(0, defs.ConnectionUpdateSecret, {\n      newSecret,\n      reason\n    });\n    this.once('update-secret-ok', cb);\n  }\n\n  // ===\n  startHeartbeater () {\n    if (this.heartbeat === 0)\n      return null;\n    else {\n      var self = this;\n      var hb = new Heart(this.heartbeat,\n        this.checkSend.bind(this),\n        this.checkRecv.bind(this));\n      hb.on('timeout', function () {\n        var hberr = new Error(\"Heartbeat timeout\");\n        self.emit('error', hberr);\n        var s = stackCapture('Heartbeat timeout');\n        self.toClosed(s, hberr);\n      });\n      hb.on('beat', function () {\n        self.sendHeartbeat();\n      });\n      return hb;\n    }\n  }\n\n  // I use an array to keep track of the channels, rather than an\n  // object. The channel identifiers are numbers, and allocated by the\n  // connection. If I try to allocate low numbers when they are\n  // available (which I do, by looking from the start of the bitset),\n  // this ought to keep the array small, and out of 'sparse array\n  // storage'. I also set entries to null, rather than deleting them, in\n  // the expectation that the next channel allocation will fill the slot\n  // again rather than growing the array. See\n  // http://www.html5rocks.com/en/tutorials/speed/v8/\n  freshChannel (channel, options) {\n    var next = this.freeChannels.nextClearBit(1);\n    if (next < 0 || next > this.channelMax)\n      throw new Error(\"No channels left to allocate\");\n    this.freeChannels.set(next);\n\n    var hwm = (options && options.highWaterMark) || DEFAULT_WRITE_HWM;\n    var writeBuffer = new PassThrough({\n      objectMode: true, highWaterMark: hwm\n    });\n    this.channels[next] = { channel: channel, buffer: writeBuffer };\n    writeBuffer.on('drain', function () {\n      channel.onBufferDrain();\n    });\n    this.muxer.pipeFrom(writeBuffer);\n    return next;\n  }\n\n  releaseChannel (channel) {\n    this.freeChannels.clear(channel);\n    var buffer = this.channels[channel].buffer;\n    buffer.end(); // will also cause it to be unpiped\n    this.channels[channel] = null;\n  }\n\n  acceptLoop () {\n    var self = this;\n\n    function go () {\n      try {\n        var f; while (f = self.recvFrame())\n          self.accept(f);\n      }\n      catch (e) {\n        self.emit('frameError', e);\n      }\n    }\n    self.stream.on('readable', go);\n    go();\n  }\n\n  step (cb) {\n    var self = this;\n    function recv () {\n      var f;\n      try {\n        f = self.recvFrame();\n      }\n      catch (e) {\n        cb(e, null);\n        return;\n      }\n      if (f)\n        cb(null, f);\n      else\n        self.stream.once('readable', recv);\n    }\n    recv();\n  }\n\n  checkSend () {\n    var check = this.sentSinceLastCheck;\n    this.sentSinceLastCheck = false;\n    return check;\n  }\n\n  checkRecv () {\n    var check = this.recvSinceLastCheck;\n    this.recvSinceLastCheck = false;\n    return check;\n  }\n\n  sendBytes (bytes) {\n    this.sentSinceLastCheck = true;\n    this.stream.write(bytes);\n  }\n\n  sendHeartbeat () {\n    return this.sendBytes(frame.HEARTBEAT_BUF);\n  }\n\n  sendMethod (channel, Method, fields) {\n    var frame = encodeMethod(Method, channel, fields);\n    this.sentSinceLastCheck = true;\n    var buffer = this.channels[channel].buffer;\n    return buffer.write(frame);\n  }\n\n  sendMessage (channel, Method, fields, Properties, props, content) {\n    if (!Buffer.isBuffer(content))\n      throw new TypeError('content is not a buffer');\n\n    var mframe = encodeMethod(Method, channel, fields);\n    var pframe = encodeProperties(Properties, channel,\n      content.length, props);\n    var buffer = this.channels[channel].buffer;\n    this.sentSinceLastCheck = true;\n\n    var methodHeaderLen = mframe.length + pframe.length;\n    var bodyLen = (content.length > 0) ?\n      content.length + FRAME_OVERHEAD : 0;\n    var allLen = methodHeaderLen + bodyLen;\n\n    if (allLen < SINGLE_CHUNK_THRESHOLD) {\n      // Use `allocUnsafe` to avoid excessive allocations and CPU usage\n      // from zeroing. The returned Buffer is not zeroed and so must be\n      // completely filled to be used safely.\n      // See https://github.com/amqp-node/amqplib/pull/695\n      var all = Buffer.allocUnsafe(allLen);\n      var offset = mframe.copy(all, 0);\n      offset += pframe.copy(all, offset);\n\n      if (bodyLen > 0)\n        makeBodyFrame(channel, content).copy(all, offset);\n      return buffer.write(all);\n    }\n    else {\n      if (methodHeaderLen < SINGLE_CHUNK_THRESHOLD) {\n        // Use `allocUnsafe` to avoid excessive allocations and CPU usage\n        // from zeroing. The returned Buffer is not zeroed and so must be\n        // completely filled to be used safely.\n        // See https://github.com/amqp-node/amqplib/pull/695\n        var both = Buffer.allocUnsafe(methodHeaderLen);\n        var offset = mframe.copy(both, 0);\n        pframe.copy(both, offset);\n        buffer.write(both);\n      }\n      else {\n        buffer.write(mframe);\n        buffer.write(pframe);\n      }\n      return this.sendContent(channel, content);\n    }\n  }\n\n  sendContent (channel, body) {\n    if (!Buffer.isBuffer(body)) {\n      throw new TypeError(fmt(\"Expected buffer; got %s\", body));\n    }\n    var writeResult = true;\n    var buffer = this.channels[channel].buffer;\n\n    var maxBody = this.frameMax - FRAME_OVERHEAD;\n\n    for (var offset = 0; offset < body.length; offset += maxBody) {\n      var end = offset + maxBody;\n      var slice = (end > body.length) ? body.subarray(offset) : body.subarray(offset, end);\n      var bodyFrame = makeBodyFrame(channel, slice);\n      writeResult = buffer.write(bodyFrame);\n    }\n    this.sentSinceLastCheck = true;\n    return writeResult;\n  }\n\n  recvFrame () {\n    // %%% identifying invariants might help here?\n    var frame = parseFrame(this.rest, this.frameMax);\n\n    if (!frame) {\n      var incoming = this.stream.read();\n      if (incoming === null) {\n        return false;\n      }\n      else {\n        this.recvSinceLastCheck = true;\n        this.rest = Buffer.concat([this.rest, incoming]);\n        return this.recvFrame();\n      }\n    }\n    else {\n      this.rest = frame.rest;\n      return decodeFrame(frame);\n    }\n  }\n}\n\n// Usual frame accept mode\nfunction mainAccept(frame) {\n  var rec = this.channels[frame.channel];\n  if (rec) { return rec.channel.accept(frame); }\n  // NB CHANNEL_ERROR may not be right, but I don't know what is ..\n  else\n    this.closeWithError(\n      fmt('Frame on unknown channel %d', frame.channel),\n      constants.CHANNEL_ERROR,\n      new Error(fmt(\"Frame on unknown channel: %s\",\n                    inspect(frame, false))));\n}\n\n// Handle anything that comes through on channel 0, that's the\n// connection control channel. This is only used once mainAccept is\n// installed as the frame handler, after the opening handshake.\nfunction channel0(connection) {\n  return function(f) {\n    // Once we get a 'close', we know 1. we'll get no more frames, and\n    // 2. anything we send except close, or close-ok, will be\n    // ignored. If we already sent 'close', this won't be invoked since\n    // we're already in closing mode; if we didn't well we're not going\n    // to send it now are we.\n    if (f === HEARTBEAT); // ignore; it's already counted as activity\n                          // on the socket, which is its purpose\n    else if (f.id === defs.ConnectionClose) {\n      // Oh. OK. I guess we're done here then.\n      connection.sendMethod(0, defs.ConnectionCloseOk, {});\n      var emsg = fmt('Connection closed: %s', closeMsg(f));\n      var s = stackCapture(emsg);\n      var e = new Error(emsg);\n      e.code = f.fields.replyCode;\n      if (isFatalError(e)) {\n        connection.emit('error', e);\n      }\n      connection.toClosed(s, e);\n    }\n    else if (f.id === defs.ConnectionBlocked) {\n      connection.emit('blocked', f.fields.reason);\n    }\n    else if (f.id === defs.ConnectionUnblocked) {\n      connection.emit('unblocked');\n    }\n    else if (f.id === defs.ConnectionUpdateSecretOk) {\n      connection.emit('update-secret-ok');\n    }\n    else {\n      connection.closeWithError(\n        fmt(\"Unexpected frame on channel 0\"),\n        constants.UNEXPECTED_FRAME,\n        new Error(fmt(\"Unexpected frame on channel 0: %s\",\n                      inspect(f, false))));\n    }\n  };\n}\n\nfunction invalidOp(msg, stack) {\n  return function() {\n    throw new IllegalOperationError(msg, stack);\n  };\n}\n\nfunction invalidateSend(conn, msg, stack) {\n  conn.sendMethod = conn.sendContent = conn.sendMessage =\n    invalidOp(msg, stack);\n}\n\nvar encodeMethod = defs.encodeMethod;\nvar encodeProperties = defs.encodeProperties;\n\nvar FRAME_OVERHEAD = defs.FRAME_OVERHEAD;\nvar makeBodyFrame = frame.makeBodyFrame;\n\nvar parseFrame = frame.parseFrame;\nvar decodeFrame = frame.decodeFrame;\n\nfunction wrapStream(s) {\n  if (s instanceof Duplex) return s;\n  else {\n    var ws = new Duplex();\n    ws.wrap(s); //wraps the readable side of things\n    ws._write = function(chunk, encoding, callback) {\n      return s.write(chunk, encoding, callback);\n    };\n    return ws;\n  }\n}\n\nfunction isFatalError(error) {\n  switch (error && error.code) {\n  case defs.constants.CONNECTION_FORCED:\n  case defs.constants.REPLY_SUCCESS:\n    return false;\n  default:\n    return true;\n  }\n}\n\nmodule.exports.Connection = Connection;\nmodule.exports.isFatalError = isFatalError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/connection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/credentials.js":
/*!*************************************************!*\
  !*** ./node_modules/amqplib/lib/credentials.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("//\n//\n//\n\n// Different kind of credentials that can be supplied when opening a\n// connection, corresponding to SASL mechanisms There's only two\n// useful mechanisms that RabbitMQ implements:\n//  * PLAIN (send username and password in the plain)\n//  * EXTERNAL (assume the server will figure out who you are from\n//    context, i.e., your SSL certificate)\nvar codec = __webpack_require__(/*! ./codec */ \"(rsc)/./node_modules/amqplib/lib/codec.js\")\n\nmodule.exports.plain = function(user, passwd) {\n  return {\n    mechanism: 'PLAIN',\n    response: function() {\n      return Buffer.from(['', user, passwd].join(String.fromCharCode(0)))\n    },\n    username: user,\n    password: passwd\n  }\n}\n\nmodule.exports.amqplain = function(user, passwd) {\n  return {\n    mechanism: 'AMQPLAIN',\n    response: function() {\n      const buffer = Buffer.alloc(16384);\n      const size = codec.encodeTable(buffer, { LOGIN: user, PASSWORD: passwd}, 0);\n      return buffer.subarray(4, size);\n    },\n    username: user,\n    password: passwd\n  }\n}\n\nmodule.exports.external = function() {\n  return {\n    mechanism: 'EXTERNAL',\n    response: function() { return Buffer.from(''); }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvY3JlZGVudGlhbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQU8sQ0FBQywwREFBUzs7QUFFN0Isb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyw4QkFBOEI7QUFDN0U7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYjIvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvY3JlZGVudGlhbHMuanM/ZmJmYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy9cbi8vXG5cbi8vIERpZmZlcmVudCBraW5kIG9mIGNyZWRlbnRpYWxzIHRoYXQgY2FuIGJlIHN1cHBsaWVkIHdoZW4gb3BlbmluZyBhXG4vLyBjb25uZWN0aW9uLCBjb3JyZXNwb25kaW5nIHRvIFNBU0wgbWVjaGFuaXNtcyBUaGVyZSdzIG9ubHkgdHdvXG4vLyB1c2VmdWwgbWVjaGFuaXNtcyB0aGF0IFJhYmJpdE1RIGltcGxlbWVudHM6XG4vLyAgKiBQTEFJTiAoc2VuZCB1c2VybmFtZSBhbmQgcGFzc3dvcmQgaW4gdGhlIHBsYWluKVxuLy8gICogRVhURVJOQUwgKGFzc3VtZSB0aGUgc2VydmVyIHdpbGwgZmlndXJlIG91dCB3aG8geW91IGFyZSBmcm9tXG4vLyAgICBjb250ZXh0LCBpLmUuLCB5b3VyIFNTTCBjZXJ0aWZpY2F0ZSlcbnZhciBjb2RlYyA9IHJlcXVpcmUoJy4vY29kZWMnKVxuXG5tb2R1bGUuZXhwb3J0cy5wbGFpbiA9IGZ1bmN0aW9uKHVzZXIsIHBhc3N3ZCkge1xuICByZXR1cm4ge1xuICAgIG1lY2hhbmlzbTogJ1BMQUlOJyxcbiAgICByZXNwb25zZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gQnVmZmVyLmZyb20oWycnLCB1c2VyLCBwYXNzd2RdLmpvaW4oU3RyaW5nLmZyb21DaGFyQ29kZSgwKSkpXG4gICAgfSxcbiAgICB1c2VybmFtZTogdXNlcixcbiAgICBwYXNzd29yZDogcGFzc3dkXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuYW1xcGxhaW4gPSBmdW5jdGlvbih1c2VyLCBwYXNzd2QpIHtcbiAgcmV0dXJuIHtcbiAgICBtZWNoYW5pc206ICdBTVFQTEFJTicsXG4gICAgcmVzcG9uc2U6IGZ1bmN0aW9uKCkge1xuICAgICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmFsbG9jKDE2Mzg0KTtcbiAgICAgIGNvbnN0IHNpemUgPSBjb2RlYy5lbmNvZGVUYWJsZShidWZmZXIsIHsgTE9HSU46IHVzZXIsIFBBU1NXT1JEOiBwYXNzd2R9LCAwKTtcbiAgICAgIHJldHVybiBidWZmZXIuc3ViYXJyYXkoNCwgc2l6ZSk7XG4gICAgfSxcbiAgICB1c2VybmFtZTogdXNlcixcbiAgICBwYXNzd29yZDogcGFzc3dkXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMuZXh0ZXJuYWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBtZWNoYW5pc206ICdFWFRFUk5BTCcsXG4gICAgcmVzcG9uc2U6IGZ1bmN0aW9uKCkgeyByZXR1cm4gQnVmZmVyLmZyb20oJycpOyB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/credentials.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/defs.js":
/*!******************************************!*\
  !*** ./node_modules/amqplib/lib/defs.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/** @preserve This file is generated by the script\n * ../bin/generate-defs.js, which is not in general included in a\n * distribution, but is available in the source repository e.g. at\n * https://github.com/squaremo/amqp.node/\n */\n\n\nfunction decodeBasicQos(buffer) {\n  var val, offset = 0, fields = {\n    prefetchSize: void 0,\n    prefetchCount: void 0,\n    global: void 0\n  };\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.prefetchSize = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.prefetchCount = val;\n  val = !!(1 & buffer[offset]);\n  fields.global = val;\n  return fields;\n}\n\nfunction encodeBasicQos(channel, fields) {\n  var offset = 0, val = null, bits = 0, buffer = Buffer.alloc(19);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932170, 7);\n  offset = 11;\n  val = fields.prefetchSize;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'prefetchSize' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  val = fields.prefetchCount;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'prefetchCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.global;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicQosOk(buffer) {\n  return {};\n}\n\nfunction encodeBasicQosOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932171, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicConsume(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    consumerTag: void 0,\n    noLocal: void 0,\n    noAck: void 0,\n    exclusive: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.consumerTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.noLocal = val;\n  val = !!(2 & buffer[offset]);\n  fields.noAck = val;\n  val = !!(4 & buffer[offset]);\n  fields.exclusive = val;\n  val = !!(8 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.subarray(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeBasicConsume(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  val = fields.consumerTag;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)\");\n  var consumerTag_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += consumerTag_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932180, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.consumerTag;\n  void 0 === val && (val = \"\");\n  buffer[offset] = consumerTag_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += consumerTag_len;\n  val = fields.noLocal;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.noAck;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  val = fields.exclusive;\n  void 0 === val && (val = !1);\n  val && (bits += 4);\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 8);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicConsumeOk(buffer) {\n  var val, len, offset = 0, fields = {\n    consumerTag: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.consumerTag = val;\n  return fields;\n}\n\nfunction encodeBasicConsumeOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.consumerTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'consumerTag'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)\");\n  var consumerTag_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += consumerTag_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932181, 7);\n  offset = 11;\n  val = fields.consumerTag;\n  void 0 === val && (val = void 0);\n  buffer[offset] = consumerTag_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += consumerTag_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicCancel(buffer) {\n  var val, len, offset = 0, fields = {\n    consumerTag: void 0,\n    nowait: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.consumerTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  return fields;\n}\n\nfunction encodeBasicCancel(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.consumerTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'consumerTag'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)\");\n  var consumerTag_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += consumerTag_len;\n  var buffer = Buffer.alloc(14 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932190, 7);\n  offset = 11;\n  val = fields.consumerTag;\n  void 0 === val && (val = void 0);\n  buffer[offset] = consumerTag_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += consumerTag_len;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicCancelOk(buffer) {\n  var val, len, offset = 0, fields = {\n    consumerTag: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.consumerTag = val;\n  return fields;\n}\n\nfunction encodeBasicCancelOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.consumerTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'consumerTag'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)\");\n  var consumerTag_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += consumerTag_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932191, 7);\n  offset = 11;\n  val = fields.consumerTag;\n  void 0 === val && (val = void 0);\n  buffer[offset] = consumerTag_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += consumerTag_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicPublish(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    exchange: void 0,\n    routingKey: void 0,\n    mandatory: void 0,\n    immediate: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  val = !!(1 & buffer[offset]);\n  fields.mandatory = val;\n  val = !!(2 & buffer[offset]);\n  fields.immediate = val;\n  return fields;\n}\n\nfunction encodeBasicPublish(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.exchange;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932200, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.exchange;\n  void 0 === val && (val = \"\");\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = \"\");\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  val = fields.mandatory;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.immediate;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicReturn(buffer) {\n  var val, len, offset = 0, fields = {\n    replyCode: void 0,\n    replyText: void 0,\n    exchange: void 0,\n    routingKey: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.replyCode = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.replyText = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  return fields;\n}\n\nfunction encodeBasicReturn(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.replyText;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'replyText' is the wrong type; must be a string (up to 255 chars)\");\n  var replyText_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += replyText_len;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'routingKey'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932210, 7);\n  offset = 11;\n  val = fields.replyCode;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'replyCode'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'replyCode' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.replyText;\n  void 0 === val && (val = \"\");\n  buffer[offset] = replyText_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += replyText_len;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = void 0);\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicDeliver(buffer) {\n  var val, len, offset = 0, fields = {\n    consumerTag: void 0,\n    deliveryTag: void 0,\n    redelivered: void 0,\n    exchange: void 0,\n    routingKey: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.consumerTag = val;\n  val = ints.readUInt64BE(buffer, offset);\n  offset += 8;\n  fields.deliveryTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.redelivered = val;\n  offset++;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  return fields;\n}\n\nfunction encodeBasicDeliver(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.consumerTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'consumerTag'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'consumerTag' is the wrong type; must be a string (up to 255 chars)\");\n  var consumerTag_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += consumerTag_len;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'routingKey'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  var buffer = Buffer.alloc(24 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932220, 7);\n  offset = 11;\n  val = fields.consumerTag;\n  void 0 === val && (val = void 0);\n  buffer[offset] = consumerTag_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += consumerTag_len;\n  val = fields.deliveryTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'deliveryTag'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryTag' is the wrong type; must be a number (but not NaN)\");\n  ints.writeUInt64BE(buffer, val, offset);\n  offset += 8;\n  val = fields.redelivered;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = void 0);\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicGet(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    noAck: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  val = !!(1 & buffer[offset]);\n  fields.noAck = val;\n  return fields;\n}\n\nfunction encodeBasicGet(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932230, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.noAck;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicGetOk(buffer) {\n  var val, len, offset = 0, fields = {\n    deliveryTag: void 0,\n    redelivered: void 0,\n    exchange: void 0,\n    routingKey: void 0,\n    messageCount: void 0\n  };\n  val = ints.readUInt64BE(buffer, offset);\n  offset += 8;\n  fields.deliveryTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.redelivered = val;\n  offset++;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.messageCount = val;\n  return fields;\n}\n\nfunction encodeBasicGetOk(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'routingKey'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  var buffer = Buffer.alloc(27 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932231, 7);\n  offset = 11;\n  val = fields.deliveryTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'deliveryTag'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryTag' is the wrong type; must be a number (but not NaN)\");\n  ints.writeUInt64BE(buffer, val, offset);\n  offset += 8;\n  val = fields.redelivered;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = void 0);\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  val = fields.messageCount;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'messageCount'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'messageCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicGetEmpty(buffer) {\n  var val, len, offset = 0, fields = {\n    clusterId: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.clusterId = val;\n  return fields;\n}\n\nfunction encodeBasicGetEmpty(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.clusterId;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'clusterId' is the wrong type; must be a string (up to 255 chars)\");\n  var clusterId_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += clusterId_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932232, 7);\n  offset = 11;\n  val = fields.clusterId;\n  void 0 === val && (val = \"\");\n  buffer[offset] = clusterId_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += clusterId_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicAck(buffer) {\n  var val, offset = 0, fields = {\n    deliveryTag: void 0,\n    multiple: void 0\n  };\n  val = ints.readUInt64BE(buffer, offset);\n  offset += 8;\n  fields.deliveryTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.multiple = val;\n  return fields;\n}\n\nfunction encodeBasicAck(channel, fields) {\n  var offset = 0, val = null, bits = 0, buffer = Buffer.alloc(21);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932240, 7);\n  offset = 11;\n  val = fields.deliveryTag;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryTag' is the wrong type; must be a number (but not NaN)\");\n  ints.writeUInt64BE(buffer, val, offset);\n  offset += 8;\n  val = fields.multiple;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicReject(buffer) {\n  var val, offset = 0, fields = {\n    deliveryTag: void 0,\n    requeue: void 0\n  };\n  val = ints.readUInt64BE(buffer, offset);\n  offset += 8;\n  fields.deliveryTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.requeue = val;\n  return fields;\n}\n\nfunction encodeBasicReject(channel, fields) {\n  var offset = 0, val = null, bits = 0, buffer = Buffer.alloc(21);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932250, 7);\n  offset = 11;\n  val = fields.deliveryTag;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'deliveryTag'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryTag' is the wrong type; must be a number (but not NaN)\");\n  ints.writeUInt64BE(buffer, val, offset);\n  offset += 8;\n  val = fields.requeue;\n  void 0 === val && (val = !0);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicRecoverAsync(buffer) {\n  var val, fields = {\n    requeue: void 0\n  };\n  val = !!(1 & buffer[0]);\n  fields.requeue = val;\n  return fields;\n}\n\nfunction encodeBasicRecoverAsync(channel, fields) {\n  var offset = 0, val = null, bits = 0, buffer = Buffer.alloc(13);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932260, 7);\n  offset = 11;\n  val = fields.requeue;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicRecover(buffer) {\n  var val, fields = {\n    requeue: void 0\n  };\n  val = !!(1 & buffer[0]);\n  fields.requeue = val;\n  return fields;\n}\n\nfunction encodeBasicRecover(channel, fields) {\n  var offset = 0, val = null, bits = 0, buffer = Buffer.alloc(13);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932270, 7);\n  offset = 11;\n  val = fields.requeue;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicRecoverOk(buffer) {\n  return {};\n}\n\nfunction encodeBasicRecoverOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932271, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeBasicNack(buffer) {\n  var val, offset = 0, fields = {\n    deliveryTag: void 0,\n    multiple: void 0,\n    requeue: void 0\n  };\n  val = ints.readUInt64BE(buffer, offset);\n  offset += 8;\n  fields.deliveryTag = val;\n  val = !!(1 & buffer[offset]);\n  fields.multiple = val;\n  val = !!(2 & buffer[offset]);\n  fields.requeue = val;\n  return fields;\n}\n\nfunction encodeBasicNack(channel, fields) {\n  var offset = 0, val = null, bits = 0, buffer = Buffer.alloc(21);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932280, 7);\n  offset = 11;\n  val = fields.deliveryTag;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryTag' is the wrong type; must be a number (but not NaN)\");\n  ints.writeUInt64BE(buffer, val, offset);\n  offset += 8;\n  val = fields.multiple;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.requeue;\n  void 0 === val && (val = !0);\n  val && (bits += 2);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionStart(buffer) {\n  var val, len, offset = 0, fields = {\n    versionMajor: void 0,\n    versionMinor: void 0,\n    serverProperties: void 0,\n    mechanisms: void 0,\n    locales: void 0\n  };\n  val = buffer[offset];\n  offset++;\n  fields.versionMajor = val;\n  val = buffer[offset];\n  offset++;\n  fields.versionMinor = val;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.subarray(offset, offset + len));\n  offset += len;\n  fields.serverProperties = val;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.subarray(offset, offset + len);\n  offset += len;\n  fields.mechanisms = val;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.subarray(offset, offset + len);\n  offset += len;\n  fields.locales = val;\n  return fields;\n}\n\nfunction encodeConnectionStart(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0, scratchOffset = 0;\n  val = fields.serverProperties;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'serverProperties'\");\n  if (\"object\" != typeof val) throw new TypeError(\"Field 'serverProperties' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var serverProperties_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += serverProperties_encoded.length;\n  val = fields.mechanisms;\n  if (void 0 === val) val = Buffer.from(\"PLAIN\"); else if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'mechanisms' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  val = fields.locales;\n  if (void 0 === val) val = Buffer.from(\"en_US\"); else if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'locales' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  var buffer = Buffer.alloc(22 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655370, 7);\n  offset = 11;\n  val = fields.versionMajor;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'versionMajor' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt8(val, offset);\n  offset++;\n  val = fields.versionMinor;\n  if (void 0 === val) val = 9; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'versionMinor' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt8(val, offset);\n  offset++;\n  offset += serverProperties_encoded.copy(buffer, offset);\n  val = fields.mechanisms;\n  void 0 === val && (val = Buffer.from(\"PLAIN\"));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  val = fields.locales;\n  void 0 === val && (val = Buffer.from(\"en_US\"));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionStartOk(buffer) {\n  var val, len, offset = 0, fields = {\n    clientProperties: void 0,\n    mechanism: void 0,\n    response: void 0,\n    locale: void 0\n  };\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.subarray(offset, offset + len));\n  offset += len;\n  fields.clientProperties = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.mechanism = val;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.subarray(offset, offset + len);\n  offset += len;\n  fields.response = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.locale = val;\n  return fields;\n}\n\nfunction encodeConnectionStartOk(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0, scratchOffset = 0;\n  val = fields.clientProperties;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'clientProperties'\");\n  if (\"object\" != typeof val) throw new TypeError(\"Field 'clientProperties' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var clientProperties_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += clientProperties_encoded.length;\n  val = fields.mechanism;\n  if (void 0 === val) val = \"PLAIN\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'mechanism' is the wrong type; must be a string (up to 255 chars)\");\n  var mechanism_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += mechanism_len;\n  val = fields.response;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'response'\");\n  if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'response' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  val = fields.locale;\n  if (void 0 === val) val = \"en_US\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'locale' is the wrong type; must be a string (up to 255 chars)\");\n  var locale_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += locale_len;\n  var buffer = Buffer.alloc(18 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655371, 7);\n  offset = 11;\n  offset += clientProperties_encoded.copy(buffer, offset);\n  val = fields.mechanism;\n  void 0 === val && (val = \"PLAIN\");\n  buffer[offset] = mechanism_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += mechanism_len;\n  val = fields.response;\n  void 0 === val && (val = Buffer.from(void 0));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  val = fields.locale;\n  void 0 === val && (val = \"en_US\");\n  buffer[offset] = locale_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += locale_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionSecure(buffer) {\n  var val, len, offset = 0, fields = {\n    challenge: void 0\n  };\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.subarray(offset, offset + len);\n  offset += len;\n  fields.challenge = val;\n  return fields;\n}\n\nfunction encodeConnectionSecure(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0;\n  val = fields.challenge;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'challenge'\");\n  if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'challenge' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655380, 7);\n  offset = 11;\n  val = fields.challenge;\n  void 0 === val && (val = Buffer.from(void 0));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionSecureOk(buffer) {\n  var val, len, offset = 0, fields = {\n    response: void 0\n  };\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.subarray(offset, offset + len);\n  offset += len;\n  fields.response = val;\n  return fields;\n}\n\nfunction encodeConnectionSecureOk(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0;\n  val = fields.response;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'response'\");\n  if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'response' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655381, 7);\n  offset = 11;\n  val = fields.response;\n  void 0 === val && (val = Buffer.from(void 0));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionTune(buffer) {\n  var val, offset = 0, fields = {\n    channelMax: void 0,\n    frameMax: void 0,\n    heartbeat: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.channelMax = val;\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.frameMax = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.heartbeat = val;\n  return fields;\n}\n\nfunction encodeConnectionTune(channel, fields) {\n  var offset = 0, val = null, buffer = Buffer.alloc(20);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655390, 7);\n  offset = 11;\n  val = fields.channelMax;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'channelMax' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.frameMax;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'frameMax' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  val = fields.heartbeat;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'heartbeat' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionTuneOk(buffer) {\n  var val, offset = 0, fields = {\n    channelMax: void 0,\n    frameMax: void 0,\n    heartbeat: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.channelMax = val;\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.frameMax = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.heartbeat = val;\n  return fields;\n}\n\nfunction encodeConnectionTuneOk(channel, fields) {\n  var offset = 0, val = null, buffer = Buffer.alloc(20);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655391, 7);\n  offset = 11;\n  val = fields.channelMax;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'channelMax' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.frameMax;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'frameMax' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  val = fields.heartbeat;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'heartbeat' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionOpen(buffer) {\n  var val, len, offset = 0, fields = {\n    virtualHost: void 0,\n    capabilities: void 0,\n    insist: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.virtualHost = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.capabilities = val;\n  val = !!(1 & buffer[offset]);\n  fields.insist = val;\n  return fields;\n}\n\nfunction encodeConnectionOpen(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.virtualHost;\n  if (void 0 === val) val = \"/\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'virtualHost' is the wrong type; must be a string (up to 255 chars)\");\n  var virtualHost_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += virtualHost_len;\n  val = fields.capabilities;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'capabilities' is the wrong type; must be a string (up to 255 chars)\");\n  var capabilities_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += capabilities_len;\n  var buffer = Buffer.alloc(15 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655400, 7);\n  offset = 11;\n  val = fields.virtualHost;\n  void 0 === val && (val = \"/\");\n  buffer[offset] = virtualHost_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += virtualHost_len;\n  val = fields.capabilities;\n  void 0 === val && (val = \"\");\n  buffer[offset] = capabilities_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += capabilities_len;\n  val = fields.insist;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionOpenOk(buffer) {\n  var val, len, offset = 0, fields = {\n    knownHosts: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.knownHosts = val;\n  return fields;\n}\n\nfunction encodeConnectionOpenOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.knownHosts;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'knownHosts' is the wrong type; must be a string (up to 255 chars)\");\n  var knownHosts_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += knownHosts_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655401, 7);\n  offset = 11;\n  val = fields.knownHosts;\n  void 0 === val && (val = \"\");\n  buffer[offset] = knownHosts_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += knownHosts_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionClose(buffer) {\n  var val, len, offset = 0, fields = {\n    replyCode: void 0,\n    replyText: void 0,\n    classId: void 0,\n    methodId: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.replyCode = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.replyText = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.classId = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.methodId = val;\n  return fields;\n}\n\nfunction encodeConnectionClose(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.replyText;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'replyText' is the wrong type; must be a string (up to 255 chars)\");\n  var replyText_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += replyText_len;\n  var buffer = Buffer.alloc(19 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655410, 7);\n  offset = 11;\n  val = fields.replyCode;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'replyCode'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'replyCode' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.replyText;\n  void 0 === val && (val = \"\");\n  buffer[offset] = replyText_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += replyText_len;\n  val = fields.classId;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'classId'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'classId' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.methodId;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'methodId'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'methodId' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionCloseOk(buffer) {\n  return {};\n}\n\nfunction encodeConnectionCloseOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655411, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionBlocked(buffer) {\n  var val, len, offset = 0, fields = {\n    reason: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.reason = val;\n  return fields;\n}\n\nfunction encodeConnectionBlocked(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.reason;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'reason' is the wrong type; must be a string (up to 255 chars)\");\n  var reason_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += reason_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655420, 7);\n  offset = 11;\n  val = fields.reason;\n  void 0 === val && (val = \"\");\n  buffer[offset] = reason_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += reason_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionUnblocked(buffer) {\n  return {};\n}\n\nfunction encodeConnectionUnblocked(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655421, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionUpdateSecret(buffer) {\n  var val, len, offset = 0, fields = {\n    newSecret: void 0,\n    reason: void 0\n  };\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.subarray(offset, offset + len);\n  offset += len;\n  fields.newSecret = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.reason = val;\n  return fields;\n}\n\nfunction encodeConnectionUpdateSecret(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0;\n  val = fields.newSecret;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'newSecret'\");\n  if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'newSecret' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  val = fields.reason;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'reason'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'reason' is the wrong type; must be a string (up to 255 chars)\");\n  var reason_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += reason_len;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655430, 7);\n  offset = 11;\n  val = fields.newSecret;\n  void 0 === val && (val = Buffer.from(void 0));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  val = fields.reason;\n  void 0 === val && (val = void 0);\n  buffer[offset] = reason_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += reason_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConnectionUpdateSecretOk(buffer) {\n  return {};\n}\n\nfunction encodeConnectionUpdateSecretOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(655431, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelOpen(buffer) {\n  var val, len, offset = 0, fields = {\n    outOfBand: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.outOfBand = val;\n  return fields;\n}\n\nfunction encodeChannelOpen(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.outOfBand;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'outOfBand' is the wrong type; must be a string (up to 255 chars)\");\n  var outOfBand_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += outOfBand_len;\n  var buffer = Buffer.alloc(13 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310730, 7);\n  offset = 11;\n  val = fields.outOfBand;\n  void 0 === val && (val = \"\");\n  buffer[offset] = outOfBand_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += outOfBand_len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelOpenOk(buffer) {\n  var val, len, offset = 0, fields = {\n    channelId: void 0\n  };\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = buffer.subarray(offset, offset + len);\n  offset += len;\n  fields.channelId = val;\n  return fields;\n}\n\nfunction encodeChannelOpenOk(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0;\n  val = fields.channelId;\n  if (void 0 === val) val = Buffer.from(\"\"); else if (!Buffer.isBuffer(val)) throw new TypeError(\"Field 'channelId' is the wrong type; must be a Buffer\");\n  varyingSize += val.length;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310731, 7);\n  offset = 11;\n  val = fields.channelId;\n  void 0 === val && (val = Buffer.from(\"\"));\n  len = val.length;\n  buffer.writeUInt32BE(len, offset);\n  offset += 4;\n  val.copy(buffer, offset);\n  offset += len;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelFlow(buffer) {\n  var val, fields = {\n    active: void 0\n  };\n  val = !!(1 & buffer[0]);\n  fields.active = val;\n  return fields;\n}\n\nfunction encodeChannelFlow(channel, fields) {\n  var offset = 0, val = null, bits = 0, buffer = Buffer.alloc(13);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310740, 7);\n  offset = 11;\n  val = fields.active;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'active'\");\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelFlowOk(buffer) {\n  var val, fields = {\n    active: void 0\n  };\n  val = !!(1 & buffer[0]);\n  fields.active = val;\n  return fields;\n}\n\nfunction encodeChannelFlowOk(channel, fields) {\n  var offset = 0, val = null, bits = 0, buffer = Buffer.alloc(13);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310741, 7);\n  offset = 11;\n  val = fields.active;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'active'\");\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelClose(buffer) {\n  var val, len, offset = 0, fields = {\n    replyCode: void 0,\n    replyText: void 0,\n    classId: void 0,\n    methodId: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.replyCode = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.replyText = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.classId = val;\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.methodId = val;\n  return fields;\n}\n\nfunction encodeChannelClose(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.replyText;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'replyText' is the wrong type; must be a string (up to 255 chars)\");\n  var replyText_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += replyText_len;\n  var buffer = Buffer.alloc(19 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310760, 7);\n  offset = 11;\n  val = fields.replyCode;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'replyCode'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'replyCode' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.replyText;\n  void 0 === val && (val = \"\");\n  buffer[offset] = replyText_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += replyText_len;\n  val = fields.classId;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'classId'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'classId' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.methodId;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'methodId'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'methodId' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeChannelCloseOk(buffer) {\n  return {};\n}\n\nfunction encodeChannelCloseOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1310761, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeAccessRequest(buffer) {\n  var val, len, offset = 0, fields = {\n    realm: void 0,\n    exclusive: void 0,\n    passive: void 0,\n    active: void 0,\n    write: void 0,\n    read: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.realm = val;\n  val = !!(1 & buffer[offset]);\n  fields.exclusive = val;\n  val = !!(2 & buffer[offset]);\n  fields.passive = val;\n  val = !!(4 & buffer[offset]);\n  fields.active = val;\n  val = !!(8 & buffer[offset]);\n  fields.write = val;\n  val = !!(16 & buffer[offset]);\n  fields.read = val;\n  return fields;\n}\n\nfunction encodeAccessRequest(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.realm;\n  if (void 0 === val) val = \"/data\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'realm' is the wrong type; must be a string (up to 255 chars)\");\n  var realm_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += realm_len;\n  var buffer = Buffer.alloc(14 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1966090, 7);\n  offset = 11;\n  val = fields.realm;\n  void 0 === val && (val = \"/data\");\n  buffer[offset] = realm_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += realm_len;\n  val = fields.exclusive;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.passive;\n  void 0 === val && (val = !0);\n  val && (bits += 2);\n  val = fields.active;\n  void 0 === val && (val = !0);\n  val && (bits += 4);\n  val = fields.write;\n  void 0 === val && (val = !0);\n  val && (bits += 8);\n  val = fields.read;\n  void 0 === val && (val = !0);\n  val && (bits += 16);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeAccessRequestOk(buffer) {\n  var val, offset = 0, fields = {\n    ticket: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  return fields;\n}\n\nfunction encodeAccessRequestOk(channel, fields) {\n  var offset = 0, val = null, buffer = Buffer.alloc(14);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(1966091, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 1; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeDeclare(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    exchange: void 0,\n    type: void 0,\n    passive: void 0,\n    durable: void 0,\n    autoDelete: void 0,\n    internal: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.type = val;\n  val = !!(1 & buffer[offset]);\n  fields.passive = val;\n  val = !!(2 & buffer[offset]);\n  fields.durable = val;\n  val = !!(4 & buffer[offset]);\n  fields.autoDelete = val;\n  val = !!(8 & buffer[offset]);\n  fields.internal = val;\n  val = !!(16 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.subarray(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeExchangeDeclare(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.type;\n  if (void 0 === val) val = \"direct\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'type' is the wrong type; must be a string (up to 255 chars)\");\n  var type_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += type_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621450, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.type;\n  void 0 === val && (val = \"direct\");\n  buffer[offset] = type_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += type_len;\n  val = fields.passive;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.durable;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  val = fields.autoDelete;\n  void 0 === val && (val = !1);\n  val && (bits += 4);\n  val = fields.internal;\n  void 0 === val && (val = !1);\n  val && (bits += 8);\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 16);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeDeclareOk(buffer) {\n  return {};\n}\n\nfunction encodeExchangeDeclareOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621451, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeDelete(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    exchange: void 0,\n    ifUnused: void 0,\n    nowait: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  val = !!(1 & buffer[offset]);\n  fields.ifUnused = val;\n  val = !!(2 & buffer[offset]);\n  fields.nowait = val;\n  return fields;\n}\n\nfunction encodeExchangeDelete(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621460, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.ifUnused;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeDeleteOk(buffer) {\n  return {};\n}\n\nfunction encodeExchangeDeleteOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621461, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeBind(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    destination: void 0,\n    source: void 0,\n    routingKey: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.destination = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.source = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.subarray(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeExchangeBind(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.destination;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'destination'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'destination' is the wrong type; must be a string (up to 255 chars)\");\n  var destination_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += destination_len;\n  val = fields.source;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'source'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'source' is the wrong type; must be a string (up to 255 chars)\");\n  var source_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += source_len;\n  val = fields.routingKey;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(18 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621470, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.destination;\n  void 0 === val && (val = void 0);\n  buffer[offset] = destination_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += destination_len;\n  val = fields.source;\n  void 0 === val && (val = void 0);\n  buffer[offset] = source_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += source_len;\n  val = fields.routingKey;\n  void 0 === val && (val = \"\");\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeBindOk(buffer) {\n  return {};\n}\n\nfunction encodeExchangeBindOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621471, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeUnbind(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    destination: void 0,\n    source: void 0,\n    routingKey: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.destination = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.source = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.subarray(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeExchangeUnbind(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.destination;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'destination'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'destination' is the wrong type; must be a string (up to 255 chars)\");\n  var destination_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += destination_len;\n  val = fields.source;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'source'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'source' is the wrong type; must be a string (up to 255 chars)\");\n  var source_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += source_len;\n  val = fields.routingKey;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(18 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621480, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.destination;\n  void 0 === val && (val = void 0);\n  buffer[offset] = destination_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += destination_len;\n  val = fields.source;\n  void 0 === val && (val = void 0);\n  buffer[offset] = source_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += source_len;\n  val = fields.routingKey;\n  void 0 === val && (val = \"\");\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeExchangeUnbindOk(buffer) {\n  return {};\n}\n\nfunction encodeExchangeUnbindOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(2621491, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueDeclare(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    passive: void 0,\n    durable: void 0,\n    exclusive: void 0,\n    autoDelete: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  val = !!(1 & buffer[offset]);\n  fields.passive = val;\n  val = !!(2 & buffer[offset]);\n  fields.durable = val;\n  val = !!(4 & buffer[offset]);\n  fields.exclusive = val;\n  val = !!(8 & buffer[offset]);\n  fields.autoDelete = val;\n  val = !!(16 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.subarray(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeQueueDeclare(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276810, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.passive;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.durable;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  val = fields.exclusive;\n  void 0 === val && (val = !1);\n  val && (bits += 4);\n  val = fields.autoDelete;\n  void 0 === val && (val = !1);\n  val && (bits += 8);\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 16);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueDeclareOk(buffer) {\n  var val, len, offset = 0, fields = {\n    queue: void 0,\n    messageCount: void 0,\n    consumerCount: void 0\n  };\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.messageCount = val;\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.consumerCount = val;\n  return fields;\n}\n\nfunction encodeQueueDeclareOk(channel, fields) {\n  var offset = 0, val = null, varyingSize = 0;\n  val = fields.queue;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'queue'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  var buffer = Buffer.alloc(21 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276811, 7);\n  offset = 11;\n  val = fields.queue;\n  void 0 === val && (val = void 0);\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.messageCount;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'messageCount'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'messageCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  val = fields.consumerCount;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'consumerCount'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'consumerCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueBind(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    exchange: void 0,\n    routingKey: void 0,\n    nowait: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  offset++;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.subarray(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeQueueBind(channel, fields) {\n  var len, offset = 0, val = null, bits = 0, varyingSize = 0, scratchOffset = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(18 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276820, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = \"\");\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  bits = 0;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueBindOk(buffer) {\n  return {};\n}\n\nfunction encodeQueueBindOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276821, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueuePurge(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    nowait: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  val = !!(1 & buffer[offset]);\n  fields.nowait = val;\n  return fields;\n}\n\nfunction encodeQueuePurge(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276830, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueuePurgeOk(buffer) {\n  var val, offset = 0, fields = {\n    messageCount: void 0\n  };\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.messageCount = val;\n  return fields;\n}\n\nfunction encodeQueuePurgeOk(channel, fields) {\n  var offset = 0, val = null, buffer = Buffer.alloc(16);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276831, 7);\n  offset = 11;\n  val = fields.messageCount;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'messageCount'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'messageCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueDelete(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    ifUnused: void 0,\n    ifEmpty: void 0,\n    nowait: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  val = !!(1 & buffer[offset]);\n  fields.ifUnused = val;\n  val = !!(2 & buffer[offset]);\n  fields.ifEmpty = val;\n  val = !!(4 & buffer[offset]);\n  fields.nowait = val;\n  return fields;\n}\n\nfunction encodeQueueDelete(channel, fields) {\n  var offset = 0, val = null, bits = 0, varyingSize = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  var buffer = Buffer.alloc(16 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276840, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.ifUnused;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  val = fields.ifEmpty;\n  void 0 === val && (val = !1);\n  val && (bits += 2);\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 4);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueDeleteOk(buffer) {\n  var val, offset = 0, fields = {\n    messageCount: void 0\n  };\n  val = buffer.readUInt32BE(offset);\n  offset += 4;\n  fields.messageCount = val;\n  return fields;\n}\n\nfunction encodeQueueDeleteOk(channel, fields) {\n  var offset = 0, val = null, buffer = Buffer.alloc(16);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276841, 7);\n  offset = 11;\n  val = fields.messageCount;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'messageCount'\");\n  if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'messageCount' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt32BE(val, offset);\n  offset += 4;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueUnbind(buffer) {\n  var val, len, offset = 0, fields = {\n    ticket: void 0,\n    queue: void 0,\n    exchange: void 0,\n    routingKey: void 0,\n    arguments: void 0\n  };\n  val = buffer.readUInt16BE(offset);\n  offset += 2;\n  fields.ticket = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.queue = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.exchange = val;\n  len = buffer.readUInt8(offset);\n  offset++;\n  val = buffer.toString(\"utf8\", offset, offset + len);\n  offset += len;\n  fields.routingKey = val;\n  len = buffer.readUInt32BE(offset);\n  offset += 4;\n  val = decodeFields(buffer.subarray(offset, offset + len));\n  offset += len;\n  fields.arguments = val;\n  return fields;\n}\n\nfunction encodeQueueUnbind(channel, fields) {\n  var len, offset = 0, val = null, varyingSize = 0, scratchOffset = 0;\n  val = fields.queue;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'queue' is the wrong type; must be a string (up to 255 chars)\");\n  var queue_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += queue_len;\n  val = fields.exchange;\n  if (void 0 === val) throw new Error(\"Missing value for mandatory field 'exchange'\");\n  if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'exchange' is the wrong type; must be a string (up to 255 chars)\");\n  var exchange_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += exchange_len;\n  val = fields.routingKey;\n  if (void 0 === val) val = \"\"; else if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'routingKey' is the wrong type; must be a string (up to 255 chars)\");\n  var routingKey_len = Buffer.byteLength(val, \"utf8\");\n  varyingSize += routingKey_len;\n  val = fields.arguments;\n  if (void 0 === val) val = {}; else if (\"object\" != typeof val) throw new TypeError(\"Field 'arguments' is the wrong type; must be an object\");\n  len = encodeTable(SCRATCH, val, scratchOffset);\n  var arguments_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n  scratchOffset += len;\n  varyingSize += arguments_encoded.length;\n  var buffer = Buffer.alloc(17 + varyingSize);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276850, 7);\n  offset = 11;\n  val = fields.ticket;\n  if (void 0 === val) val = 0; else if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'ticket' is the wrong type; must be a number (but not NaN)\");\n  buffer.writeUInt16BE(val, offset);\n  offset += 2;\n  val = fields.queue;\n  void 0 === val && (val = \"\");\n  buffer[offset] = queue_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += queue_len;\n  val = fields.exchange;\n  void 0 === val && (val = void 0);\n  buffer[offset] = exchange_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += exchange_len;\n  val = fields.routingKey;\n  void 0 === val && (val = \"\");\n  buffer[offset] = routingKey_len;\n  offset++;\n  buffer.write(val, offset, \"utf8\");\n  offset += routingKey_len;\n  offset += arguments_encoded.copy(buffer, offset);\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeQueueUnbindOk(buffer) {\n  return {};\n}\n\nfunction encodeQueueUnbindOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3276851, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxSelect(buffer) {\n  return {};\n}\n\nfunction encodeTxSelect(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898250, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxSelectOk(buffer) {\n  return {};\n}\n\nfunction encodeTxSelectOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898251, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxCommit(buffer) {\n  return {};\n}\n\nfunction encodeTxCommit(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898260, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxCommitOk(buffer) {\n  return {};\n}\n\nfunction encodeTxCommitOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898261, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxRollback(buffer) {\n  return {};\n}\n\nfunction encodeTxRollback(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898270, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeTxRollbackOk(buffer) {\n  return {};\n}\n\nfunction encodeTxRollbackOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5898271, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConfirmSelect(buffer) {\n  var val, fields = {\n    nowait: void 0\n  };\n  val = !!(1 & buffer[0]);\n  fields.nowait = val;\n  return fields;\n}\n\nfunction encodeConfirmSelect(channel, fields) {\n  var offset = 0, val = null, bits = 0, buffer = Buffer.alloc(13);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5570570, 7);\n  offset = 11;\n  val = fields.nowait;\n  void 0 === val && (val = !1);\n  val && (bits += 1);\n  buffer[offset] = bits;\n  offset++;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction decodeConfirmSelectOk(buffer) {\n  return {};\n}\n\nfunction encodeConfirmSelectOk(channel, fields) {\n  var offset = 0, buffer = Buffer.alloc(12);\n  buffer[0] = 1;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(5570571, 7);\n  offset = 11;\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  return buffer;\n}\n\nfunction encodeBasicProperties(channel, size, fields) {\n  var val, len, offset = 0, flags = 0, scratchOffset = 0, varyingSize = 0;\n  val = fields.contentType;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'contentType' is the wrong type; must be a string (up to 255 chars)\");\n    var contentType_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += contentType_len;\n  }\n  val = fields.contentEncoding;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'contentEncoding' is the wrong type; must be a string (up to 255 chars)\");\n    var contentEncoding_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += contentEncoding_len;\n  }\n  val = fields.headers;\n  if (void 0 != val) {\n    if (\"object\" != typeof val) throw new TypeError(\"Field 'headers' is the wrong type; must be an object\");\n    len = encodeTable(SCRATCH, val, scratchOffset);\n    var headers_encoded = SCRATCH.slice(scratchOffset, scratchOffset + len);\n    scratchOffset += len;\n    varyingSize += headers_encoded.length;\n  }\n  val = fields.deliveryMode;\n  if (void 0 != val) {\n    if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'deliveryMode' is the wrong type; must be a number (but not NaN)\");\n    varyingSize += 1;\n  }\n  val = fields.priority;\n  if (void 0 != val) {\n    if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'priority' is the wrong type; must be a number (but not NaN)\");\n    varyingSize += 1;\n  }\n  val = fields.correlationId;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'correlationId' is the wrong type; must be a string (up to 255 chars)\");\n    var correlationId_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += correlationId_len;\n  }\n  val = fields.replyTo;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'replyTo' is the wrong type; must be a string (up to 255 chars)\");\n    var replyTo_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += replyTo_len;\n  }\n  val = fields.expiration;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'expiration' is the wrong type; must be a string (up to 255 chars)\");\n    var expiration_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += expiration_len;\n  }\n  val = fields.messageId;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'messageId' is the wrong type; must be a string (up to 255 chars)\");\n    var messageId_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += messageId_len;\n  }\n  val = fields.timestamp;\n  if (void 0 != val) {\n    if (\"number\" != typeof val || isNaN(val)) throw new TypeError(\"Field 'timestamp' is the wrong type; must be a number (but not NaN)\");\n    varyingSize += 8;\n  }\n  val = fields.type;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'type' is the wrong type; must be a string (up to 255 chars)\");\n    var type_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += type_len;\n  }\n  val = fields.userId;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'userId' is the wrong type; must be a string (up to 255 chars)\");\n    var userId_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += userId_len;\n  }\n  val = fields.appId;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'appId' is the wrong type; must be a string (up to 255 chars)\");\n    var appId_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += appId_len;\n  }\n  val = fields.clusterId;\n  if (void 0 != val) {\n    if (!(\"string\" == typeof val && Buffer.byteLength(val) < 256)) throw new TypeError(\"Field 'clusterId' is the wrong type; must be a string (up to 255 chars)\");\n    var clusterId_len = Buffer.byteLength(val, \"utf8\");\n    varyingSize += 1;\n    varyingSize += clusterId_len;\n  }\n  var buffer = Buffer.alloc(22 + varyingSize);\n  buffer[0] = 2;\n  buffer.writeUInt16BE(channel, 1);\n  buffer.writeUInt32BE(3932160, 7);\n  ints.writeUInt64BE(buffer, size, 11);\n  flags = 0;\n  offset = 21;\n  val = fields.contentType;\n  if (void 0 != val) {\n    flags += 32768;\n    buffer[offset] = contentType_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += contentType_len;\n  }\n  val = fields.contentEncoding;\n  if (void 0 != val) {\n    flags += 16384;\n    buffer[offset] = contentEncoding_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += contentEncoding_len;\n  }\n  val = fields.headers;\n  if (void 0 != val) {\n    flags += 8192;\n    offset += headers_encoded.copy(buffer, offset);\n  }\n  val = fields.deliveryMode;\n  if (void 0 != val) {\n    flags += 4096;\n    buffer.writeUInt8(val, offset);\n    offset++;\n  }\n  val = fields.priority;\n  if (void 0 != val) {\n    flags += 2048;\n    buffer.writeUInt8(val, offset);\n    offset++;\n  }\n  val = fields.correlationId;\n  if (void 0 != val) {\n    flags += 1024;\n    buffer[offset] = correlationId_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += correlationId_len;\n  }\n  val = fields.replyTo;\n  if (void 0 != val) {\n    flags += 512;\n    buffer[offset] = replyTo_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += replyTo_len;\n  }\n  val = fields.expiration;\n  if (void 0 != val) {\n    flags += 256;\n    buffer[offset] = expiration_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += expiration_len;\n  }\n  val = fields.messageId;\n  if (void 0 != val) {\n    flags += 128;\n    buffer[offset] = messageId_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += messageId_len;\n  }\n  val = fields.timestamp;\n  if (void 0 != val) {\n    flags += 64;\n    ints.writeUInt64BE(buffer, val, offset);\n    offset += 8;\n  }\n  val = fields.type;\n  if (void 0 != val) {\n    flags += 32;\n    buffer[offset] = type_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += type_len;\n  }\n  val = fields.userId;\n  if (void 0 != val) {\n    flags += 16;\n    buffer[offset] = userId_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += userId_len;\n  }\n  val = fields.appId;\n  if (void 0 != val) {\n    flags += 8;\n    buffer[offset] = appId_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += appId_len;\n  }\n  val = fields.clusterId;\n  if (void 0 != val) {\n    flags += 4;\n    buffer[offset] = clusterId_len;\n    offset++;\n    buffer.write(val, offset, \"utf8\");\n    offset += clusterId_len;\n  }\n  buffer[offset] = 206;\n  buffer.writeUInt32BE(offset - 7, 3);\n  buffer.writeUInt16BE(flags, 19);\n  return buffer.subarray(0, offset + 1);\n}\n\nfunction decodeBasicProperties(buffer) {\n  var flags, val, len, offset = 2;\n  flags = buffer.readUInt16BE(0);\n  if (0 === flags) return {};\n  var fields = {\n    contentType: void 0,\n    contentEncoding: void 0,\n    headers: void 0,\n    deliveryMode: void 0,\n    priority: void 0,\n    correlationId: void 0,\n    replyTo: void 0,\n    expiration: void 0,\n    messageId: void 0,\n    timestamp: void 0,\n    type: void 0,\n    userId: void 0,\n    appId: void 0,\n    clusterId: void 0\n  };\n  if (32768 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.contentType = val;\n  }\n  if (16384 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.contentEncoding = val;\n  }\n  if (8192 & flags) {\n    len = buffer.readUInt32BE(offset);\n    offset += 4;\n    val = decodeFields(buffer.subarray(offset, offset + len));\n    offset += len;\n    fields.headers = val;\n  }\n  if (4096 & flags) {\n    val = buffer[offset];\n    offset++;\n    fields.deliveryMode = val;\n  }\n  if (2048 & flags) {\n    val = buffer[offset];\n    offset++;\n    fields.priority = val;\n  }\n  if (1024 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.correlationId = val;\n  }\n  if (512 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.replyTo = val;\n  }\n  if (256 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.expiration = val;\n  }\n  if (128 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.messageId = val;\n  }\n  if (64 & flags) {\n    val = ints.readUInt64BE(buffer, offset);\n    offset += 8;\n    fields.timestamp = val;\n  }\n  if (32 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.type = val;\n  }\n  if (16 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.userId = val;\n  }\n  if (8 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.appId = val;\n  }\n  if (4 & flags) {\n    len = buffer.readUInt8(offset);\n    offset++;\n    val = buffer.toString(\"utf8\", offset, offset + len);\n    offset += len;\n    fields.clusterId = val;\n  }\n  return fields;\n}\n\nvar codec = __webpack_require__(/*! ./codec */ \"(rsc)/./node_modules/amqplib/lib/codec.js\"), ints = __webpack_require__(/*! buffer-more-ints */ \"(rsc)/./node_modules/buffer-more-ints/buffer-more-ints.js\"), encodeTable = codec.encodeTable, decodeFields = codec.decodeFields, SCRATCH = Buffer.alloc(65536), EMPTY_OBJECT = Object.freeze({});\n\nmodule.exports.constants = {\n  FRAME_METHOD: 1,\n  FRAME_HEADER: 2,\n  FRAME_BODY: 3,\n  FRAME_HEARTBEAT: 8,\n  FRAME_MIN_SIZE: 4096,\n  FRAME_END: 206,\n  REPLY_SUCCESS: 200,\n  CONTENT_TOO_LARGE: 311,\n  NO_ROUTE: 312,\n  NO_CONSUMERS: 313,\n  ACCESS_REFUSED: 403,\n  NOT_FOUND: 404,\n  RESOURCE_LOCKED: 405,\n  PRECONDITION_FAILED: 406,\n  CONNECTION_FORCED: 320,\n  INVALID_PATH: 402,\n  FRAME_ERROR: 501,\n  SYNTAX_ERROR: 502,\n  COMMAND_INVALID: 503,\n  CHANNEL_ERROR: 504,\n  UNEXPECTED_FRAME: 505,\n  RESOURCE_ERROR: 506,\n  NOT_ALLOWED: 530,\n  NOT_IMPLEMENTED: 540,\n  INTERNAL_ERROR: 541\n};\n\nmodule.exports.constant_strs = {\n  \"1\": \"FRAME-METHOD\",\n  \"2\": \"FRAME-HEADER\",\n  \"3\": \"FRAME-BODY\",\n  \"8\": \"FRAME-HEARTBEAT\",\n  \"200\": \"REPLY-SUCCESS\",\n  \"206\": \"FRAME-END\",\n  \"311\": \"CONTENT-TOO-LARGE\",\n  \"312\": \"NO-ROUTE\",\n  \"313\": \"NO-CONSUMERS\",\n  \"320\": \"CONNECTION-FORCED\",\n  \"402\": \"INVALID-PATH\",\n  \"403\": \"ACCESS-REFUSED\",\n  \"404\": \"NOT-FOUND\",\n  \"405\": \"RESOURCE-LOCKED\",\n  \"406\": \"PRECONDITION-FAILED\",\n  \"501\": \"FRAME-ERROR\",\n  \"502\": \"SYNTAX-ERROR\",\n  \"503\": \"COMMAND-INVALID\",\n  \"504\": \"CHANNEL-ERROR\",\n  \"505\": \"UNEXPECTED-FRAME\",\n  \"506\": \"RESOURCE-ERROR\",\n  \"530\": \"NOT-ALLOWED\",\n  \"540\": \"NOT-IMPLEMENTED\",\n  \"541\": \"INTERNAL-ERROR\",\n  \"4096\": \"FRAME-MIN-SIZE\"\n};\n\nmodule.exports.FRAME_OVERHEAD = 8;\n\nmodule.exports.decode = function(id, buf) {\n  switch (id) {\n   case 3932170:\n    return decodeBasicQos(buf);\n\n   case 3932171:\n    return decodeBasicQosOk(buf);\n\n   case 3932180:\n    return decodeBasicConsume(buf);\n\n   case 3932181:\n    return decodeBasicConsumeOk(buf);\n\n   case 3932190:\n    return decodeBasicCancel(buf);\n\n   case 3932191:\n    return decodeBasicCancelOk(buf);\n\n   case 3932200:\n    return decodeBasicPublish(buf);\n\n   case 3932210:\n    return decodeBasicReturn(buf);\n\n   case 3932220:\n    return decodeBasicDeliver(buf);\n\n   case 3932230:\n    return decodeBasicGet(buf);\n\n   case 3932231:\n    return decodeBasicGetOk(buf);\n\n   case 3932232:\n    return decodeBasicGetEmpty(buf);\n\n   case 3932240:\n    return decodeBasicAck(buf);\n\n   case 3932250:\n    return decodeBasicReject(buf);\n\n   case 3932260:\n    return decodeBasicRecoverAsync(buf);\n\n   case 3932270:\n    return decodeBasicRecover(buf);\n\n   case 3932271:\n    return decodeBasicRecoverOk(buf);\n\n   case 3932280:\n    return decodeBasicNack(buf);\n\n   case 655370:\n    return decodeConnectionStart(buf);\n\n   case 655371:\n    return decodeConnectionStartOk(buf);\n\n   case 655380:\n    return decodeConnectionSecure(buf);\n\n   case 655381:\n    return decodeConnectionSecureOk(buf);\n\n   case 655390:\n    return decodeConnectionTune(buf);\n\n   case 655391:\n    return decodeConnectionTuneOk(buf);\n\n   case 655400:\n    return decodeConnectionOpen(buf);\n\n   case 655401:\n    return decodeConnectionOpenOk(buf);\n\n   case 655410:\n    return decodeConnectionClose(buf);\n\n   case 655411:\n    return decodeConnectionCloseOk(buf);\n\n   case 655420:\n    return decodeConnectionBlocked(buf);\n\n   case 655421:\n    return decodeConnectionUnblocked(buf);\n\n   case 655430:\n    return decodeConnectionUpdateSecret(buf);\n\n   case 655431:\n    return decodeConnectionUpdateSecretOk(buf);\n\n   case 1310730:\n    return decodeChannelOpen(buf);\n\n   case 1310731:\n    return decodeChannelOpenOk(buf);\n\n   case 1310740:\n    return decodeChannelFlow(buf);\n\n   case 1310741:\n    return decodeChannelFlowOk(buf);\n\n   case 1310760:\n    return decodeChannelClose(buf);\n\n   case 1310761:\n    return decodeChannelCloseOk(buf);\n\n   case 1966090:\n    return decodeAccessRequest(buf);\n\n   case 1966091:\n    return decodeAccessRequestOk(buf);\n\n   case 2621450:\n    return decodeExchangeDeclare(buf);\n\n   case 2621451:\n    return decodeExchangeDeclareOk(buf);\n\n   case 2621460:\n    return decodeExchangeDelete(buf);\n\n   case 2621461:\n    return decodeExchangeDeleteOk(buf);\n\n   case 2621470:\n    return decodeExchangeBind(buf);\n\n   case 2621471:\n    return decodeExchangeBindOk(buf);\n\n   case 2621480:\n    return decodeExchangeUnbind(buf);\n\n   case 2621491:\n    return decodeExchangeUnbindOk(buf);\n\n   case 3276810:\n    return decodeQueueDeclare(buf);\n\n   case 3276811:\n    return decodeQueueDeclareOk(buf);\n\n   case 3276820:\n    return decodeQueueBind(buf);\n\n   case 3276821:\n    return decodeQueueBindOk(buf);\n\n   case 3276830:\n    return decodeQueuePurge(buf);\n\n   case 3276831:\n    return decodeQueuePurgeOk(buf);\n\n   case 3276840:\n    return decodeQueueDelete(buf);\n\n   case 3276841:\n    return decodeQueueDeleteOk(buf);\n\n   case 3276850:\n    return decodeQueueUnbind(buf);\n\n   case 3276851:\n    return decodeQueueUnbindOk(buf);\n\n   case 5898250:\n    return decodeTxSelect(buf);\n\n   case 5898251:\n    return decodeTxSelectOk(buf);\n\n   case 5898260:\n    return decodeTxCommit(buf);\n\n   case 5898261:\n    return decodeTxCommitOk(buf);\n\n   case 5898270:\n    return decodeTxRollback(buf);\n\n   case 5898271:\n    return decodeTxRollbackOk(buf);\n\n   case 5570570:\n    return decodeConfirmSelect(buf);\n\n   case 5570571:\n    return decodeConfirmSelectOk(buf);\n\n   case 60:\n    return decodeBasicProperties(buf);\n\n   default:\n    throw new Error(\"Unknown class/method ID\");\n  }\n};\n\nmodule.exports.encodeMethod = function(id, channel, fields) {\n  switch (id) {\n   case 3932170:\n    return encodeBasicQos(channel, fields);\n\n   case 3932171:\n    return encodeBasicQosOk(channel, fields);\n\n   case 3932180:\n    return encodeBasicConsume(channel, fields);\n\n   case 3932181:\n    return encodeBasicConsumeOk(channel, fields);\n\n   case 3932190:\n    return encodeBasicCancel(channel, fields);\n\n   case 3932191:\n    return encodeBasicCancelOk(channel, fields);\n\n   case 3932200:\n    return encodeBasicPublish(channel, fields);\n\n   case 3932210:\n    return encodeBasicReturn(channel, fields);\n\n   case 3932220:\n    return encodeBasicDeliver(channel, fields);\n\n   case 3932230:\n    return encodeBasicGet(channel, fields);\n\n   case 3932231:\n    return encodeBasicGetOk(channel, fields);\n\n   case 3932232:\n    return encodeBasicGetEmpty(channel, fields);\n\n   case 3932240:\n    return encodeBasicAck(channel, fields);\n\n   case 3932250:\n    return encodeBasicReject(channel, fields);\n\n   case 3932260:\n    return encodeBasicRecoverAsync(channel, fields);\n\n   case 3932270:\n    return encodeBasicRecover(channel, fields);\n\n   case 3932271:\n    return encodeBasicRecoverOk(channel, fields);\n\n   case 3932280:\n    return encodeBasicNack(channel, fields);\n\n   case 655370:\n    return encodeConnectionStart(channel, fields);\n\n   case 655371:\n    return encodeConnectionStartOk(channel, fields);\n\n   case 655380:\n    return encodeConnectionSecure(channel, fields);\n\n   case 655381:\n    return encodeConnectionSecureOk(channel, fields);\n\n   case 655390:\n    return encodeConnectionTune(channel, fields);\n\n   case 655391:\n    return encodeConnectionTuneOk(channel, fields);\n\n   case 655400:\n    return encodeConnectionOpen(channel, fields);\n\n   case 655401:\n    return encodeConnectionOpenOk(channel, fields);\n\n   case 655410:\n    return encodeConnectionClose(channel, fields);\n\n   case 655411:\n    return encodeConnectionCloseOk(channel, fields);\n\n   case 655420:\n    return encodeConnectionBlocked(channel, fields);\n\n   case 655421:\n    return encodeConnectionUnblocked(channel, fields);\n\n   case 655430:\n    return encodeConnectionUpdateSecret(channel, fields);\n\n   case 655431:\n    return encodeConnectionUpdateSecretOk(channel, fields);\n\n   case 1310730:\n    return encodeChannelOpen(channel, fields);\n\n   case 1310731:\n    return encodeChannelOpenOk(channel, fields);\n\n   case 1310740:\n    return encodeChannelFlow(channel, fields);\n\n   case 1310741:\n    return encodeChannelFlowOk(channel, fields);\n\n   case 1310760:\n    return encodeChannelClose(channel, fields);\n\n   case 1310761:\n    return encodeChannelCloseOk(channel, fields);\n\n   case 1966090:\n    return encodeAccessRequest(channel, fields);\n\n   case 1966091:\n    return encodeAccessRequestOk(channel, fields);\n\n   case 2621450:\n    return encodeExchangeDeclare(channel, fields);\n\n   case 2621451:\n    return encodeExchangeDeclareOk(channel, fields);\n\n   case 2621460:\n    return encodeExchangeDelete(channel, fields);\n\n   case 2621461:\n    return encodeExchangeDeleteOk(channel, fields);\n\n   case 2621470:\n    return encodeExchangeBind(channel, fields);\n\n   case 2621471:\n    return encodeExchangeBindOk(channel, fields);\n\n   case 2621480:\n    return encodeExchangeUnbind(channel, fields);\n\n   case 2621491:\n    return encodeExchangeUnbindOk(channel, fields);\n\n   case 3276810:\n    return encodeQueueDeclare(channel, fields);\n\n   case 3276811:\n    return encodeQueueDeclareOk(channel, fields);\n\n   case 3276820:\n    return encodeQueueBind(channel, fields);\n\n   case 3276821:\n    return encodeQueueBindOk(channel, fields);\n\n   case 3276830:\n    return encodeQueuePurge(channel, fields);\n\n   case 3276831:\n    return encodeQueuePurgeOk(channel, fields);\n\n   case 3276840:\n    return encodeQueueDelete(channel, fields);\n\n   case 3276841:\n    return encodeQueueDeleteOk(channel, fields);\n\n   case 3276850:\n    return encodeQueueUnbind(channel, fields);\n\n   case 3276851:\n    return encodeQueueUnbindOk(channel, fields);\n\n   case 5898250:\n    return encodeTxSelect(channel, fields);\n\n   case 5898251:\n    return encodeTxSelectOk(channel, fields);\n\n   case 5898260:\n    return encodeTxCommit(channel, fields);\n\n   case 5898261:\n    return encodeTxCommitOk(channel, fields);\n\n   case 5898270:\n    return encodeTxRollback(channel, fields);\n\n   case 5898271:\n    return encodeTxRollbackOk(channel, fields);\n\n   case 5570570:\n    return encodeConfirmSelect(channel, fields);\n\n   case 5570571:\n    return encodeConfirmSelectOk(channel, fields);\n\n   default:\n    throw new Error(\"Unknown class/method ID\");\n  }\n};\n\nmodule.exports.encodeProperties = function(id, channel, size, fields) {\n  switch (id) {\n   case 60:\n    return encodeBasicProperties(channel, size, fields);\n\n   default:\n    throw new Error(\"Unknown class/properties ID\");\n  }\n};\n\nmodule.exports.info = function(id) {\n  switch (id) {\n   case 3932170:\n    return methodInfoBasicQos;\n\n   case 3932171:\n    return methodInfoBasicQosOk;\n\n   case 3932180:\n    return methodInfoBasicConsume;\n\n   case 3932181:\n    return methodInfoBasicConsumeOk;\n\n   case 3932190:\n    return methodInfoBasicCancel;\n\n   case 3932191:\n    return methodInfoBasicCancelOk;\n\n   case 3932200:\n    return methodInfoBasicPublish;\n\n   case 3932210:\n    return methodInfoBasicReturn;\n\n   case 3932220:\n    return methodInfoBasicDeliver;\n\n   case 3932230:\n    return methodInfoBasicGet;\n\n   case 3932231:\n    return methodInfoBasicGetOk;\n\n   case 3932232:\n    return methodInfoBasicGetEmpty;\n\n   case 3932240:\n    return methodInfoBasicAck;\n\n   case 3932250:\n    return methodInfoBasicReject;\n\n   case 3932260:\n    return methodInfoBasicRecoverAsync;\n\n   case 3932270:\n    return methodInfoBasicRecover;\n\n   case 3932271:\n    return methodInfoBasicRecoverOk;\n\n   case 3932280:\n    return methodInfoBasicNack;\n\n   case 655370:\n    return methodInfoConnectionStart;\n\n   case 655371:\n    return methodInfoConnectionStartOk;\n\n   case 655380:\n    return methodInfoConnectionSecure;\n\n   case 655381:\n    return methodInfoConnectionSecureOk;\n\n   case 655390:\n    return methodInfoConnectionTune;\n\n   case 655391:\n    return methodInfoConnectionTuneOk;\n\n   case 655400:\n    return methodInfoConnectionOpen;\n\n   case 655401:\n    return methodInfoConnectionOpenOk;\n\n   case 655410:\n    return methodInfoConnectionClose;\n\n   case 655411:\n    return methodInfoConnectionCloseOk;\n\n   case 655420:\n    return methodInfoConnectionBlocked;\n\n   case 655421:\n    return methodInfoConnectionUnblocked;\n\n   case 655430:\n    return methodInfoConnectionUpdateSecret;\n\n   case 655431:\n    return methodInfoConnectionUpdateSecretOk;\n\n   case 1310730:\n    return methodInfoChannelOpen;\n\n   case 1310731:\n    return methodInfoChannelOpenOk;\n\n   case 1310740:\n    return methodInfoChannelFlow;\n\n   case 1310741:\n    return methodInfoChannelFlowOk;\n\n   case 1310760:\n    return methodInfoChannelClose;\n\n   case 1310761:\n    return methodInfoChannelCloseOk;\n\n   case 1966090:\n    return methodInfoAccessRequest;\n\n   case 1966091:\n    return methodInfoAccessRequestOk;\n\n   case 2621450:\n    return methodInfoExchangeDeclare;\n\n   case 2621451:\n    return methodInfoExchangeDeclareOk;\n\n   case 2621460:\n    return methodInfoExchangeDelete;\n\n   case 2621461:\n    return methodInfoExchangeDeleteOk;\n\n   case 2621470:\n    return methodInfoExchangeBind;\n\n   case 2621471:\n    return methodInfoExchangeBindOk;\n\n   case 2621480:\n    return methodInfoExchangeUnbind;\n\n   case 2621491:\n    return methodInfoExchangeUnbindOk;\n\n   case 3276810:\n    return methodInfoQueueDeclare;\n\n   case 3276811:\n    return methodInfoQueueDeclareOk;\n\n   case 3276820:\n    return methodInfoQueueBind;\n\n   case 3276821:\n    return methodInfoQueueBindOk;\n\n   case 3276830:\n    return methodInfoQueuePurge;\n\n   case 3276831:\n    return methodInfoQueuePurgeOk;\n\n   case 3276840:\n    return methodInfoQueueDelete;\n\n   case 3276841:\n    return methodInfoQueueDeleteOk;\n\n   case 3276850:\n    return methodInfoQueueUnbind;\n\n   case 3276851:\n    return methodInfoQueueUnbindOk;\n\n   case 5898250:\n    return methodInfoTxSelect;\n\n   case 5898251:\n    return methodInfoTxSelectOk;\n\n   case 5898260:\n    return methodInfoTxCommit;\n\n   case 5898261:\n    return methodInfoTxCommitOk;\n\n   case 5898270:\n    return methodInfoTxRollback;\n\n   case 5898271:\n    return methodInfoTxRollbackOk;\n\n   case 5570570:\n    return methodInfoConfirmSelect;\n\n   case 5570571:\n    return methodInfoConfirmSelectOk;\n\n   case 60:\n    return propertiesInfoBasicProperties;\n\n   default:\n    throw new Error(\"Unknown class/method ID\");\n  }\n};\n\nmodule.exports.BasicQos = 3932170;\n\nvar methodInfoBasicQos = module.exports.methodInfoBasicQos = {\n  id: 3932170,\n  classId: 60,\n  methodId: 10,\n  name: \"BasicQos\",\n  args: [ {\n    type: \"long\",\n    name: \"prefetchSize\",\n    default: 0\n  }, {\n    type: \"short\",\n    name: \"prefetchCount\",\n    default: 0\n  }, {\n    type: \"bit\",\n    name: \"global\",\n    default: !1\n  } ]\n};\n\nmodule.exports.BasicQosOk = 3932171;\n\nvar methodInfoBasicQosOk = module.exports.methodInfoBasicQosOk = {\n  id: 3932171,\n  classId: 60,\n  methodId: 11,\n  name: \"BasicQosOk\",\n  args: []\n};\n\nmodule.exports.BasicConsume = 3932180;\n\nvar methodInfoBasicConsume = module.exports.methodInfoBasicConsume = {\n  id: 3932180,\n  classId: 60,\n  methodId: 20,\n  name: \"BasicConsume\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    default: \"\"\n  }, {\n    type: \"shortstr\",\n    name: \"consumerTag\",\n    default: \"\"\n  }, {\n    type: \"bit\",\n    name: \"noLocal\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"noAck\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"exclusive\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    default: {}\n  } ]\n};\n\nmodule.exports.BasicConsumeOk = 3932181;\n\nvar methodInfoBasicConsumeOk = module.exports.methodInfoBasicConsumeOk = {\n  id: 3932181,\n  classId: 60,\n  methodId: 21,\n  name: \"BasicConsumeOk\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"consumerTag\"\n  } ]\n};\n\nmodule.exports.BasicCancel = 3932190;\n\nvar methodInfoBasicCancel = module.exports.methodInfoBasicCancel = {\n  id: 3932190,\n  classId: 60,\n  methodId: 30,\n  name: \"BasicCancel\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"consumerTag\"\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  } ]\n};\n\nmodule.exports.BasicCancelOk = 3932191;\n\nvar methodInfoBasicCancelOk = module.exports.methodInfoBasicCancelOk = {\n  id: 3932191,\n  classId: 60,\n  methodId: 31,\n  name: \"BasicCancelOk\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"consumerTag\"\n  } ]\n};\n\nmodule.exports.BasicPublish = 3932200;\n\nvar methodInfoBasicPublish = module.exports.methodInfoBasicPublish = {\n  id: 3932200,\n  classId: 60,\n  methodId: 40,\n  name: \"BasicPublish\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\",\n    default: \"\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\",\n    default: \"\"\n  }, {\n    type: \"bit\",\n    name: \"mandatory\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"immediate\",\n    default: !1\n  } ]\n};\n\nmodule.exports.BasicReturn = 3932210;\n\nvar methodInfoBasicReturn = module.exports.methodInfoBasicReturn = {\n  id: 3932210,\n  classId: 60,\n  methodId: 50,\n  name: \"BasicReturn\",\n  args: [ {\n    type: \"short\",\n    name: \"replyCode\"\n  }, {\n    type: \"shortstr\",\n    name: \"replyText\",\n    default: \"\"\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\"\n  } ]\n};\n\nmodule.exports.BasicDeliver = 3932220;\n\nvar methodInfoBasicDeliver = module.exports.methodInfoBasicDeliver = {\n  id: 3932220,\n  classId: 60,\n  methodId: 60,\n  name: \"BasicDeliver\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"consumerTag\"\n  }, {\n    type: \"longlong\",\n    name: \"deliveryTag\"\n  }, {\n    type: \"bit\",\n    name: \"redelivered\",\n    default: !1\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\"\n  } ]\n};\n\nmodule.exports.BasicGet = 3932230;\n\nvar methodInfoBasicGet = module.exports.methodInfoBasicGet = {\n  id: 3932230,\n  classId: 60,\n  methodId: 70,\n  name: \"BasicGet\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    default: \"\"\n  }, {\n    type: \"bit\",\n    name: \"noAck\",\n    default: !1\n  } ]\n};\n\nmodule.exports.BasicGetOk = 3932231;\n\nvar methodInfoBasicGetOk = module.exports.methodInfoBasicGetOk = {\n  id: 3932231,\n  classId: 60,\n  methodId: 71,\n  name: \"BasicGetOk\",\n  args: [ {\n    type: \"longlong\",\n    name: \"deliveryTag\"\n  }, {\n    type: \"bit\",\n    name: \"redelivered\",\n    default: !1\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\"\n  }, {\n    type: \"long\",\n    name: \"messageCount\"\n  } ]\n};\n\nmodule.exports.BasicGetEmpty = 3932232;\n\nvar methodInfoBasicGetEmpty = module.exports.methodInfoBasicGetEmpty = {\n  id: 3932232,\n  classId: 60,\n  methodId: 72,\n  name: \"BasicGetEmpty\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"clusterId\",\n    default: \"\"\n  } ]\n};\n\nmodule.exports.BasicAck = 3932240;\n\nvar methodInfoBasicAck = module.exports.methodInfoBasicAck = {\n  id: 3932240,\n  classId: 60,\n  methodId: 80,\n  name: \"BasicAck\",\n  args: [ {\n    type: \"longlong\",\n    name: \"deliveryTag\",\n    default: 0\n  }, {\n    type: \"bit\",\n    name: \"multiple\",\n    default: !1\n  } ]\n};\n\nmodule.exports.BasicReject = 3932250;\n\nvar methodInfoBasicReject = module.exports.methodInfoBasicReject = {\n  id: 3932250,\n  classId: 60,\n  methodId: 90,\n  name: \"BasicReject\",\n  args: [ {\n    type: \"longlong\",\n    name: \"deliveryTag\"\n  }, {\n    type: \"bit\",\n    name: \"requeue\",\n    default: !0\n  } ]\n};\n\nmodule.exports.BasicRecoverAsync = 3932260;\n\nvar methodInfoBasicRecoverAsync = module.exports.methodInfoBasicRecoverAsync = {\n  id: 3932260,\n  classId: 60,\n  methodId: 100,\n  name: \"BasicRecoverAsync\",\n  args: [ {\n    type: \"bit\",\n    name: \"requeue\",\n    default: !1\n  } ]\n};\n\nmodule.exports.BasicRecover = 3932270;\n\nvar methodInfoBasicRecover = module.exports.methodInfoBasicRecover = {\n  id: 3932270,\n  classId: 60,\n  methodId: 110,\n  name: \"BasicRecover\",\n  args: [ {\n    type: \"bit\",\n    name: \"requeue\",\n    default: !1\n  } ]\n};\n\nmodule.exports.BasicRecoverOk = 3932271;\n\nvar methodInfoBasicRecoverOk = module.exports.methodInfoBasicRecoverOk = {\n  id: 3932271,\n  classId: 60,\n  methodId: 111,\n  name: \"BasicRecoverOk\",\n  args: []\n};\n\nmodule.exports.BasicNack = 3932280;\n\nvar methodInfoBasicNack = module.exports.methodInfoBasicNack = {\n  id: 3932280,\n  classId: 60,\n  methodId: 120,\n  name: \"BasicNack\",\n  args: [ {\n    type: \"longlong\",\n    name: \"deliveryTag\",\n    default: 0\n  }, {\n    type: \"bit\",\n    name: \"multiple\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"requeue\",\n    default: !0\n  } ]\n};\n\nmodule.exports.ConnectionStart = 655370;\n\nvar methodInfoConnectionStart = module.exports.methodInfoConnectionStart = {\n  id: 655370,\n  classId: 10,\n  methodId: 10,\n  name: \"ConnectionStart\",\n  args: [ {\n    type: \"octet\",\n    name: \"versionMajor\",\n    default: 0\n  }, {\n    type: \"octet\",\n    name: \"versionMinor\",\n    default: 9\n  }, {\n    type: \"table\",\n    name: \"serverProperties\"\n  }, {\n    type: \"longstr\",\n    name: \"mechanisms\",\n    default: \"PLAIN\"\n  }, {\n    type: \"longstr\",\n    name: \"locales\",\n    default: \"en_US\"\n  } ]\n};\n\nmodule.exports.ConnectionStartOk = 655371;\n\nvar methodInfoConnectionStartOk = module.exports.methodInfoConnectionStartOk = {\n  id: 655371,\n  classId: 10,\n  methodId: 11,\n  name: \"ConnectionStartOk\",\n  args: [ {\n    type: \"table\",\n    name: \"clientProperties\"\n  }, {\n    type: \"shortstr\",\n    name: \"mechanism\",\n    default: \"PLAIN\"\n  }, {\n    type: \"longstr\",\n    name: \"response\"\n  }, {\n    type: \"shortstr\",\n    name: \"locale\",\n    default: \"en_US\"\n  } ]\n};\n\nmodule.exports.ConnectionSecure = 655380;\n\nvar methodInfoConnectionSecure = module.exports.methodInfoConnectionSecure = {\n  id: 655380,\n  classId: 10,\n  methodId: 20,\n  name: \"ConnectionSecure\",\n  args: [ {\n    type: \"longstr\",\n    name: \"challenge\"\n  } ]\n};\n\nmodule.exports.ConnectionSecureOk = 655381;\n\nvar methodInfoConnectionSecureOk = module.exports.methodInfoConnectionSecureOk = {\n  id: 655381,\n  classId: 10,\n  methodId: 21,\n  name: \"ConnectionSecureOk\",\n  args: [ {\n    type: \"longstr\",\n    name: \"response\"\n  } ]\n};\n\nmodule.exports.ConnectionTune = 655390;\n\nvar methodInfoConnectionTune = module.exports.methodInfoConnectionTune = {\n  id: 655390,\n  classId: 10,\n  methodId: 30,\n  name: \"ConnectionTune\",\n  args: [ {\n    type: \"short\",\n    name: \"channelMax\",\n    default: 0\n  }, {\n    type: \"long\",\n    name: \"frameMax\",\n    default: 0\n  }, {\n    type: \"short\",\n    name: \"heartbeat\",\n    default: 0\n  } ]\n};\n\nmodule.exports.ConnectionTuneOk = 655391;\n\nvar methodInfoConnectionTuneOk = module.exports.methodInfoConnectionTuneOk = {\n  id: 655391,\n  classId: 10,\n  methodId: 31,\n  name: \"ConnectionTuneOk\",\n  args: [ {\n    type: \"short\",\n    name: \"channelMax\",\n    default: 0\n  }, {\n    type: \"long\",\n    name: \"frameMax\",\n    default: 0\n  }, {\n    type: \"short\",\n    name: \"heartbeat\",\n    default: 0\n  } ]\n};\n\nmodule.exports.ConnectionOpen = 655400;\n\nvar methodInfoConnectionOpen = module.exports.methodInfoConnectionOpen = {\n  id: 655400,\n  classId: 10,\n  methodId: 40,\n  name: \"ConnectionOpen\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"virtualHost\",\n    default: \"/\"\n  }, {\n    type: \"shortstr\",\n    name: \"capabilities\",\n    default: \"\"\n  }, {\n    type: \"bit\",\n    name: \"insist\",\n    default: !1\n  } ]\n};\n\nmodule.exports.ConnectionOpenOk = 655401;\n\nvar methodInfoConnectionOpenOk = module.exports.methodInfoConnectionOpenOk = {\n  id: 655401,\n  classId: 10,\n  methodId: 41,\n  name: \"ConnectionOpenOk\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"knownHosts\",\n    default: \"\"\n  } ]\n};\n\nmodule.exports.ConnectionClose = 655410;\n\nvar methodInfoConnectionClose = module.exports.methodInfoConnectionClose = {\n  id: 655410,\n  classId: 10,\n  methodId: 50,\n  name: \"ConnectionClose\",\n  args: [ {\n    type: \"short\",\n    name: \"replyCode\"\n  }, {\n    type: \"shortstr\",\n    name: \"replyText\",\n    default: \"\"\n  }, {\n    type: \"short\",\n    name: \"classId\"\n  }, {\n    type: \"short\",\n    name: \"methodId\"\n  } ]\n};\n\nmodule.exports.ConnectionCloseOk = 655411;\n\nvar methodInfoConnectionCloseOk = module.exports.methodInfoConnectionCloseOk = {\n  id: 655411,\n  classId: 10,\n  methodId: 51,\n  name: \"ConnectionCloseOk\",\n  args: []\n};\n\nmodule.exports.ConnectionBlocked = 655420;\n\nvar methodInfoConnectionBlocked = module.exports.methodInfoConnectionBlocked = {\n  id: 655420,\n  classId: 10,\n  methodId: 60,\n  name: \"ConnectionBlocked\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"reason\",\n    default: \"\"\n  } ]\n};\n\nmodule.exports.ConnectionUnblocked = 655421;\n\nvar methodInfoConnectionUnblocked = module.exports.methodInfoConnectionUnblocked = {\n  id: 655421,\n  classId: 10,\n  methodId: 61,\n  name: \"ConnectionUnblocked\",\n  args: []\n};\n\nmodule.exports.ConnectionUpdateSecret = 655430;\n\nvar methodInfoConnectionUpdateSecret = module.exports.methodInfoConnectionUpdateSecret = {\n  id: 655430,\n  classId: 10,\n  methodId: 70,\n  name: \"ConnectionUpdateSecret\",\n  args: [ {\n    type: \"longstr\",\n    name: \"newSecret\"\n  }, {\n    type: \"shortstr\",\n    name: \"reason\"\n  } ]\n};\n\nmodule.exports.ConnectionUpdateSecretOk = 655431;\n\nvar methodInfoConnectionUpdateSecretOk = module.exports.methodInfoConnectionUpdateSecretOk = {\n  id: 655431,\n  classId: 10,\n  methodId: 71,\n  name: \"ConnectionUpdateSecretOk\",\n  args: []\n};\n\nmodule.exports.ChannelOpen = 1310730;\n\nvar methodInfoChannelOpen = module.exports.methodInfoChannelOpen = {\n  id: 1310730,\n  classId: 20,\n  methodId: 10,\n  name: \"ChannelOpen\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"outOfBand\",\n    default: \"\"\n  } ]\n};\n\nmodule.exports.ChannelOpenOk = 1310731;\n\nvar methodInfoChannelOpenOk = module.exports.methodInfoChannelOpenOk = {\n  id: 1310731,\n  classId: 20,\n  methodId: 11,\n  name: \"ChannelOpenOk\",\n  args: [ {\n    type: \"longstr\",\n    name: \"channelId\",\n    default: \"\"\n  } ]\n};\n\nmodule.exports.ChannelFlow = 1310740;\n\nvar methodInfoChannelFlow = module.exports.methodInfoChannelFlow = {\n  id: 1310740,\n  classId: 20,\n  methodId: 20,\n  name: \"ChannelFlow\",\n  args: [ {\n    type: \"bit\",\n    name: \"active\"\n  } ]\n};\n\nmodule.exports.ChannelFlowOk = 1310741;\n\nvar methodInfoChannelFlowOk = module.exports.methodInfoChannelFlowOk = {\n  id: 1310741,\n  classId: 20,\n  methodId: 21,\n  name: \"ChannelFlowOk\",\n  args: [ {\n    type: \"bit\",\n    name: \"active\"\n  } ]\n};\n\nmodule.exports.ChannelClose = 1310760;\n\nvar methodInfoChannelClose = module.exports.methodInfoChannelClose = {\n  id: 1310760,\n  classId: 20,\n  methodId: 40,\n  name: \"ChannelClose\",\n  args: [ {\n    type: \"short\",\n    name: \"replyCode\"\n  }, {\n    type: \"shortstr\",\n    name: \"replyText\",\n    default: \"\"\n  }, {\n    type: \"short\",\n    name: \"classId\"\n  }, {\n    type: \"short\",\n    name: \"methodId\"\n  } ]\n};\n\nmodule.exports.ChannelCloseOk = 1310761;\n\nvar methodInfoChannelCloseOk = module.exports.methodInfoChannelCloseOk = {\n  id: 1310761,\n  classId: 20,\n  methodId: 41,\n  name: \"ChannelCloseOk\",\n  args: []\n};\n\nmodule.exports.AccessRequest = 1966090;\n\nvar methodInfoAccessRequest = module.exports.methodInfoAccessRequest = {\n  id: 1966090,\n  classId: 30,\n  methodId: 10,\n  name: \"AccessRequest\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"realm\",\n    default: \"/data\"\n  }, {\n    type: \"bit\",\n    name: \"exclusive\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"passive\",\n    default: !0\n  }, {\n    type: \"bit\",\n    name: \"active\",\n    default: !0\n  }, {\n    type: \"bit\",\n    name: \"write\",\n    default: !0\n  }, {\n    type: \"bit\",\n    name: \"read\",\n    default: !0\n  } ]\n};\n\nmodule.exports.AccessRequestOk = 1966091;\n\nvar methodInfoAccessRequestOk = module.exports.methodInfoAccessRequestOk = {\n  id: 1966091,\n  classId: 30,\n  methodId: 11,\n  name: \"AccessRequestOk\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 1\n  } ]\n};\n\nmodule.exports.ExchangeDeclare = 2621450;\n\nvar methodInfoExchangeDeclare = module.exports.methodInfoExchangeDeclare = {\n  id: 2621450,\n  classId: 40,\n  methodId: 10,\n  name: \"ExchangeDeclare\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"type\",\n    default: \"direct\"\n  }, {\n    type: \"bit\",\n    name: \"passive\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"durable\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"autoDelete\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"internal\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    default: {}\n  } ]\n};\n\nmodule.exports.ExchangeDeclareOk = 2621451;\n\nvar methodInfoExchangeDeclareOk = module.exports.methodInfoExchangeDeclareOk = {\n  id: 2621451,\n  classId: 40,\n  methodId: 11,\n  name: \"ExchangeDeclareOk\",\n  args: []\n};\n\nmodule.exports.ExchangeDelete = 2621460;\n\nvar methodInfoExchangeDelete = module.exports.methodInfoExchangeDelete = {\n  id: 2621460,\n  classId: 40,\n  methodId: 20,\n  name: \"ExchangeDelete\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"bit\",\n    name: \"ifUnused\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  } ]\n};\n\nmodule.exports.ExchangeDeleteOk = 2621461;\n\nvar methodInfoExchangeDeleteOk = module.exports.methodInfoExchangeDeleteOk = {\n  id: 2621461,\n  classId: 40,\n  methodId: 21,\n  name: \"ExchangeDeleteOk\",\n  args: []\n};\n\nmodule.exports.ExchangeBind = 2621470;\n\nvar methodInfoExchangeBind = module.exports.methodInfoExchangeBind = {\n  id: 2621470,\n  classId: 40,\n  methodId: 30,\n  name: \"ExchangeBind\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"destination\"\n  }, {\n    type: \"shortstr\",\n    name: \"source\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\",\n    default: \"\"\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    default: {}\n  } ]\n};\n\nmodule.exports.ExchangeBindOk = 2621471;\n\nvar methodInfoExchangeBindOk = module.exports.methodInfoExchangeBindOk = {\n  id: 2621471,\n  classId: 40,\n  methodId: 31,\n  name: \"ExchangeBindOk\",\n  args: []\n};\n\nmodule.exports.ExchangeUnbind = 2621480;\n\nvar methodInfoExchangeUnbind = module.exports.methodInfoExchangeUnbind = {\n  id: 2621480,\n  classId: 40,\n  methodId: 40,\n  name: \"ExchangeUnbind\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"destination\"\n  }, {\n    type: \"shortstr\",\n    name: \"source\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\",\n    default: \"\"\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    default: {}\n  } ]\n};\n\nmodule.exports.ExchangeUnbindOk = 2621491;\n\nvar methodInfoExchangeUnbindOk = module.exports.methodInfoExchangeUnbindOk = {\n  id: 2621491,\n  classId: 40,\n  methodId: 51,\n  name: \"ExchangeUnbindOk\",\n  args: []\n};\n\nmodule.exports.QueueDeclare = 3276810;\n\nvar methodInfoQueueDeclare = module.exports.methodInfoQueueDeclare = {\n  id: 3276810,\n  classId: 50,\n  methodId: 10,\n  name: \"QueueDeclare\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    default: \"\"\n  }, {\n    type: \"bit\",\n    name: \"passive\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"durable\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"exclusive\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"autoDelete\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    default: {}\n  } ]\n};\n\nmodule.exports.QueueDeclareOk = 3276811;\n\nvar methodInfoQueueDeclareOk = module.exports.methodInfoQueueDeclareOk = {\n  id: 3276811,\n  classId: 50,\n  methodId: 11,\n  name: \"QueueDeclareOk\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"queue\"\n  }, {\n    type: \"long\",\n    name: \"messageCount\"\n  }, {\n    type: \"long\",\n    name: \"consumerCount\"\n  } ]\n};\n\nmodule.exports.QueueBind = 3276820;\n\nvar methodInfoQueueBind = module.exports.methodInfoQueueBind = {\n  id: 3276820,\n  classId: 50,\n  methodId: 20,\n  name: \"QueueBind\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    default: \"\"\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\",\n    default: \"\"\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    default: {}\n  } ]\n};\n\nmodule.exports.QueueBindOk = 3276821;\n\nvar methodInfoQueueBindOk = module.exports.methodInfoQueueBindOk = {\n  id: 3276821,\n  classId: 50,\n  methodId: 21,\n  name: \"QueueBindOk\",\n  args: []\n};\n\nmodule.exports.QueuePurge = 3276830;\n\nvar methodInfoQueuePurge = module.exports.methodInfoQueuePurge = {\n  id: 3276830,\n  classId: 50,\n  methodId: 30,\n  name: \"QueuePurge\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    default: \"\"\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  } ]\n};\n\nmodule.exports.QueuePurgeOk = 3276831;\n\nvar methodInfoQueuePurgeOk = module.exports.methodInfoQueuePurgeOk = {\n  id: 3276831,\n  classId: 50,\n  methodId: 31,\n  name: \"QueuePurgeOk\",\n  args: [ {\n    type: \"long\",\n    name: \"messageCount\"\n  } ]\n};\n\nmodule.exports.QueueDelete = 3276840;\n\nvar methodInfoQueueDelete = module.exports.methodInfoQueueDelete = {\n  id: 3276840,\n  classId: 50,\n  methodId: 40,\n  name: \"QueueDelete\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    default: \"\"\n  }, {\n    type: \"bit\",\n    name: \"ifUnused\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"ifEmpty\",\n    default: !1\n  }, {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  } ]\n};\n\nmodule.exports.QueueDeleteOk = 3276841;\n\nvar methodInfoQueueDeleteOk = module.exports.methodInfoQueueDeleteOk = {\n  id: 3276841,\n  classId: 50,\n  methodId: 41,\n  name: \"QueueDeleteOk\",\n  args: [ {\n    type: \"long\",\n    name: \"messageCount\"\n  } ]\n};\n\nmodule.exports.QueueUnbind = 3276850;\n\nvar methodInfoQueueUnbind = module.exports.methodInfoQueueUnbind = {\n  id: 3276850,\n  classId: 50,\n  methodId: 50,\n  name: \"QueueUnbind\",\n  args: [ {\n    type: \"short\",\n    name: \"ticket\",\n    default: 0\n  }, {\n    type: \"shortstr\",\n    name: \"queue\",\n    default: \"\"\n  }, {\n    type: \"shortstr\",\n    name: \"exchange\"\n  }, {\n    type: \"shortstr\",\n    name: \"routingKey\",\n    default: \"\"\n  }, {\n    type: \"table\",\n    name: \"arguments\",\n    default: {}\n  } ]\n};\n\nmodule.exports.QueueUnbindOk = 3276851;\n\nvar methodInfoQueueUnbindOk = module.exports.methodInfoQueueUnbindOk = {\n  id: 3276851,\n  classId: 50,\n  methodId: 51,\n  name: \"QueueUnbindOk\",\n  args: []\n};\n\nmodule.exports.TxSelect = 5898250;\n\nvar methodInfoTxSelect = module.exports.methodInfoTxSelect = {\n  id: 5898250,\n  classId: 90,\n  methodId: 10,\n  name: \"TxSelect\",\n  args: []\n};\n\nmodule.exports.TxSelectOk = 5898251;\n\nvar methodInfoTxSelectOk = module.exports.methodInfoTxSelectOk = {\n  id: 5898251,\n  classId: 90,\n  methodId: 11,\n  name: \"TxSelectOk\",\n  args: []\n};\n\nmodule.exports.TxCommit = 5898260;\n\nvar methodInfoTxCommit = module.exports.methodInfoTxCommit = {\n  id: 5898260,\n  classId: 90,\n  methodId: 20,\n  name: \"TxCommit\",\n  args: []\n};\n\nmodule.exports.TxCommitOk = 5898261;\n\nvar methodInfoTxCommitOk = module.exports.methodInfoTxCommitOk = {\n  id: 5898261,\n  classId: 90,\n  methodId: 21,\n  name: \"TxCommitOk\",\n  args: []\n};\n\nmodule.exports.TxRollback = 5898270;\n\nvar methodInfoTxRollback = module.exports.methodInfoTxRollback = {\n  id: 5898270,\n  classId: 90,\n  methodId: 30,\n  name: \"TxRollback\",\n  args: []\n};\n\nmodule.exports.TxRollbackOk = 5898271;\n\nvar methodInfoTxRollbackOk = module.exports.methodInfoTxRollbackOk = {\n  id: 5898271,\n  classId: 90,\n  methodId: 31,\n  name: \"TxRollbackOk\",\n  args: []\n};\n\nmodule.exports.ConfirmSelect = 5570570;\n\nvar methodInfoConfirmSelect = module.exports.methodInfoConfirmSelect = {\n  id: 5570570,\n  classId: 85,\n  methodId: 10,\n  name: \"ConfirmSelect\",\n  args: [ {\n    type: \"bit\",\n    name: \"nowait\",\n    default: !1\n  } ]\n};\n\nmodule.exports.ConfirmSelectOk = 5570571;\n\nvar methodInfoConfirmSelectOk = module.exports.methodInfoConfirmSelectOk = {\n  id: 5570571,\n  classId: 85,\n  methodId: 11,\n  name: \"ConfirmSelectOk\",\n  args: []\n};\n\nmodule.exports.BasicProperties = 60;\n\nvar propertiesInfoBasicProperties = module.exports.propertiesInfoBasicProperties = {\n  id: 60,\n  name: \"BasicProperties\",\n  args: [ {\n    type: \"shortstr\",\n    name: \"contentType\"\n  }, {\n    type: \"shortstr\",\n    name: \"contentEncoding\"\n  }, {\n    type: \"table\",\n    name: \"headers\"\n  }, {\n    type: \"octet\",\n    name: \"deliveryMode\"\n  }, {\n    type: \"octet\",\n    name: \"priority\"\n  }, {\n    type: \"shortstr\",\n    name: \"correlationId\"\n  }, {\n    type: \"shortstr\",\n    name: \"replyTo\"\n  }, {\n    type: \"shortstr\",\n    name: \"expiration\"\n  }, {\n    type: \"shortstr\",\n    name: \"messageId\"\n  }, {\n    type: \"timestamp\",\n    name: \"timestamp\"\n  }, {\n    type: \"shortstr\",\n    name: \"type\"\n  }, {\n    type: \"shortstr\",\n    name: \"userId\"\n  }, {\n    type: \"shortstr\",\n    name: \"appId\"\n  }, {\n    type: \"shortstr\",\n    name: \"clusterId\"\n  } ]\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/defs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/error.js":
/*!*******************************************!*\
  !*** ./node_modules/amqplib/lib/error.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var inherits = (__webpack_require__(/*! util */ \"util\").inherits);\n\nfunction trimStack(stack, num) {\n  return stack && stack.split('\\n').slice(num).join('\\n');\n}\n\nfunction IllegalOperationError(msg, stack) {\n  var tmp = new Error();\n  this.message = msg;\n  this.stack = this.toString() + '\\n' + trimStack(tmp.stack, 2);\n  this.stackAtStateChange = stack;\n}\ninherits(IllegalOperationError, Error);\n\nIllegalOperationError.prototype.name = 'IllegalOperationError';\n\nfunction stackCapture(reason) {\n  var e = new Error();\n  return 'Stack capture: ' + reason + '\\n' +\n    trimStack(e.stack, 2);\n}\n\nmodule.exports.IllegalOperationError = IllegalOperationError;\nmodule.exports.stackCapture = stackCapture;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUEsZUFBZSxrREFBd0I7O0FBRXZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9DQUFvQztBQUNwQywyQkFBMkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIyLy4vbm9kZV9tb2R1bGVzL2FtcXBsaWIvbGliL2Vycm9yLmpzP2M4ZGMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGluaGVyaXRzID0gcmVxdWlyZSgndXRpbCcpLmluaGVyaXRzO1xuXG5mdW5jdGlvbiB0cmltU3RhY2soc3RhY2ssIG51bSkge1xuICByZXR1cm4gc3RhY2sgJiYgc3RhY2suc3BsaXQoJ1xcbicpLnNsaWNlKG51bSkuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIElsbGVnYWxPcGVyYXRpb25FcnJvcihtc2csIHN0YWNrKSB7XG4gIHZhciB0bXAgPSBuZXcgRXJyb3IoKTtcbiAgdGhpcy5tZXNzYWdlID0gbXNnO1xuICB0aGlzLnN0YWNrID0gdGhpcy50b1N0cmluZygpICsgJ1xcbicgKyB0cmltU3RhY2sodG1wLnN0YWNrLCAyKTtcbiAgdGhpcy5zdGFja0F0U3RhdGVDaGFuZ2UgPSBzdGFjaztcbn1cbmluaGVyaXRzKElsbGVnYWxPcGVyYXRpb25FcnJvciwgRXJyb3IpO1xuXG5JbGxlZ2FsT3BlcmF0aW9uRXJyb3IucHJvdG90eXBlLm5hbWUgPSAnSWxsZWdhbE9wZXJhdGlvbkVycm9yJztcblxuZnVuY3Rpb24gc3RhY2tDYXB0dXJlKHJlYXNvbikge1xuICB2YXIgZSA9IG5ldyBFcnJvcigpO1xuICByZXR1cm4gJ1N0YWNrIGNhcHR1cmU6ICcgKyByZWFzb24gKyAnXFxuJyArXG4gICAgdHJpbVN0YWNrKGUuc3RhY2ssIDIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5JbGxlZ2FsT3BlcmF0aW9uRXJyb3IgPSBJbGxlZ2FsT3BlcmF0aW9uRXJyb3I7XG5tb2R1bGUuZXhwb3J0cy5zdGFja0NhcHR1cmUgPSBzdGFja0NhcHR1cmU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/format.js":
/*!********************************************!*\
  !*** ./node_modules/amqplib/lib/format.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("//\n//\n//\n\n// Stringifying various things\n\n\n\nvar defs = __webpack_require__(/*! ./defs */ \"(rsc)/./node_modules/amqplib/lib/defs.js\");\nvar format = (__webpack_require__(/*! util */ \"util\").format);\nvar HEARTBEAT = (__webpack_require__(/*! ./frame */ \"(rsc)/./node_modules/amqplib/lib/frame.js\").HEARTBEAT);\n\nmodule.exports.closeMessage = function(close) {\n  var code = close.fields.replyCode;\n  return format('%d (%s) with message \"%s\"',\n                code, defs.constant_strs[code],\n                close.fields.replyText);\n}\n\nmodule.exports.methodName = function(id) {\n  return defs.info(id).name;\n};\n\nmodule.exports.inspect = function(frame, showFields) {\n  if (frame === HEARTBEAT) {\n    return '<Heartbeat>';\n  }\n  else if (!frame.id) {\n    return format('<Content channel:%d size:%d>',\n                  frame.channel, frame.size);\n  }\n  else {\n    var info = defs.info(frame.id);\n    return format('<%s channel:%d%s>', info.name, frame.channel,\n                  (showFields)\n                  ? ' ' + JSON.stringify(frame.fields, undefined, 2)\n                  : '');\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvZm9ybWF0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFYTs7QUFFYixXQUFXLG1CQUFPLENBQUMsd0RBQVE7QUFDM0IsYUFBYSxnREFBc0I7QUFDbkMsZ0JBQWdCLDJGQUE0Qjs7QUFFNUMsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCO0FBQ0E7O0FBRUEsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYjIvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvZm9ybWF0LmpzPzdmYjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vXG4vL1xuXG4vLyBTdHJpbmdpZnlpbmcgdmFyaW91cyB0aGluZ3NcblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmcyA9IHJlcXVpcmUoJy4vZGVmcycpO1xudmFyIGZvcm1hdCA9IHJlcXVpcmUoJ3V0aWwnKS5mb3JtYXQ7XG52YXIgSEVBUlRCRUFUID0gcmVxdWlyZSgnLi9mcmFtZScpLkhFQVJUQkVBVDtcblxubW9kdWxlLmV4cG9ydHMuY2xvc2VNZXNzYWdlID0gZnVuY3Rpb24oY2xvc2UpIHtcbiAgdmFyIGNvZGUgPSBjbG9zZS5maWVsZHMucmVwbHlDb2RlO1xuICByZXR1cm4gZm9ybWF0KCclZCAoJXMpIHdpdGggbWVzc2FnZSBcIiVzXCInLFxuICAgICAgICAgICAgICAgIGNvZGUsIGRlZnMuY29uc3RhbnRfc3Ryc1tjb2RlXSxcbiAgICAgICAgICAgICAgICBjbG9zZS5maWVsZHMucmVwbHlUZXh0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMubWV0aG9kTmFtZSA9IGZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBkZWZzLmluZm8oaWQpLm5hbWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5pbnNwZWN0ID0gZnVuY3Rpb24oZnJhbWUsIHNob3dGaWVsZHMpIHtcbiAgaWYgKGZyYW1lID09PSBIRUFSVEJFQVQpIHtcbiAgICByZXR1cm4gJzxIZWFydGJlYXQ+JztcbiAgfVxuICBlbHNlIGlmICghZnJhbWUuaWQpIHtcbiAgICByZXR1cm4gZm9ybWF0KCc8Q29udGVudCBjaGFubmVsOiVkIHNpemU6JWQ+JyxcbiAgICAgICAgICAgICAgICAgIGZyYW1lLmNoYW5uZWwsIGZyYW1lLnNpemUpO1xuICB9XG4gIGVsc2Uge1xuICAgIHZhciBpbmZvID0gZGVmcy5pbmZvKGZyYW1lLmlkKTtcbiAgICByZXR1cm4gZm9ybWF0KCc8JXMgY2hhbm5lbDolZCVzPicsIGluZm8ubmFtZSwgZnJhbWUuY2hhbm5lbCxcbiAgICAgICAgICAgICAgICAgIChzaG93RmllbGRzKVxuICAgICAgICAgICAgICAgICAgPyAnICcgKyBKU09OLnN0cmluZ2lmeShmcmFtZS5maWVsZHMsIHVuZGVmaW5lZCwgMilcbiAgICAgICAgICAgICAgICAgIDogJycpO1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/format.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/frame.js":
/*!*******************************************!*\
  !*** ./node_modules/amqplib/lib/frame.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// The river sweeps through\n// Silt and twigs, gravel and leaves\n// Driving the wheel on\n\n\n\nvar defs = __webpack_require__(/*! ./defs */ \"(rsc)/./node_modules/amqplib/lib/defs.js\");\nvar constants = defs.constants;\nvar decode = defs.decode;\n\nvar Bits = __webpack_require__(/*! @acuminous/bitsyntax */ \"(rsc)/./node_modules/@acuminous/bitsyntax/index.js\");\n\nmodule.exports.PROTOCOL_HEADER = \"AMQP\" + String.fromCharCode(0, 0, 9, 1);\n\n/*\n  Frame format:\n\n  0      1         3             7                size+7 size+8\n  +------+---------+-------------+ +------------+ +-----------+\n  | type | channel | size        | | payload    | | frame-end |\n  +------+---------+-------------+ +------------+ +-----------+\n  octet   short     long            size octets    octet\n\n  In general I want to know those first three things straight away, so I\n  can discard frames early.\n\n*/\n\n// framing constants\nvar FRAME_METHOD = constants.FRAME_METHOD,\nFRAME_HEARTBEAT = constants.FRAME_HEARTBEAT,\nFRAME_HEADER = constants.FRAME_HEADER,\nFRAME_BODY = constants.FRAME_BODY,\nFRAME_END = constants.FRAME_END;\n\nvar bodyCons =\n  Bits.builder(FRAME_BODY,\n               'channel:16, size:32, payload:size/binary',\n               FRAME_END);\n\n// %%% TESTME possibly better to cons the first bit and write the\n// second directly, in the absence of IO lists\nmodule.exports.makeBodyFrame = function(channel, payload) {\n  return bodyCons({channel: channel, size: payload.length, payload: payload});\n};\n\nvar frameHeaderPattern = Bits.matcher('type:8', 'channel:16',\n                                      'size:32', 'rest/binary');\n\nfunction parseFrame(bin, max) {\n  var fh = frameHeaderPattern(bin);\n  if (fh) {\n    var size = fh.size, rest = fh.rest;\n    if (size > max) {\n      throw new Error('Frame size exceeds frame max');\n    }\n    else if (rest.length > size) {\n      if (rest[size] !== FRAME_END)\n        throw new Error('Invalid frame');\n\n      return {\n        type: fh.type,\n        channel: fh.channel,\n        size: size,\n        payload: rest.slice(0, size),\n        rest: rest.slice(size + 1)\n      };\n    }\n  }\n  return false;\n}\n\nmodule.exports.parseFrame = parseFrame;\n\nvar headerPattern = Bits.matcher('class:16',\n                                 '_weight:16',\n                                 'size:64',\n                                 'flagsAndfields/binary');\n\nvar methodPattern = Bits.matcher('id:32, args/binary');\n\nvar HEARTBEAT = {channel: 0};\n\nmodule.exports.decodeFrame = function(frame) {\n  var payload = frame.payload;\n  switch (frame.type) {\n  case FRAME_METHOD:\n    var idAndArgs = methodPattern(payload);\n    var id = idAndArgs.id;\n    var fields = decode(id, idAndArgs.args);\n    return {id: id, channel: frame.channel, fields: fields};\n  case FRAME_HEADER:\n    var parts = headerPattern(payload);\n    var id = parts['class'];\n    var fields = decode(id, parts.flagsAndfields);\n    return {id: id, channel: frame.channel,\n            size: parts.size, fields: fields};\n  case FRAME_BODY:\n    return {channel: frame.channel, content: frame.payload};\n  case FRAME_HEARTBEAT:\n    return HEARTBEAT;\n  default:\n    throw new Error('Unknown frame type ' + frame.type);\n  }\n}\n\n// encoded heartbeat\nmodule.exports.HEARTBEAT_BUF = Buffer.from([constants.FRAME_HEARTBEAT,\n                                           0, 0, 0, 0, // size = 0\n                                           0, 0, // channel = 0\n                                           constants.FRAME_END]);\n\nmodule.exports.HEARTBEAT = HEARTBEAT;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvZnJhbWUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyx3REFBUTtBQUMzQjtBQUNBOztBQUVBLFdBQVcsbUJBQU8sQ0FBQyxnRkFBc0I7O0FBRXpDLDhCQUE4Qjs7QUFFOUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUIsbUJBQW1CLHlEQUF5RDtBQUM1RTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpQkFBaUI7O0FBRWpCLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBOztBQUVBLHdCQUF3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYjIvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvZnJhbWUuanM/OTk4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgcml2ZXIgc3dlZXBzIHRocm91Z2hcbi8vIFNpbHQgYW5kIHR3aWdzLCBncmF2ZWwgYW5kIGxlYXZlc1xuLy8gRHJpdmluZyB0aGUgd2hlZWwgb25cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmcyA9IHJlcXVpcmUoJy4vZGVmcycpO1xudmFyIGNvbnN0YW50cyA9IGRlZnMuY29uc3RhbnRzO1xudmFyIGRlY29kZSA9IGRlZnMuZGVjb2RlO1xuXG52YXIgQml0cyA9IHJlcXVpcmUoJ0BhY3VtaW5vdXMvYml0c3ludGF4Jyk7XG5cbm1vZHVsZS5leHBvcnRzLlBST1RPQ09MX0hFQURFUiA9IFwiQU1RUFwiICsgU3RyaW5nLmZyb21DaGFyQ29kZSgwLCAwLCA5LCAxKTtcblxuLypcbiAgRnJhbWUgZm9ybWF0OlxuXG4gIDAgICAgICAxICAgICAgICAgMyAgICAgICAgICAgICA3ICAgICAgICAgICAgICAgIHNpemUrNyBzaXplKzhcbiAgKy0tLS0tLSstLS0tLS0tLS0rLS0tLS0tLS0tLS0tLSsgKy0tLS0tLS0tLS0tLSsgKy0tLS0tLS0tLS0tK1xuICB8IHR5cGUgfCBjaGFubmVsIHwgc2l6ZSAgICAgICAgfCB8IHBheWxvYWQgICAgfCB8IGZyYW1lLWVuZCB8XG4gICstLS0tLS0rLS0tLS0tLS0tKy0tLS0tLS0tLS0tLS0rICstLS0tLS0tLS0tLS0rICstLS0tLS0tLS0tLStcbiAgb2N0ZXQgICBzaG9ydCAgICAgbG9uZyAgICAgICAgICAgIHNpemUgb2N0ZXRzICAgIG9jdGV0XG5cbiAgSW4gZ2VuZXJhbCBJIHdhbnQgdG8ga25vdyB0aG9zZSBmaXJzdCB0aHJlZSB0aGluZ3Mgc3RyYWlnaHQgYXdheSwgc28gSVxuICBjYW4gZGlzY2FyZCBmcmFtZXMgZWFybHkuXG5cbiovXG5cbi8vIGZyYW1pbmcgY29uc3RhbnRzXG52YXIgRlJBTUVfTUVUSE9EID0gY29uc3RhbnRzLkZSQU1FX01FVEhPRCxcbkZSQU1FX0hFQVJUQkVBVCA9IGNvbnN0YW50cy5GUkFNRV9IRUFSVEJFQVQsXG5GUkFNRV9IRUFERVIgPSBjb25zdGFudHMuRlJBTUVfSEVBREVSLFxuRlJBTUVfQk9EWSA9IGNvbnN0YW50cy5GUkFNRV9CT0RZLFxuRlJBTUVfRU5EID0gY29uc3RhbnRzLkZSQU1FX0VORDtcblxudmFyIGJvZHlDb25zID1cbiAgQml0cy5idWlsZGVyKEZSQU1FX0JPRFksXG4gICAgICAgICAgICAgICAnY2hhbm5lbDoxNiwgc2l6ZTozMiwgcGF5bG9hZDpzaXplL2JpbmFyeScsXG4gICAgICAgICAgICAgICBGUkFNRV9FTkQpO1xuXG4vLyAlJSUgVEVTVE1FIHBvc3NpYmx5IGJldHRlciB0byBjb25zIHRoZSBmaXJzdCBiaXQgYW5kIHdyaXRlIHRoZVxuLy8gc2Vjb25kIGRpcmVjdGx5LCBpbiB0aGUgYWJzZW5jZSBvZiBJTyBsaXN0c1xubW9kdWxlLmV4cG9ydHMubWFrZUJvZHlGcmFtZSA9IGZ1bmN0aW9uKGNoYW5uZWwsIHBheWxvYWQpIHtcbiAgcmV0dXJuIGJvZHlDb25zKHtjaGFubmVsOiBjaGFubmVsLCBzaXplOiBwYXlsb2FkLmxlbmd0aCwgcGF5bG9hZDogcGF5bG9hZH0pO1xufTtcblxudmFyIGZyYW1lSGVhZGVyUGF0dGVybiA9IEJpdHMubWF0Y2hlcigndHlwZTo4JywgJ2NoYW5uZWw6MTYnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTozMicsICdyZXN0L2JpbmFyeScpO1xuXG5mdW5jdGlvbiBwYXJzZUZyYW1lKGJpbiwgbWF4KSB7XG4gIHZhciBmaCA9IGZyYW1lSGVhZGVyUGF0dGVybihiaW4pO1xuICBpZiAoZmgpIHtcbiAgICB2YXIgc2l6ZSA9IGZoLnNpemUsIHJlc3QgPSBmaC5yZXN0O1xuICAgIGlmIChzaXplID4gbWF4KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZyYW1lIHNpemUgZXhjZWVkcyBmcmFtZSBtYXgnKTtcbiAgICB9XG4gICAgZWxzZSBpZiAocmVzdC5sZW5ndGggPiBzaXplKSB7XG4gICAgICBpZiAocmVzdFtzaXplXSAhPT0gRlJBTUVfRU5EKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZnJhbWUnKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogZmgudHlwZSxcbiAgICAgICAgY2hhbm5lbDogZmguY2hhbm5lbCxcbiAgICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgcGF5bG9hZDogcmVzdC5zbGljZSgwLCBzaXplKSxcbiAgICAgICAgcmVzdDogcmVzdC5zbGljZShzaXplICsgMSlcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMucGFyc2VGcmFtZSA9IHBhcnNlRnJhbWU7XG5cbnZhciBoZWFkZXJQYXR0ZXJuID0gQml0cy5tYXRjaGVyKCdjbGFzczoxNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnX3dlaWdodDoxNicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTo2NCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZmxhZ3NBbmRmaWVsZHMvYmluYXJ5Jyk7XG5cbnZhciBtZXRob2RQYXR0ZXJuID0gQml0cy5tYXRjaGVyKCdpZDozMiwgYXJncy9iaW5hcnknKTtcblxudmFyIEhFQVJUQkVBVCA9IHtjaGFubmVsOiAwfTtcblxubW9kdWxlLmV4cG9ydHMuZGVjb2RlRnJhbWUgPSBmdW5jdGlvbihmcmFtZSkge1xuICB2YXIgcGF5bG9hZCA9IGZyYW1lLnBheWxvYWQ7XG4gIHN3aXRjaCAoZnJhbWUudHlwZSkge1xuICBjYXNlIEZSQU1FX01FVEhPRDpcbiAgICB2YXIgaWRBbmRBcmdzID0gbWV0aG9kUGF0dGVybihwYXlsb2FkKTtcbiAgICB2YXIgaWQgPSBpZEFuZEFyZ3MuaWQ7XG4gICAgdmFyIGZpZWxkcyA9IGRlY29kZShpZCwgaWRBbmRBcmdzLmFyZ3MpO1xuICAgIHJldHVybiB7aWQ6IGlkLCBjaGFubmVsOiBmcmFtZS5jaGFubmVsLCBmaWVsZHM6IGZpZWxkc307XG4gIGNhc2UgRlJBTUVfSEVBREVSOlxuICAgIHZhciBwYXJ0cyA9IGhlYWRlclBhdHRlcm4ocGF5bG9hZCk7XG4gICAgdmFyIGlkID0gcGFydHNbJ2NsYXNzJ107XG4gICAgdmFyIGZpZWxkcyA9IGRlY29kZShpZCwgcGFydHMuZmxhZ3NBbmRmaWVsZHMpO1xuICAgIHJldHVybiB7aWQ6IGlkLCBjaGFubmVsOiBmcmFtZS5jaGFubmVsLFxuICAgICAgICAgICAgc2l6ZTogcGFydHMuc2l6ZSwgZmllbGRzOiBmaWVsZHN9O1xuICBjYXNlIEZSQU1FX0JPRFk6XG4gICAgcmV0dXJuIHtjaGFubmVsOiBmcmFtZS5jaGFubmVsLCBjb250ZW50OiBmcmFtZS5wYXlsb2FkfTtcbiAgY2FzZSBGUkFNRV9IRUFSVEJFQVQ6XG4gICAgcmV0dXJuIEhFQVJUQkVBVDtcbiAgZGVmYXVsdDpcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gZnJhbWUgdHlwZSAnICsgZnJhbWUudHlwZSk7XG4gIH1cbn1cblxuLy8gZW5jb2RlZCBoZWFydGJlYXRcbm1vZHVsZS5leHBvcnRzLkhFQVJUQkVBVF9CVUYgPSBCdWZmZXIuZnJvbShbY29uc3RhbnRzLkZSQU1FX0hFQVJUQkVBVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAwLCAwLCAwLCAvLyBzaXplID0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDAsIDAsIC8vIGNoYW5uZWwgPSAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RhbnRzLkZSQU1FX0VORF0pO1xuXG5tb2R1bGUuZXhwb3J0cy5IRUFSVEJFQVQgPSBIRUFSVEJFQVQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/frame.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/heartbeat.js":
/*!***********************************************!*\
  !*** ./node_modules/amqplib/lib/heartbeat.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("//\n//\n//\n\n// Heartbeats. In AMQP both clients and servers may expect a heartbeat\n// frame if there is no activity on the connection for a negotiated\n// period of time. If there's no activity for two such intervals, the\n// server or client is allowed to close the connection on the\n// presumption that the other party is dead.\n//\n// The client has two jobs here: the first is to send a heartbeat\n// frame if it's not sent any frames for a while, so that the server\n// doesn't think it's dead; the second is to check periodically that\n// it's seen activity from the server, and to advise if there doesn't\n// appear to have been any for over two intervals.\n//\n// Node.JS timers are a bit unreliable, in that they endeavour only to\n// fire at some indeterminate point *after* the given time (rather\n// gives the lie to 'realtime', dunnit). Because the scheduler is just\n// an event loop, it's quite easy to delay timers indefinitely by\n// reacting to some I/O with a lot of computation.\n//\n// To mitigate this I need a bit of creative interpretation:\n//\n//  - I'll schedule a server activity check for every `interval`, and\n//    check just how much time has passed. It will overshoot by at\n//    least a small margin; modulo missing timer deadlines, it'll\n//    notice between two and three intervals after activity actually\n//    stops (otherwise, at some point after two intervals).\n//\n//  - Every `interval / 2` I'll check that we've sent something since\n//    the last check, and if not, send a heartbeat frame. If we're\n//    really too busy to even run the check for two whole heartbeat\n//    intervals, there must be a lot of I (but not O, at least not on\n//    the connection), or computation, in which case perhaps it's best\n//    the server cuts us off anyway. Why `interval / 2`? Because the\n//    edge case is that the client sent a frame just after a\n//    heartbeat, which would mean I only send one after almost two\n//    intervals. (NB a heartbeat counts as a send, so it'll be checked\n//    at least twice before sending another)\n//\n// This design is based largely on RabbitMQ's heartbeating:\n// https://github.com/rabbitmq/rabbitmq-common/blob/master/src/rabbit_heartbeat.erl\n\n// %% Yes, I could apply the same 'actually passage of time' thing to\n// %% send as well as to recv.\n\n\n\nvar EventEmitter = __webpack_require__(/*! events */ \"events\");\n\n// Exported so that we can mess with it in tests\nmodule.exports.UNITS_TO_MS = 1000;\n\nclass Heart extends EventEmitter {\n  constructor (interval, checkSend, checkRecv) {\n    super();\n\n    this.interval = interval;\n\n    var intervalMs = interval * module.exports.UNITS_TO_MS;\n    // Function#bind is my new best friend\n    var beat = this.emit.bind(this, 'beat');\n    var timeout = this.emit.bind(this, 'timeout');\n\n    this.sendTimer = setInterval(\n      this.runHeartbeat.bind(this, checkSend, beat), intervalMs / 2);\n\n    // A timeout occurs if I see nothing for *two consecutive* intervals\n    var recvMissed = 0;\n    function missedTwo () {\n      if (!checkRecv())\n        return (++recvMissed < 2);\n      else { recvMissed = 0; return true; }\n    }\n    this.recvTimer = setInterval(\n      this.runHeartbeat.bind(this, missedTwo, timeout), intervalMs);\n  }\n\n  clear () {\n    clearInterval(this.sendTimer);\n    clearInterval(this.recvTimer);\n  }\n\n  runHeartbeat (check, fail) {\n    // Have we seen activity?\n    if (!check())\n      fail();\n  }\n}\n\nmodule.exports.Heart = Heart;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvaGVhcnRiZWF0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRWE7O0FBRWIsbUJBQW1CLG1CQUFPLENBQUMsc0JBQVE7O0FBRW5DO0FBQ0EsMEJBQTBCOztBQUUxQjtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxnQkFBZ0I7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYjIvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvaGVhcnRiZWF0LmpzPzk5MjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vXG4vL1xuXG4vLyBIZWFydGJlYXRzLiBJbiBBTVFQIGJvdGggY2xpZW50cyBhbmQgc2VydmVycyBtYXkgZXhwZWN0IGEgaGVhcnRiZWF0XG4vLyBmcmFtZSBpZiB0aGVyZSBpcyBubyBhY3Rpdml0eSBvbiB0aGUgY29ubmVjdGlvbiBmb3IgYSBuZWdvdGlhdGVkXG4vLyBwZXJpb2Qgb2YgdGltZS4gSWYgdGhlcmUncyBubyBhY3Rpdml0eSBmb3IgdHdvIHN1Y2ggaW50ZXJ2YWxzLCB0aGVcbi8vIHNlcnZlciBvciBjbGllbnQgaXMgYWxsb3dlZCB0byBjbG9zZSB0aGUgY29ubmVjdGlvbiBvbiB0aGVcbi8vIHByZXN1bXB0aW9uIHRoYXQgdGhlIG90aGVyIHBhcnR5IGlzIGRlYWQuXG4vL1xuLy8gVGhlIGNsaWVudCBoYXMgdHdvIGpvYnMgaGVyZTogdGhlIGZpcnN0IGlzIHRvIHNlbmQgYSBoZWFydGJlYXRcbi8vIGZyYW1lIGlmIGl0J3Mgbm90IHNlbnQgYW55IGZyYW1lcyBmb3IgYSB3aGlsZSwgc28gdGhhdCB0aGUgc2VydmVyXG4vLyBkb2Vzbid0IHRoaW5rIGl0J3MgZGVhZDsgdGhlIHNlY29uZCBpcyB0byBjaGVjayBwZXJpb2RpY2FsbHkgdGhhdFxuLy8gaXQncyBzZWVuIGFjdGl2aXR5IGZyb20gdGhlIHNlcnZlciwgYW5kIHRvIGFkdmlzZSBpZiB0aGVyZSBkb2Vzbid0XG4vLyBhcHBlYXIgdG8gaGF2ZSBiZWVuIGFueSBmb3Igb3ZlciB0d28gaW50ZXJ2YWxzLlxuLy9cbi8vIE5vZGUuSlMgdGltZXJzIGFyZSBhIGJpdCB1bnJlbGlhYmxlLCBpbiB0aGF0IHRoZXkgZW5kZWF2b3VyIG9ubHkgdG9cbi8vIGZpcmUgYXQgc29tZSBpbmRldGVybWluYXRlIHBvaW50ICphZnRlciogdGhlIGdpdmVuIHRpbWUgKHJhdGhlclxuLy8gZ2l2ZXMgdGhlIGxpZSB0byAncmVhbHRpbWUnLCBkdW5uaXQpLiBCZWNhdXNlIHRoZSBzY2hlZHVsZXIgaXMganVzdFxuLy8gYW4gZXZlbnQgbG9vcCwgaXQncyBxdWl0ZSBlYXN5IHRvIGRlbGF5IHRpbWVycyBpbmRlZmluaXRlbHkgYnlcbi8vIHJlYWN0aW5nIHRvIHNvbWUgSS9PIHdpdGggYSBsb3Qgb2YgY29tcHV0YXRpb24uXG4vL1xuLy8gVG8gbWl0aWdhdGUgdGhpcyBJIG5lZWQgYSBiaXQgb2YgY3JlYXRpdmUgaW50ZXJwcmV0YXRpb246XG4vL1xuLy8gIC0gSSdsbCBzY2hlZHVsZSBhIHNlcnZlciBhY3Rpdml0eSBjaGVjayBmb3IgZXZlcnkgYGludGVydmFsYCwgYW5kXG4vLyAgICBjaGVjayBqdXN0IGhvdyBtdWNoIHRpbWUgaGFzIHBhc3NlZC4gSXQgd2lsbCBvdmVyc2hvb3QgYnkgYXRcbi8vICAgIGxlYXN0IGEgc21hbGwgbWFyZ2luOyBtb2R1bG8gbWlzc2luZyB0aW1lciBkZWFkbGluZXMsIGl0J2xsXG4vLyAgICBub3RpY2UgYmV0d2VlbiB0d28gYW5kIHRocmVlIGludGVydmFscyBhZnRlciBhY3Rpdml0eSBhY3R1YWxseVxuLy8gICAgc3RvcHMgKG90aGVyd2lzZSwgYXQgc29tZSBwb2ludCBhZnRlciB0d28gaW50ZXJ2YWxzKS5cbi8vXG4vLyAgLSBFdmVyeSBgaW50ZXJ2YWwgLyAyYCBJJ2xsIGNoZWNrIHRoYXQgd2UndmUgc2VudCBzb21ldGhpbmcgc2luY2Vcbi8vICAgIHRoZSBsYXN0IGNoZWNrLCBhbmQgaWYgbm90LCBzZW5kIGEgaGVhcnRiZWF0IGZyYW1lLiBJZiB3ZSdyZVxuLy8gICAgcmVhbGx5IHRvbyBidXN5IHRvIGV2ZW4gcnVuIHRoZSBjaGVjayBmb3IgdHdvIHdob2xlIGhlYXJ0YmVhdFxuLy8gICAgaW50ZXJ2YWxzLCB0aGVyZSBtdXN0IGJlIGEgbG90IG9mIEkgKGJ1dCBub3QgTywgYXQgbGVhc3Qgbm90IG9uXG4vLyAgICB0aGUgY29ubmVjdGlvbiksIG9yIGNvbXB1dGF0aW9uLCBpbiB3aGljaCBjYXNlIHBlcmhhcHMgaXQncyBiZXN0XG4vLyAgICB0aGUgc2VydmVyIGN1dHMgdXMgb2ZmIGFueXdheS4gV2h5IGBpbnRlcnZhbCAvIDJgPyBCZWNhdXNlIHRoZVxuLy8gICAgZWRnZSBjYXNlIGlzIHRoYXQgdGhlIGNsaWVudCBzZW50IGEgZnJhbWUganVzdCBhZnRlciBhXG4vLyAgICBoZWFydGJlYXQsIHdoaWNoIHdvdWxkIG1lYW4gSSBvbmx5IHNlbmQgb25lIGFmdGVyIGFsbW9zdCB0d29cbi8vICAgIGludGVydmFscy4gKE5CIGEgaGVhcnRiZWF0IGNvdW50cyBhcyBhIHNlbmQsIHNvIGl0J2xsIGJlIGNoZWNrZWRcbi8vICAgIGF0IGxlYXN0IHR3aWNlIGJlZm9yZSBzZW5kaW5nIGFub3RoZXIpXG4vL1xuLy8gVGhpcyBkZXNpZ24gaXMgYmFzZWQgbGFyZ2VseSBvbiBSYWJiaXRNUSdzIGhlYXJ0YmVhdGluZzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yYWJiaXRtcS9yYWJiaXRtcS1jb21tb24vYmxvYi9tYXN0ZXIvc3JjL3JhYmJpdF9oZWFydGJlYXQuZXJsXG5cbi8vICUlIFllcywgSSBjb3VsZCBhcHBseSB0aGUgc2FtZSAnYWN0dWFsbHkgcGFzc2FnZSBvZiB0aW1lJyB0aGluZyB0b1xuLy8gJSUgc2VuZCBhcyB3ZWxsIGFzIHRvIHJlY3YuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpO1xuXG4vLyBFeHBvcnRlZCBzbyB0aGF0IHdlIGNhbiBtZXNzIHdpdGggaXQgaW4gdGVzdHNcbm1vZHVsZS5leHBvcnRzLlVOSVRTX1RPX01TID0gMTAwMDtcblxuY2xhc3MgSGVhcnQgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvciAoaW50ZXJ2YWwsIGNoZWNrU2VuZCwgY2hlY2tSZWN2KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBpbnRlcnZhbDtcblxuICAgIHZhciBpbnRlcnZhbE1zID0gaW50ZXJ2YWwgKiBtb2R1bGUuZXhwb3J0cy5VTklUU19UT19NUztcbiAgICAvLyBGdW5jdGlvbiNiaW5kIGlzIG15IG5ldyBiZXN0IGZyaWVuZFxuICAgIHZhciBiZWF0ID0gdGhpcy5lbWl0LmJpbmQodGhpcywgJ2JlYXQnKTtcbiAgICB2YXIgdGltZW91dCA9IHRoaXMuZW1pdC5iaW5kKHRoaXMsICd0aW1lb3V0Jyk7XG5cbiAgICB0aGlzLnNlbmRUaW1lciA9IHNldEludGVydmFsKFxuICAgICAgdGhpcy5ydW5IZWFydGJlYXQuYmluZCh0aGlzLCBjaGVja1NlbmQsIGJlYXQpLCBpbnRlcnZhbE1zIC8gMik7XG5cbiAgICAvLyBBIHRpbWVvdXQgb2NjdXJzIGlmIEkgc2VlIG5vdGhpbmcgZm9yICp0d28gY29uc2VjdXRpdmUqIGludGVydmFsc1xuICAgIHZhciByZWN2TWlzc2VkID0gMDtcbiAgICBmdW5jdGlvbiBtaXNzZWRUd28gKCkge1xuICAgICAgaWYgKCFjaGVja1JlY3YoKSlcbiAgICAgICAgcmV0dXJuICgrK3JlY3ZNaXNzZWQgPCAyKTtcbiAgICAgIGVsc2UgeyByZWN2TWlzc2VkID0gMDsgcmV0dXJuIHRydWU7IH1cbiAgICB9XG4gICAgdGhpcy5yZWN2VGltZXIgPSBzZXRJbnRlcnZhbChcbiAgICAgIHRoaXMucnVuSGVhcnRiZWF0LmJpbmQodGhpcywgbWlzc2VkVHdvLCB0aW1lb3V0KSwgaW50ZXJ2YWxNcyk7XG4gIH1cblxuICBjbGVhciAoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnNlbmRUaW1lcik7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnJlY3ZUaW1lcik7XG4gIH1cblxuICBydW5IZWFydGJlYXQgKGNoZWNrLCBmYWlsKSB7XG4gICAgLy8gSGF2ZSB3ZSBzZWVuIGFjdGl2aXR5P1xuICAgIGlmICghY2hlY2soKSlcbiAgICAgIGZhaWwoKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cy5IZWFydCA9IEhlYXJ0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/heartbeat.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/lib/mux.js":
/*!*****************************************!*\
  !*** ./node_modules/amqplib/lib/mux.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("//\n//\n//\n\n\n\n// A Mux is an object into which other readable streams may be piped;\n// it then writes 'packets' from the upstreams to the given\n// downstream.\n\nvar assert = __webpack_require__(/*! assert */ \"assert\");\n\nvar schedule = (typeof setImmediate === 'function') ?\n  setImmediate : process.nextTick;\n\nclass Mux {\n  constructor (downstream) {\n    this.newStreams = [];\n    this.oldStreams = [];\n    this.blocked = false;\n    this.scheduledRead = false;\n\n    this.out = downstream;\n    var self = this;\n    downstream.on('drain', function () {\n      self.blocked = false;\n      self._readIncoming();\n    });\n  }\n\n  // There are 2 states we can be in:\n  // - waiting for outbound capacity, which will be signalled by a\n  // - 'drain' event on the downstream; or,\n  // - no packets to send, waiting for an inbound buffer to have\n  //   packets, which will be signalled by a 'readable' event\n  // If we write all packets available whenever there is outbound\n  // capacity, we will either run out of outbound capacity (`#write`\n  // returns false), or run out of packets (all calls to an\n  // `inbound.read()` have returned null).\n  _readIncoming () {\n\n    // We may be sent here speculatively, if an incoming stream has\n    // become readable\n    if (this.blocked) return;\n\n    var accepting = true;\n    var out = this.out;\n\n    // Try to read a chunk from each stream in turn, until all streams\n    // are empty, or we exhaust our ability to accept chunks.\n    function roundrobin (streams) {\n      var s;\n      while (accepting && (s = streams.shift())) {\n        var chunk = s.read();\n        if (chunk !== null) {\n          accepting = out.write(chunk);\n          streams.push(s);\n        }\n      }\n    }\n\n    roundrobin(this.newStreams);\n\n    // Either we exhausted the new queues, or we ran out of capacity. If\n    // we ran out of capacity, all the remaining new streams (i.e.,\n    // those with packets left) become old streams. This effectively\n    // prioritises streams that keep their buffers close to empty over\n    // those that are constantly near full.\n    if (accepting) { // all new queues are exhausted, write as many as\n      // we can from the old streams\n      assert.equal(0, this.newStreams.length);\n      roundrobin(this.oldStreams);\n    }\n    else { // ran out of room\n      assert(this.newStreams.length > 0, \"Expect some new streams to remain\");\n      Array.prototype.push.apply(this.oldStreams, this.newStreams);\n      this.newStreams = [];\n    }\n    // We may have exhausted all the old queues, or run out of room;\n    // either way, all we need to do is record whether we have capacity\n    // or not, so any speculative reads will know\n    this.blocked = !accepting;\n  }\n\n  _scheduleRead () {\n    var self = this;\n\n    if (!self.scheduledRead) {\n      schedule(function () {\n        self.scheduledRead = false;\n        self._readIncoming();\n      });\n      self.scheduledRead = true;\n    }\n  }\n\n  pipeFrom (readable) {\n    var self = this;\n\n    function enqueue () {\n      self.newStreams.push(readable);\n      self._scheduleRead();\n    }\n\n    function cleanup () {\n      readable.removeListener('readable', enqueue);\n      readable.removeListener('error', cleanup);\n      readable.removeListener('end', cleanup);\n      readable.removeListener('unpipeFrom', cleanupIfMe);\n    }\n    function cleanupIfMe (dest) {\n      if (dest === self) cleanup();\n    }\n\n    readable.on('unpipeFrom', cleanupIfMe);\n    readable.on('end', cleanup);\n    readable.on('error', cleanup);\n    readable.on('readable', enqueue);\n  }\n\n  unpipeFrom (readable) {\n    readable.emit('unpipeFrom', this);\n  }\n}\n\nmodule.exports.Mux = Mux;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvYW1xcGxpYi9saWIvbXV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFFYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLHNCQUFROztBQUU3QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViMi8uL25vZGVfbW9kdWxlcy9hbXFwbGliL2xpYi9tdXguanM/YWM5MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvL1xuLy9cbi8vXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gQSBNdXggaXMgYW4gb2JqZWN0IGludG8gd2hpY2ggb3RoZXIgcmVhZGFibGUgc3RyZWFtcyBtYXkgYmUgcGlwZWQ7XG4vLyBpdCB0aGVuIHdyaXRlcyAncGFja2V0cycgZnJvbSB0aGUgdXBzdHJlYW1zIHRvIHRoZSBnaXZlblxuLy8gZG93bnN0cmVhbS5cblxudmFyIGFzc2VydCA9IHJlcXVpcmUoJ2Fzc2VydCcpO1xuXG52YXIgc2NoZWR1bGUgPSAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJykgP1xuICBzZXRJbW1lZGlhdGUgOiBwcm9jZXNzLm5leHRUaWNrO1xuXG5jbGFzcyBNdXgge1xuICBjb25zdHJ1Y3RvciAoZG93bnN0cmVhbSkge1xuICAgIHRoaXMubmV3U3RyZWFtcyA9IFtdO1xuICAgIHRoaXMub2xkU3RyZWFtcyA9IFtdO1xuICAgIHRoaXMuYmxvY2tlZCA9IGZhbHNlO1xuICAgIHRoaXMuc2NoZWR1bGVkUmVhZCA9IGZhbHNlO1xuXG4gICAgdGhpcy5vdXQgPSBkb3duc3RyZWFtO1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBkb3duc3RyZWFtLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbGYuYmxvY2tlZCA9IGZhbHNlO1xuICAgICAgc2VsZi5fcmVhZEluY29taW5nKCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBUaGVyZSBhcmUgMiBzdGF0ZXMgd2UgY2FuIGJlIGluOlxuICAvLyAtIHdhaXRpbmcgZm9yIG91dGJvdW5kIGNhcGFjaXR5LCB3aGljaCB3aWxsIGJlIHNpZ25hbGxlZCBieSBhXG4gIC8vIC0gJ2RyYWluJyBldmVudCBvbiB0aGUgZG93bnN0cmVhbTsgb3IsXG4gIC8vIC0gbm8gcGFja2V0cyB0byBzZW5kLCB3YWl0aW5nIGZvciBhbiBpbmJvdW5kIGJ1ZmZlciB0byBoYXZlXG4gIC8vICAgcGFja2V0cywgd2hpY2ggd2lsbCBiZSBzaWduYWxsZWQgYnkgYSAncmVhZGFibGUnIGV2ZW50XG4gIC8vIElmIHdlIHdyaXRlIGFsbCBwYWNrZXRzIGF2YWlsYWJsZSB3aGVuZXZlciB0aGVyZSBpcyBvdXRib3VuZFxuICAvLyBjYXBhY2l0eSwgd2Ugd2lsbCBlaXRoZXIgcnVuIG91dCBvZiBvdXRib3VuZCBjYXBhY2l0eSAoYCN3cml0ZWBcbiAgLy8gcmV0dXJucyBmYWxzZSksIG9yIHJ1biBvdXQgb2YgcGFja2V0cyAoYWxsIGNhbGxzIHRvIGFuXG4gIC8vIGBpbmJvdW5kLnJlYWQoKWAgaGF2ZSByZXR1cm5lZCBudWxsKS5cbiAgX3JlYWRJbmNvbWluZyAoKSB7XG5cbiAgICAvLyBXZSBtYXkgYmUgc2VudCBoZXJlIHNwZWN1bGF0aXZlbHksIGlmIGFuIGluY29taW5nIHN0cmVhbSBoYXNcbiAgICAvLyBiZWNvbWUgcmVhZGFibGVcbiAgICBpZiAodGhpcy5ibG9ja2VkKSByZXR1cm47XG5cbiAgICB2YXIgYWNjZXB0aW5nID0gdHJ1ZTtcbiAgICB2YXIgb3V0ID0gdGhpcy5vdXQ7XG5cbiAgICAvLyBUcnkgdG8gcmVhZCBhIGNodW5rIGZyb20gZWFjaCBzdHJlYW0gaW4gdHVybiwgdW50aWwgYWxsIHN0cmVhbXNcbiAgICAvLyBhcmUgZW1wdHksIG9yIHdlIGV4aGF1c3Qgb3VyIGFiaWxpdHkgdG8gYWNjZXB0IGNodW5rcy5cbiAgICBmdW5jdGlvbiByb3VuZHJvYmluIChzdHJlYW1zKSB7XG4gICAgICB2YXIgcztcbiAgICAgIHdoaWxlIChhY2NlcHRpbmcgJiYgKHMgPSBzdHJlYW1zLnNoaWZ0KCkpKSB7XG4gICAgICAgIHZhciBjaHVuayA9IHMucmVhZCgpO1xuICAgICAgICBpZiAoY2h1bmsgIT09IG51bGwpIHtcbiAgICAgICAgICBhY2NlcHRpbmcgPSBvdXQud3JpdGUoY2h1bmspO1xuICAgICAgICAgIHN0cmVhbXMucHVzaChzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJvdW5kcm9iaW4odGhpcy5uZXdTdHJlYW1zKTtcblxuICAgIC8vIEVpdGhlciB3ZSBleGhhdXN0ZWQgdGhlIG5ldyBxdWV1ZXMsIG9yIHdlIHJhbiBvdXQgb2YgY2FwYWNpdHkuIElmXG4gICAgLy8gd2UgcmFuIG91dCBvZiBjYXBhY2l0eSwgYWxsIHRoZSByZW1haW5pbmcgbmV3IHN0cmVhbXMgKGkuZS4sXG4gICAgLy8gdGhvc2Ugd2l0aCBwYWNrZXRzIGxlZnQpIGJlY29tZSBvbGQgc3RyZWFtcy4gVGhpcyBlZmZlY3RpdmVseVxuICAgIC8vIHByaW9yaXRpc2VzIHN0cmVhbXMgdGhhdCBrZWVwIHRoZWlyIGJ1ZmZlcnMgY2xvc2UgdG8gZW1wdHkgb3ZlclxuICAgIC8vIHRob3NlIHRoYXQgYXJlIGNvbnN0YW50bHkgbmVhciBmdWxsLlxuICAgIGlmIChhY2NlcHRpbmcpIHsgLy8gYWxsIG5ldyBxdWV1ZXMgYXJlIGV4aGF1c3RlZCwgd3JpdGUgYXMgbWFueSBhc1xuICAgICAgLy8gd2UgY2FuIGZyb20gdGhlIG9sZCBzdHJlYW1zXG4gICAgICBhc3NlcnQuZXF1YWwoMCwgdGhpcy5uZXdTdHJlYW1zLmxlbmd0aCk7XG4gICAgICByb3VuZHJvYmluKHRoaXMub2xkU3RyZWFtcyk7XG4gICAgfVxuICAgIGVsc2UgeyAvLyByYW4gb3V0IG9mIHJvb21cbiAgICAgIGFzc2VydCh0aGlzLm5ld1N0cmVhbXMubGVuZ3RoID4gMCwgXCJFeHBlY3Qgc29tZSBuZXcgc3RyZWFtcyB0byByZW1haW5cIik7XG4gICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLm9sZFN0cmVhbXMsIHRoaXMubmV3U3RyZWFtcyk7XG4gICAgICB0aGlzLm5ld1N0cmVhbXMgPSBbXTtcbiAgICB9XG4gICAgLy8gV2UgbWF5IGhhdmUgZXhoYXVzdGVkIGFsbCB0aGUgb2xkIHF1ZXVlcywgb3IgcnVuIG91dCBvZiByb29tO1xuICAgIC8vIGVpdGhlciB3YXksIGFsbCB3ZSBuZWVkIHRvIGRvIGlzIHJlY29yZCB3aGV0aGVyIHdlIGhhdmUgY2FwYWNpdHlcbiAgICAvLyBvciBub3QsIHNvIGFueSBzcGVjdWxhdGl2ZSByZWFkcyB3aWxsIGtub3dcbiAgICB0aGlzLmJsb2NrZWQgPSAhYWNjZXB0aW5nO1xuICB9XG5cbiAgX3NjaGVkdWxlUmVhZCAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuXG4gICAgaWYgKCFzZWxmLnNjaGVkdWxlZFJlYWQpIHtcbiAgICAgIHNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5zY2hlZHVsZWRSZWFkID0gZmFsc2U7XG4gICAgICAgIHNlbGYuX3JlYWRJbmNvbWluZygpO1xuICAgICAgfSk7XG4gICAgICBzZWxmLnNjaGVkdWxlZFJlYWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHBpcGVGcm9tIChyZWFkYWJsZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIGVucXVldWUgKCkge1xuICAgICAgc2VsZi5uZXdTdHJlYW1zLnB1c2gocmVhZGFibGUpO1xuICAgICAgc2VsZi5fc2NoZWR1bGVSZWFkKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cCAoKSB7XG4gICAgICByZWFkYWJsZS5yZW1vdmVMaXN0ZW5lcigncmVhZGFibGUnLCBlbnF1ZXVlKTtcbiAgICAgIHJlYWRhYmxlLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGNsZWFudXApO1xuICAgICAgcmVhZGFibGUucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApO1xuICAgICAgcmVhZGFibGUucmVtb3ZlTGlzdGVuZXIoJ3VucGlwZUZyb20nLCBjbGVhbnVwSWZNZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNsZWFudXBJZk1lIChkZXN0KSB7XG4gICAgICBpZiAoZGVzdCA9PT0gc2VsZikgY2xlYW51cCgpO1xuICAgIH1cblxuICAgIHJlYWRhYmxlLm9uKCd1bnBpcGVGcm9tJywgY2xlYW51cElmTWUpO1xuICAgIHJlYWRhYmxlLm9uKCdlbmQnLCBjbGVhbnVwKTtcbiAgICByZWFkYWJsZS5vbignZXJyb3InLCBjbGVhbnVwKTtcbiAgICByZWFkYWJsZS5vbigncmVhZGFibGUnLCBlbnF1ZXVlKTtcbiAgfVxuXG4gIHVucGlwZUZyb20gKHJlYWRhYmxlKSB7XG4gICAgcmVhZGFibGUuZW1pdCgndW5waXBlRnJvbScsIHRoaXMpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzLk11eCA9IE11eDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/amqplib/lib/mux.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/amqplib/package.json":
/*!*******************************************!*\
  !*** ./node_modules/amqplib/package.json ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"amqplib","homepage":"http://amqp-node.github.io/amqplib/","main":"./channel_api.js","version":"0.10.4","description":"An AMQP 0-9-1 (e.g., RabbitMQ) library and client.","repository":{"type":"git","url":"https://github.com/amqp-node/amqplib.git"},"engines":{"node":">=10"},"dependencies":{"@acuminous/bitsyntax":"^0.1.2","buffer-more-ints":"~1.0.0","readable-stream":"1.x >=1.1.9","url-parse":"~1.5.10"},"devDependencies":{"claire":"0.4.1","mocha":"^9.2.2","nyc":"^15.1.0","uglify-js":"2.8.x"},"scripts":{"test":"make test","prepare":"make"},"keywords":["AMQP","AMQP 0-9-1","RabbitMQ"],"author":"Michael Bridgen <mikeb@squaremobius.net>","license":"MIT"}');

/***/ })

};
;