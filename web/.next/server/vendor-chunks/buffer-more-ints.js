"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/buffer-more-ints";
exports.ids = ["vendor-chunks/buffer-more-ints"];
exports.modules = {

/***/ "(rsc)/./node_modules/buffer-more-ints/buffer-more-ints.js":
/*!***********************************************************!*\
  !*** ./node_modules/buffer-more-ints/buffer-more-ints.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("\n\n// JavaScript is numerically challenged\nvar SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\nvar SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\n\n// The maximum contiguous integer that can be held in a IEEE754 double\nvar MAX_INT = 0x1fffffffffffff;\n\nfunction isContiguousInt(val) {\n    return val <= MAX_INT && val >= -MAX_INT;\n}\n\nfunction assertContiguousInt(val) {\n    if (!isContiguousInt(val)) {\n        throw new TypeError(\"number cannot be represented as a contiguous integer\");\n    }\n}\n\nmodule.exports.isContiguousInt = isContiguousInt;\nmodule.exports.assertContiguousInt = assertContiguousInt;\n\n// Fill in the regular procedures\n['UInt', 'Int'].forEach(function (sign) {\n  var suffix = sign + '8';\n  module.exports['read' + suffix] =\n    Buffer.prototype['read' + suffix].call;\n  module.exports['write' + suffix] =\n    Buffer.prototype['write' + suffix].call;\n\n  ['16', '32'].forEach(function (size) {\n    ['LE', 'BE'].forEach(function (endian) {\n      var suffix = sign + size + endian;\n      var read = Buffer.prototype['read' + suffix];\n      module.exports['read' + suffix] =\n        function (buf, offset) {\n          return read.call(buf, offset);\n        };\n      var write = Buffer.prototype['write' + suffix];\n      module.exports['write' + suffix] =\n        function (buf, val, offset) {\n          return write.call(buf, val, offset);\n        };\n    });\n  });\n});\n\n// Check that a value is an integer within the given range\nfunction check_value(val, min, max) {\n    val = +val;\n    if (typeof(val) != 'number' || val < min || val > max || Math.floor(val) !== val) {\n        throw new TypeError(\"\\\"value\\\" argument is out of bounds\");\n    }\n    return val;\n}\n\n// Check that something is within the Buffer bounds\nfunction check_bounds(buf, offset, len) {\n    if (offset < 0 || offset + len > buf.length) {\n        throw new RangeError(\"Index out of range\");\n    }\n}\n\nfunction readUInt24BE(buf, offset) {\n  return buf.readUInt8(offset) << 16 | buf.readUInt16BE(offset + 1);\n}\nmodule.exports.readUInt24BE = readUInt24BE;\n\nfunction writeUInt24BE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffff);\n    check_bounds(buf, offset, 3);\n    buf.writeUInt8(val >>> 16, offset);\n    buf.writeUInt16BE(val & 0xffff, offset + 1);\n}\nmodule.exports.writeUInt24BE = writeUInt24BE;\n\nfunction readUInt40BE(buf, offset) {\n    return (buf.readUInt8(offset) || 0) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 1);\n}\nmodule.exports.readUInt40BE = readUInt40BE;\n\nfunction writeUInt40BE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffff);\n    check_bounds(buf, offset, 5);\n    buf.writeUInt8(Math.floor(val * SHIFT_RIGHT_32), offset);\n    buf.writeInt32BE(val & -1, offset + 1);\n}\nmodule.exports.writeUInt40BE = writeUInt40BE;\n\nfunction readUInt48BE(buf, offset) {\n    return buf.readUInt16BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 2);\n}\nmodule.exports.readUInt48BE = readUInt48BE;\n\nfunction writeUInt48BE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffff);\n    check_bounds(buf, offset, 6);\n    buf.writeUInt16BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n    buf.writeInt32BE(val & -1, offset + 2);\n}\nmodule.exports.writeUInt48BE = writeUInt48BE;\n\nfunction readUInt56BE(buf, offset) {\n    return ((buf.readUInt8(offset) || 0) << 16 | buf.readUInt16BE(offset + 1)) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 3);\n}\nmodule.exports.readUInt56BE = readUInt56BE;\n\nfunction writeUInt56BE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffffff);\n    check_bounds(buf, offset, 7);\n\n    if (val < 0x100000000000000) {\n        var hi = Math.floor(val * SHIFT_RIGHT_32);\n        buf.writeUInt8(hi >>> 16, offset);\n        buf.writeUInt16BE(hi & 0xffff, offset + 1);\n        buf.writeInt32BE(val & -1, offset + 3);\n    } else {\n        // Special case because 2^56-1 gets rounded up to 2^56\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n    }\n}\nmodule.exports.writeUInt56BE = writeUInt56BE;\n\nfunction readUInt64BE(buf, offset) {\n    return buf.readUInt32BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 4);\n}\nmodule.exports.readUInt64BE = readUInt64BE;\n\nfunction writeUInt64BE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffffffff);\n    check_bounds(buf, offset, 8);\n\n    if (val < 0x10000000000000000) {\n        buf.writeUInt32BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n        buf.writeInt32BE(val & -1, offset + 4);\n    } else {\n        // Special case because 2^64-1 gets rounded up to 2^64\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n        buf[offset+7] = 0xff;\n    }\n}\nmodule.exports.writeUInt64BE = writeUInt64BE;\n\nfunction readUInt24LE(buf, offset) {\n    return buf.readUInt8(offset + 2) << 16 | buf.readUInt16LE(offset);\n}\nmodule.exports.readUInt24LE = readUInt24LE;\n\nfunction writeUInt24LE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffff);\n    check_bounds(buf, offset, 3);\n\n    buf.writeUInt16LE(val & 0xffff, offset);\n    buf.writeUInt8(val >>> 16, offset + 2);\n}\nmodule.exports.writeUInt24LE = writeUInt24LE;\n\nfunction readUInt40LE(buf, offset) {\n    return (buf.readUInt8(offset + 4) || 0) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt40LE = readUInt40LE;\n\nfunction writeUInt40LE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffff);\n    check_bounds(buf, offset, 5);\n    buf.writeInt32LE(val & -1, offset);\n    buf.writeUInt8(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeUInt40LE = writeUInt40LE;\n\nfunction readUInt48LE(buf, offset) {\n    return buf.readUInt16LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt48LE = readUInt48LE;\n\nfunction writeUInt48LE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffff);\n    check_bounds(buf, offset, 6);\n    buf.writeInt32LE(val & -1, offset);\n    buf.writeUInt16LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeUInt48LE = writeUInt48LE;\n\nfunction readUInt56LE(buf, offset) {\n    return ((buf.readUInt8(offset + 6) || 0) << 16 | buf.readUInt16LE(offset + 4)) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt56LE = readUInt56LE;\n\nfunction writeUInt56LE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffffff);\n    check_bounds(buf, offset, 7);\n\n    if (val < 0x100000000000000) {\n        buf.writeInt32LE(val & -1, offset);\n        var hi = Math.floor(val * SHIFT_RIGHT_32);\n        buf.writeUInt16LE(hi & 0xffff, offset + 4);\n        buf.writeUInt8(hi >>> 16, offset + 6);\n    } else {\n        // Special case because 2^56-1 gets rounded up to 2^56\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n    }\n}\nmodule.exports.writeUInt56LE = writeUInt56LE;\n\nfunction readUInt64LE(buf, offset) {\n    return buf.readUInt32LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readUInt64LE = readUInt64LE;\n\nfunction writeUInt64LE(buf, val, offset) {\n    val = check_value(val, 0, 0xffffffffffffffff);\n    check_bounds(buf, offset, 8);\n\n    if (val < 0x10000000000000000) {\n        buf.writeInt32LE(val & -1, offset);\n        buf.writeUInt32LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n    } else {\n        // Special case because 2^64-1 gets rounded up to 2^64\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n        buf[offset+7] = 0xff;\n    }\n}\nmodule.exports.writeUInt64LE = writeUInt64LE;\n\n\nfunction readInt24BE(buf, offset) {\n    return (buf.readInt8(offset) << 16) + buf.readUInt16BE(offset + 1);\n}\nmodule.exports.readInt24BE = readInt24BE;\n\nfunction writeInt24BE(buf, val, offset) {\n    val = check_value(val, -0x800000, 0x7fffff);\n    check_bounds(buf, offset, 3);\n    buf.writeInt8(val >> 16, offset);\n    buf.writeUInt16BE(val & 0xffff, offset + 1);\n}\nmodule.exports.writeInt24BE = writeInt24BE;\n\nfunction readInt40BE(buf, offset) {\n    return (buf.readInt8(offset) || 0) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 1);\n}\nmodule.exports.readInt40BE = readInt40BE;\n\nfunction writeInt40BE(buf, val, offset) {\n    val = check_value(val, -0x8000000000, 0x7fffffffff);\n    check_bounds(buf, offset, 5);\n    buf.writeInt8(Math.floor(val * SHIFT_RIGHT_32), offset);\n    buf.writeInt32BE(val & -1, offset + 1);\n}\nmodule.exports.writeInt40BE = writeInt40BE;\n\nfunction readInt48BE(buf, offset) {\n    return buf.readInt16BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 2);\n}\nmodule.exports.readInt48BE = readInt48BE;\n\nfunction writeInt48BE(buf, val, offset) {\n    val = check_value(val, -0x800000000000, 0x7fffffffffff);\n    check_bounds(buf, offset, 6);\n    buf.writeInt16BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n    buf.writeInt32BE(val & -1, offset + 2);\n}\nmodule.exports.writeInt48BE = writeInt48BE;\n\nfunction readInt56BE(buf, offset) {\n    return (((buf.readInt8(offset) || 0) << 16) + buf.readUInt16BE(offset + 1)) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 3);\n}\nmodule.exports.readInt56BE = readInt56BE;\n\nfunction writeInt56BE(buf, val, offset) {\n    val = check_value(val, -0x800000000000000, 0x7fffffffffffff);\n    check_bounds(buf, offset, 7);\n\n    if (val < 0x80000000000000) {\n        var hi = Math.floor(val * SHIFT_RIGHT_32);\n        buf.writeInt8(hi >> 16, offset);\n        buf.writeUInt16BE(hi & 0xffff, offset + 1);\n        buf.writeInt32BE(val & -1, offset + 3);\n    } else {\n        // Special case because 2^55-1 gets rounded up to 2^55\n        buf[offset] = 0x7f;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n    }\n}\nmodule.exports.writeInt56BE = writeInt56BE;\n\nfunction readInt64BE(buf, offset) {\n    return buf.readInt32BE(offset) * SHIFT_LEFT_32 + buf.readUInt32BE(offset + 4);\n}\nmodule.exports.readInt64BE = readInt64BE;\n\nfunction writeInt64BE(buf, val, offset) {\n    val = check_value(val, -0x800000000000000000, 0x7fffffffffffffff);\n    check_bounds(buf, offset, 8);\n\n    if (val < 0x8000000000000000) {\n        buf.writeInt32BE(Math.floor(val * SHIFT_RIGHT_32), offset);\n        buf.writeInt32BE(val & -1, offset + 4);\n    } else {\n        // Special case because 2^63-1 gets rounded up to 2^63\n        buf[offset] = 0x7f;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n        buf[offset+7] = 0xff;\n    }\n}\nmodule.exports.writeInt64BE = writeInt64BE;\n\nfunction readInt24LE(buf, offset) {\n    return (buf.readInt8(offset + 2) << 16) + buf.readUInt16LE(offset);\n}\nmodule.exports.readInt24LE = readInt24LE;\n\nfunction writeInt24LE(buf, val, offset) {\n    val = check_value(val, -0x800000, 0x7fffff);\n    check_bounds(buf, offset, 3);\n    buf.writeUInt16LE(val & 0xffff, offset);\n    buf.writeInt8(val >> 16, offset + 2);\n}\nmodule.exports.writeInt24LE = writeInt24LE;\n\nfunction readInt40LE(buf, offset) {\n    return (buf.readInt8(offset + 4) || 0) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt40LE = readInt40LE;\n\nfunction writeInt40LE(buf, val, offset) {\n    val = check_value(val, -0x8000000000, 0x7fffffffff);\n    check_bounds(buf, offset, 5);\n    buf.writeInt32LE(val & -1, offset);\n    buf.writeInt8(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeInt40LE = writeInt40LE;\n\nfunction readInt48LE(buf, offset) {\n    return buf.readInt16LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt48LE = readInt48LE;\n\nfunction writeInt48LE(buf, val, offset) {\n    val = check_value(val, -0x800000000000, 0x7fffffffffff);\n    check_bounds(buf, offset, 6);\n    buf.writeInt32LE(val & -1, offset);\n    buf.writeInt16LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n}\nmodule.exports.writeInt48LE = writeInt48LE;\n\nfunction readInt56LE(buf, offset) {\n    return (((buf.readInt8(offset + 6) || 0) << 16) + buf.readUInt16LE(offset + 4)) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt56LE = readInt56LE;\n\nfunction writeInt56LE(buf, val, offset) {\n    val = check_value(val, -0x80000000000000, 0x7fffffffffffff);\n    check_bounds(buf, offset, 7);\n\n    if (val < 0x80000000000000) {\n        buf.writeInt32LE(val & -1, offset);\n        var hi = Math.floor(val * SHIFT_RIGHT_32);\n        buf.writeUInt16LE(hi & 0xffff, offset + 4);\n        buf.writeInt8(hi >> 16, offset + 6);\n    } else {\n        // Special case because 2^55-1 gets rounded up to 2^55\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0x7f;\n    }\n}\nmodule.exports.writeInt56LE = writeInt56LE;\n\nfunction readInt64LE(buf, offset) {\n    return buf.readInt32LE(offset + 4) * SHIFT_LEFT_32 + buf.readUInt32LE(offset);\n}\nmodule.exports.readInt64LE = readInt64LE;\n\nfunction writeInt64LE(buf, val, offset) {\n    val = check_value(val, -0x8000000000000000, 0x7fffffffffffffff);\n    check_bounds(buf, offset, 8);\n\n    if (val < 0x8000000000000000) {\n        buf.writeInt32LE(val & -1, offset);\n        buf.writeInt32LE(Math.floor(val * SHIFT_RIGHT_32), offset + 4);\n    } else {\n        // Special case because 2^55-1 gets rounded up to 2^55\n        buf[offset] = 0xff;\n        buf[offset+1] = 0xff;\n        buf[offset+2] = 0xff;\n        buf[offset+3] = 0xff;\n        buf[offset+4] = 0xff;\n        buf[offset+5] = 0xff;\n        buf[offset+6] = 0xff;\n        buf[offset+7] = 0x7f;\n    }\n}\nmodule.exports.writeInt64LE = writeInt64LE;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/buffer-more-ints/buffer-more-ints.js\n");

/***/ })

};
;